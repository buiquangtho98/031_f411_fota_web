
031_f411_fota_web.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08006ac0  08006ac0  00016ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800714c  0800714c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b0  200001d4  08007328  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001884  08007328  00021884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099bb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dda  00000000  00000000  00029c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063d  00000000  00000000  0002c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001693b  00000000  00000000  0002c835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aca7  00000000  00000000  00043170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087570  00000000  00000000  0004de17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030cc  00000000  00000000  000d5388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d8454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006aa8 	.word	0x08006aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006aa8 	.word	0x08006aa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ESP_Init>:

char buffer[20];

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b098      	sub	sp, #96	; 0x60
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	char data[80];

//	Ringbuf_init();

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8000ebe:	4929      	ldr	r1, [pc, #164]	; (8000f64 <ESP_Init+0xb0>)
 8000ec0:	4829      	ldr	r0, [pc, #164]	; (8000f68 <ESP_Init+0xb4>)
 8000ec2:	f000 fbbb 	bl	800163c <Uart_sendstring>
//	Uart_sendstring("RESETTING.", pc_uart);
	for (int i = 0; i < 5; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000eca:	e00c      	b.n	8000ee6 <ESP_Init+0x32>
//		Uart_sendstring(".", pc_uart);
		for (int j = 0; j < 1160 * 4 * 1000; j++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ed0:	e002      	b.n	8000ed8 <ESP_Init+0x24>
 8000ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <ESP_Init+0xb8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	dbf8      	blt.n	8000ed2 <ESP_Init+0x1e>
	for (int i = 0; i < 5; i++) {
 8000ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	ddef      	ble.n	8000ecc <ESP_Init+0x18>
			;
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8000eec:	481d      	ldr	r0, [pc, #116]	; (8000f64 <ESP_Init+0xb0>)
 8000eee:	f000 fa21 	bl	8001334 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 8000ef2:	491c      	ldr	r1, [pc, #112]	; (8000f64 <ESP_Init+0xb0>)
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <ESP_Init+0xbc>)
 8000ef6:	f000 fba1 	bl	800163c <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000efa:	bf00      	nop
 8000efc:	4919      	ldr	r1, [pc, #100]	; (8000f64 <ESP_Init+0xb0>)
 8000efe:	481d      	ldr	r0, [pc, #116]	; (8000f74 <ESP_Init+0xc0>)
 8000f00:	f000 fc56 	bl	80017b0 <Wait_for>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f8      	beq.n	8000efc <ESP_Init+0x48>
		;
//	Uart_sendstring("AT---->OK\n\n", pc_uart);

	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 8000f0a:	4816      	ldr	r0, [pc, #88]	; (8000f64 <ESP_Init+0xb0>)
 8000f0c:	f000 fa12 	bl	8001334 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000f10:	4914      	ldr	r1, [pc, #80]	; (8000f64 <ESP_Init+0xb0>)
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <ESP_Init+0xc4>)
 8000f14:	f000 fb92 	bl	800163c <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000f18:	bf00      	nop
 8000f1a:	4912      	ldr	r1, [pc, #72]	; (8000f64 <ESP_Init+0xb0>)
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <ESP_Init+0xc0>)
 8000f1e:	f000 fc47 	bl	80017b0 <Wait_for>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f8      	beq.n	8000f1a <ESP_Init+0x66>
		;
//	Uart_sendstring("CW MODE---->1\n\n", pc_uart);

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 8000f28:	480e      	ldr	r0, [pc, #56]	; (8000f64 <ESP_Init+0xb0>)
 8000f2a:	f000 fa03 	bl	8001334 <Uart_flush>
//	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000f2e:	f107 0008 	add.w	r0, r7, #8
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4911      	ldr	r1, [pc, #68]	; (8000f7c <ESP_Init+0xc8>)
 8000f38:	f003 fc5c 	bl	80047f4 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4908      	ldr	r1, [pc, #32]	; (8000f64 <ESP_Init+0xb0>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fb7a 	bl	800163c <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000f48:	bf00      	nop
 8000f4a:	4906      	ldr	r1, [pc, #24]	; (8000f64 <ESP_Init+0xb0>)
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <ESP_Init+0xc0>)
 8000f4e:	f000 fc2f 	bl	80017b0 <Wait_for>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f8      	beq.n	8000f4a <ESP_Init+0x96>
//	Uart_flush(wifi_uart);
//	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
//	while (!(Wait_for("OK\r\n", wifi_uart)));
//	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
//	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3760      	adds	r7, #96	; 0x60
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000a68 	.word	0x20000a68
 8000f68:	08006ac0 	.word	0x08006ac0
 8000f6c:	0046cd00 	.word	0x0046cd00
 8000f70:	08006acc 	.word	0x08006acc
 8000f74:	08006ad4 	.word	0x08006ad4
 8000f78:	08006adc 	.word	0x08006adc
 8000f7c:	08006aec 	.word	0x08006aec

08000f80 <bufclr>:

void bufclr(char *buf) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	int len = strlen(buf);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff f979 	bl	8000280 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < len; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e007      	b.n	8000fa8 <bufclr+0x28>
		buf[i] = '\0';
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf3      	blt.n	8000f98 <bufclr+0x18>
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <ESP_Get_Latest_Version>:

// Get the latest uploaded FW file name written on "latest_version.txt" file, on the web
void ESP_Get_Latest_Version(uint8_t* bufToPasteInto) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000fc8:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8000fcc:	6018      	str	r0, [r3, #0]
	// Some temporary local buffer
	char local_buf[500] = { 0 };
 8000fce:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000fd2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fc69 	bl	80048ba <memset>
	char local_buf2[30] = { 0 };
 8000fe8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000fec:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = { 0 };
 8001006:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800100a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	3304      	adds	r3, #4
 8001014:	22c4      	movs	r2, #196	; 0xc4
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f003 fc4e 	bl	80048ba <memset>
	// Create TCPIP connection to the web server
	Uart_flush(wifi_uart);
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 8001020:	f000 f988 	bl	8001334 <Uart_flush>
	Uart_sendstring(
 8001024:	4931      	ldr	r1, [pc, #196]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 8001026:	4832      	ldr	r0, [pc, #200]	; (80010f0 <ESP_Get_Latest_Version+0x134>)
 8001028:	f000 fb08 	bl	800163c <Uart_sendstring>
			"AT+CIPSTART=\"TCP\",\"thobq-domain.000webhostapp.com\",80\r\n",
			wifi_uart);
	while (!(Wait_for("OK\r\n", wifi_uart)))
 800102c:	bf00      	nop
 800102e:	492f      	ldr	r1, [pc, #188]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 8001030:	4830      	ldr	r0, [pc, #192]	; (80010f4 <ESP_Get_Latest_Version+0x138>)
 8001032:	f000 fbbd 	bl	80017b0 <Wait_for>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f8      	beq.n	800102e <ESP_Get_Latest_Version+0x72>
		;
	// Send HTTP GET request to get the content of latest_version.txt
	// Prepair the HTTP GET request data
	bufclr(local_buf); // Make sure it cleared
 800103c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff9d 	bl	8000f80 <bufclr>
	sprintf(local_buf, "GET /uploads/latest_version.txt HTTP/1.1\r\n"
 8001046:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800104a:	492b      	ldr	r1, [pc, #172]	; (80010f8 <ESP_Get_Latest_Version+0x13c>)
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fbd1 	bl	80047f4 <siprintf>
			"Host: thobq-domain.000webhostapp.com\r\n"
			"Connection: close\r\n\r\n");
	int len = strlen(local_buf); // Get the data length
 8001052:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f912 	bl	8000280 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	// Prepair the CIPSEND command
	bufclr(local_buf2); // Make sure it cleared
 8001062:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff8a 	bl	8000f80 <bufclr>
	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 800106c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001070:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8001074:	4921      	ldr	r1, [pc, #132]	; (80010fc <ESP_Get_Latest_Version+0x140>)
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fbbc 	bl	80047f4 <siprintf>
	// Send CIPSTART
	Uart_sendstring(local_buf2, wifi_uart);
 800107c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fada 	bl	800163c <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 8001088:	bf00      	nop
 800108a:	4918      	ldr	r1, [pc, #96]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 800108c:	481c      	ldr	r0, [pc, #112]	; (8001100 <ESP_Get_Latest_Version+0x144>)
 800108e:	f000 fb8f 	bl	80017b0 <Wait_for>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <ESP_Get_Latest_Version+0xce>
		;
	// Send HTTP GET
	Uart_sendstring(local_buf, wifi_uart);
 8001098:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 facc 	bl	800163c <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n", wifi_uart)))
 80010a4:	bf00      	nop
 80010a6:	4911      	ldr	r1, [pc, #68]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 80010a8:	4816      	ldr	r0, [pc, #88]	; (8001104 <ESP_Get_Latest_Version+0x148>)
 80010aa:	f000 fb81 	bl	80017b0 <Wait_for>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f8      	beq.n	80010a6 <ESP_Get_Latest_Version+0xea>
		;
	while (!(Wait_for("\r\n\r\n", wifi_uart)))
 80010b4:	bf00      	nop
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <ESP_Get_Latest_Version+0x14c>)
 80010ba:	f000 fb79 	bl	80017b0 <Wait_for>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f8      	beq.n	80010b6 <ESP_Get_Latest_Version+0xfa>
		;
	while (!(Copy_upto("\r\n", bufToPasteInto, wifi_uart)))
 80010c4:	bf00      	nop
 80010c6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80010ca:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <ESP_Get_Latest_Version+0x130>)
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <ESP_Get_Latest_Version+0x150>)
 80010d4:	f000 faca 	bl	800166c <Copy_upto>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f3      	beq.n	80010c6 <ESP_Get_Latest_Version+0x10a>
		;
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	f507 773a 	add.w	r7, r7, #744	; 0x2e8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000a68 	.word	0x20000a68
 80010f0:	08006b04 	.word	0x08006b04
 80010f4:	08006ad4 	.word	0x08006ad4
 80010f8:	08006b3c 	.word	0x08006b3c
 80010fc:	08006ba4 	.word	0x08006ba4
 8001100:	08006bb4 	.word	0x08006bb4
 8001104:	08006bb8 	.word	0x08006bb8
 8001108:	08006bc4 	.word	0x08006bc4
 800110c:	08006bcc 	.word	0x08006bcc

08001110 <ESP_Get_Firmware>:

// Send HTTP GET request to read the firmware file on web
void ESP_Get_Firmware(uint8_t* buff, uint8_t* vers){
 8001110:	b580      	push	{r7, lr}
 8001112:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001116:	af00      	add	r7, sp, #0
 8001118:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800111c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001120:	6018      	str	r0, [r3, #0]
 8001122:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001126:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800112a:	6019      	str	r1, [r3, #0]
	// Some temporary local buffer
	char local_buf[500] = { 0 };
 800112c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001130:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	3304      	adds	r3, #4
 800113a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fbba 	bl	80048ba <memset>
	char local_buf2[30] = { 0 };
 8001146:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800114a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	3304      	adds	r3, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	831a      	strh	r2, [r3, #24]
//	char field_buf[200] = { 0 };
	// Create TCPIP connection to the web server
	Uart_flush(wifi_uart);
 8001164:	4834      	ldr	r0, [pc, #208]	; (8001238 <ESP_Get_Firmware+0x128>)
 8001166:	f000 f8e5 	bl	8001334 <Uart_flush>
	Uart_sendstring(
 800116a:	4933      	ldr	r1, [pc, #204]	; (8001238 <ESP_Get_Firmware+0x128>)
 800116c:	4833      	ldr	r0, [pc, #204]	; (800123c <ESP_Get_Firmware+0x12c>)
 800116e:	f000 fa65 	bl	800163c <Uart_sendstring>
			"AT+CIPSTART=\"TCP\",\"thobq-domain.000webhostapp.com\",80\r\n",
			wifi_uart);
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8001172:	bf00      	nop
 8001174:	4930      	ldr	r1, [pc, #192]	; (8001238 <ESP_Get_Firmware+0x128>)
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <ESP_Get_Firmware+0x130>)
 8001178:	f000 fb1a 	bl	80017b0 <Wait_for>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f8      	beq.n	8001174 <ESP_Get_Firmware+0x64>
		;
	// Send HTTP GET request to get the content of latest fw file
	// Prepair the HTTP GET request data
	bufclr(local_buf); // Make sure it cleared
 8001182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fefa 	bl	8000f80 <bufclr>
	sprintf(local_buf, "GET /uploads/%s HTTP/1.1\r\n"
 800118c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001190:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001194:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	492a      	ldr	r1, [pc, #168]	; (8001244 <ESP_Get_Firmware+0x134>)
 800119c:	f003 fb2a 	bl	80047f4 <siprintf>
			"Host: thobq-domain.000webhostapp.com\r\n"
			"Connection: close\r\n\r\n", vers);
	int len = strlen(local_buf); // Get the data length
 80011a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f86b 	bl	8000280 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	// Prepair the CIPSEND command
	bufclr(local_buf2); // Make sure it cleared
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fee3 	bl	8000f80 <bufclr>
	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80011c2:	4921      	ldr	r1, [pc, #132]	; (8001248 <ESP_Get_Firmware+0x138>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fb15 	bl	80047f4 <siprintf>
	// Send CIPSTART
	Uart_sendstring(local_buf2, wifi_uart);
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	491a      	ldr	r1, [pc, #104]	; (8001238 <ESP_Get_Firmware+0x128>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fa33 	bl	800163c <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 80011d6:	bf00      	nop
 80011d8:	4917      	ldr	r1, [pc, #92]	; (8001238 <ESP_Get_Firmware+0x128>)
 80011da:	481c      	ldr	r0, [pc, #112]	; (800124c <ESP_Get_Firmware+0x13c>)
 80011dc:	f000 fae8 	bl	80017b0 <Wait_for>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f8      	beq.n	80011d8 <ESP_Get_Firmware+0xc8>
		;
	// Send HTTP GET
	Uart_sendstring(local_buf, wifi_uart);
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	4913      	ldr	r1, [pc, #76]	; (8001238 <ESP_Get_Firmware+0x128>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fa25 	bl	800163c <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n", wifi_uart)))
 80011f2:	bf00      	nop
 80011f4:	4910      	ldr	r1, [pc, #64]	; (8001238 <ESP_Get_Firmware+0x128>)
 80011f6:	4816      	ldr	r0, [pc, #88]	; (8001250 <ESP_Get_Firmware+0x140>)
 80011f8:	f000 fada 	bl	80017b0 <Wait_for>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f8      	beq.n	80011f4 <ESP_Get_Firmware+0xe4>
		;
	while (!(Wait_for("\r\n\r\n", wifi_uart)))
 8001202:	bf00      	nop
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <ESP_Get_Firmware+0x128>)
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <ESP_Get_Firmware+0x144>)
 8001208:	f000 fad2 	bl	80017b0 <Wait_for>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f8      	beq.n	8001204 <ESP_Get_Firmware+0xf4>
		;
	while (!(Copy_upto("CLOSED\r\n", buff, wifi_uart)))
 8001212:	bf00      	nop
 8001214:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001218:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <ESP_Get_Firmware+0x128>)
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <ESP_Get_Firmware+0x148>)
 8001222:	f000 fa23 	bl	800166c <Copy_upto>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f3      	beq.n	8001214 <ESP_Get_Firmware+0x104>
		;
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000a68 	.word	0x20000a68
 800123c:	08006b04 	.word	0x08006b04
 8001240:	08006ad4 	.word	0x08006ad4
 8001244:	08006bd0 	.word	0x08006bd0
 8001248:	08006ba4 	.word	0x08006ba4
 800124c:	08006bb4 	.word	0x08006bb4
 8001250:	08006bb8 	.word	0x08006bb8
 8001254:	08006bc4 	.word	0x08006bc4
 8001258:	08006c28 	.word	0x08006c28

0800125c <Ringbuf_init>:
ring_buffer *_rx_buffer2;
ring_buffer *_tx_buffer2;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <Ringbuf_init+0x68>)
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <Ringbuf_init+0x6c>)
 8001264:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <Ringbuf_init+0x70>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <Ringbuf_init+0x74>)
 800126a:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <Ringbuf_init+0x78>)
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <Ringbuf_init+0x7c>)
 8001270:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <Ringbuf_init+0x80>)
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <Ringbuf_init+0x84>)
 8001276:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <Ringbuf_init+0x88>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <Ringbuf_init+0x88>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <Ringbuf_init+0x8c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Ringbuf_init+0x8c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Ringbuf_init+0x88>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <Ringbuf_init+0x88>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0220 	orr.w	r2, r2, #32
 80012a6:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <Ringbuf_init+0x8c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Ringbuf_init+0x8c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	60da      	str	r2, [r3, #12]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000a14 	.word	0x20000a14
 80012c8:	200001f4 	.word	0x200001f4
 80012cc:	20000a18 	.word	0x20000a18
 80012d0:	200003fc 	.word	0x200003fc
 80012d4:	20000a1c 	.word	0x20000a1c
 80012d8:	20000604 	.word	0x20000604
 80012dc:	20000a20 	.word	0x20000a20
 80012e0:	2000080c 	.word	0x2000080c
 80012e4:	20000a24 	.word	0x20000a24
 80012e8:	20000a68 	.word	0x20000a68

080012ec <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012fe:	3301      	adds	r3, #1
 8001300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001304:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	d009      	beq.n	8001326 <store_char+0x3a>
		buffer->buffer[buffer->head] = c;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	79f9      	ldrb	r1, [r7, #7]
 800131c:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <Uart_flush>:
		buffertocopyinto[indx] = buffertocopyfrom[i];
		indx++;
	}
}

void Uart_flush(UART_HandleTypeDef *uart) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <Uart_flush+0x54>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10c      	bne.n	800135e <Uart_flush+0x2a>
		memset(_rx_buffer1->buffer, '\0', UART_BUFFER_SIZE);
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <Uart_flush+0x58>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fab3 	bl	80048ba <memset>
		_rx_buffer1->head = 0;
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <Uart_flush+0x58>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <Uart_flush+0x5c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10c      	bne.n	8001380 <Uart_flush+0x4c>
		memset(_rx_buffer2->buffer, '\0', UART_BUFFER_SIZE);
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <Uart_flush+0x60>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f003 faa2 	bl	80048ba <memset>
		_rx_buffer2->head = 0;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <Uart_flush+0x60>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000a24 	.word	0x20000a24
 800138c:	20000a14 	.word	0x20000a14
 8001390:	20000a68 	.word	0x20000a68
 8001394:	20000a1c 	.word	0x20000a1c

08001398 <Uart_peek>:

int Uart_peek(UART_HandleTypeDef *uart) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <Uart_peek+0x7c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d114      	bne.n	80013d2 <Uart_peek+0x3a>
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <Uart_peek+0x80>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <Uart_peek+0x80>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d102      	bne.n	80013c2 <Uart_peek+0x2a>
			return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	e022      	b.n	8001408 <Uart_peek+0x70>
		} else {
			return _rx_buffer1->buffer[_rx_buffer1->tail];
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <Uart_peek+0x80>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <Uart_peek+0x80>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	e01a      	b.n	8001408 <Uart_peek+0x70>
		}
	}

	else if (uart == pc_uart) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <Uart_peek+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d114      	bne.n	8001404 <Uart_peek+0x6c>
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <Uart_peek+0x88>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <Uart_peek+0x88>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d102      	bne.n	80013f4 <Uart_peek+0x5c>
			return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <Uart_peek+0x70>
		} else {
			return _rx_buffer2->buffer[_rx_buffer2->tail];
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <Uart_peek+0x88>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <Uart_peek+0x88>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	e001      	b.n	8001408 <Uart_peek+0x70>
		}
	}

	return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000a24 	.word	0x20000a24
 8001418:	20000a14 	.word	0x20000a14
 800141c:	20000a68 	.word	0x20000a68
 8001420:	20000a1c 	.word	0x20000a1c

08001424 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart) {
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <Uart_read+0xb0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d121      	bne.n	8001478 <Uart_read+0x54>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <Uart_read+0xb4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <Uart_read+0xb4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001444:	429a      	cmp	r2, r3
 8001446:	d102      	bne.n	800144e <Uart_read+0x2a>
			return -1;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e03c      	b.n	80014c8 <Uart_read+0xa4>
		} else {
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <Uart_read+0xb4>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <Uart_read+0xb4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	73bb      	strb	r3, [r7, #14]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <Uart_read+0xb4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <Uart_read+0xb4>)
 800146a:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 800146c:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001470:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			return c;
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	e027      	b.n	80014c8 <Uart_read+0xa4>
		}
	}

	else if (uart == pc_uart) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <Uart_read+0xb8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d121      	bne.n	80014c4 <Uart_read+0xa0>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <Uart_read+0xbc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <Uart_read+0xbc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001490:	429a      	cmp	r2, r3
 8001492:	d102      	bne.n	800149a <Uart_read+0x76>
			return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e016      	b.n	80014c8 <Uart_read+0xa4>
		} else {
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <Uart_read+0xbc>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <Uart_read+0xbc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	73fb      	strb	r3, [r7, #15]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <Uart_read+0xbc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <Uart_read+0xbc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 80014b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80014bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			return c;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	e001      	b.n	80014c8 <Uart_read+0xa4>
		}
	}

	else
		return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000a24 	.word	0x20000a24
 80014d8:	20000a14 	.word	0x20000a14
 80014dc:	20000a68 	.word	0x20000a68
 80014e0:	20000a1c 	.word	0x20000a1c

080014e4 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	if (c >= 0) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db54      	blt.n	800159e <Uart_write+0xba>
		if (uart == device_uart) {
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <Uart_write+0xc8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d126      	bne.n	800154a <Uart_write+0x66>
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <Uart_write+0xcc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001504:	3301      	adds	r3, #1
 8001506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150a:	60bb      	str	r3, [r7, #8]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer1->tail)
 800150c:	bf00      	nop
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <Uart_write+0xcc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	429a      	cmp	r2, r3
 800151a:	d0f8      	beq.n	800150e <Uart_write+0x2a>
				;

			_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t) c;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <Uart_write+0xcc>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <Uart_write+0xcc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	b2c9      	uxtb	r1, r1
 800152c:	54d1      	strb	r1, [r2, r3]
			_tx_buffer1->head = i;
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <Uart_write+0xcc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

			__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <Uart_write+0xc8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <Uart_write+0xc8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001546:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
		}
	}
}
 8001548:	e029      	b.n	800159e <Uart_write+0xba>
		else if (uart == pc_uart) {
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <Uart_write+0xd0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d125      	bne.n	800159e <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <Uart_write+0xd4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail)
 8001562:	bf00      	nop
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <Uart_write+0xd4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	429a      	cmp	r2, r3
 8001570:	d0f8      	beq.n	8001564 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t) c;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <Uart_write+0xd4>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <Uart_write+0xd4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <Uart_write+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <Uart_write+0xd0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <Uart_write+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159c:	60da      	str	r2, [r3, #12]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000a24 	.word	0x20000a24
 80015b0:	20000a18 	.word	0x20000a18
 80015b4:	20000a68 	.word	0x20000a68
 80015b8:	20000a20 	.word	0x20000a20

080015bc <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <IsDataAvailable+0x70>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <IsDataAvailable+0x34>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <IsDataAvailable+0x74>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <IsDataAvailable+0x74>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015de:	b29b      	uxth	r3, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 80015e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015e8:	b29b      	uxth	r3, r3
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80015ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ee:	e017      	b.n	8001620 <IsDataAvailable+0x64>
	else if (uart == pc_uart)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <IsDataAvailable+0x78>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <IsDataAvailable+0x60>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <IsDataAvailable+0x7c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <IsDataAvailable+0x7c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800160a:	b29b      	uxth	r3, r3
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 8001610:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001614:	b29b      	uxth	r3, r3
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161a:	e001      	b.n	8001620 <IsDataAvailable+0x64>
	else
		return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	20000a24 	.word	0x20000a24
 8001630:	20000a14 	.word	0x20000a14
 8001634:	20000a68 	.word	0x20000a68
 8001638:	20000a1c 	.word	0x20000a1c

0800163c <Uart_sendstring>:
		buffertosave[indx] = Uart_read(uart);
	}
	return 1;
}

void Uart_sendstring(const char *s, UART_HandleTypeDef *uart) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	while (*s != '\0')
 8001646:	e007      	b.n	8001658 <Uart_sendstring+0x1c>
		Uart_write(*s++, uart);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff46 	bl	80014e4 <Uart_write>
	while (*s != '\0')
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <Uart_sendstring+0xc>
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <Copy_upto>:

	while (*s)
		Uart_write(*s++, uart);
}

int Copy_upto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
	int so_far = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
	int len = strlen(string);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7fe fdff 	bl	8000280 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]

	again: while (!IsDataAvailable(uart))
 800168a:	bf00      	nop
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff95 	bl	80015bc <IsDataAvailable>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f9      	beq.n	800168c <Copy_upto+0x20>
		;
	while (Uart_peek(uart) != string[so_far]) {
 8001698:	e03e      	b.n	8001718 <Copy_upto+0xac>
		if (uart == device_uart) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <Copy_upto+0x134>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d116      	bne.n	80016d0 <Copy_upto+0x64>
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80016a2:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <Copy_upto+0x138>)
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <Copy_upto+0x138>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	4403      	add	r3, r0
 80016b4:	5c8a      	ldrb	r2, [r1, r2]
 80016b6:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <Copy_upto+0x138>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <Copy_upto+0x138>)
 80016c4:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 80016c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 80016ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016ce:	e019      	b.n	8001704 <Copy_upto+0x98>
		}

		else if (uart == pc_uart) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a35      	ldr	r2, [pc, #212]	; (80017a8 <Copy_upto+0x13c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d115      	bne.n	8001704 <Copy_upto+0x98>
			buffertocopyinto[indx] = _rx_buffer2->buffer[_rx_buffer2->tail];
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <Copy_upto+0x140>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <Copy_upto+0x140>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	4403      	add	r3, r0
 80016ea:	5c8a      	ldrb	r2, [r1, r2]
 80016ec:	701a      	strb	r2, [r3, #0]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <Copy_upto+0x140>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <Copy_upto+0x140>)
 80016fa:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 80016fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001700:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		indx++;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	3301      	adds	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
		while (!IsDataAvailable(uart))
 800170a:	bf00      	nop
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff55 	bl	80015bc <IsDataAvailable>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f9      	beq.n	800170c <Copy_upto+0xa0>
	while (Uart_peek(uart) != string[so_far]) {
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe3d 	bl	8001398 <Uart_peek>
 800171e:	4601      	mov	r1, r0
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4299      	cmp	r1, r3
 800172a:	d1b6      	bne.n	800169a <Copy_upto+0x2e>
			;
	}
	while (Uart_peek(uart) == string[so_far]) {
 800172c:	e01b      	b.n	8001766 <Copy_upto+0xfa>
		so_far++;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe75 	bl	8001424 <Uart_read>
 800173a:	4601      	mov	r1, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	61ba      	str	r2, [r7, #24]
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
		if (so_far == len)
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d101      	bne.n	8001758 <Copy_upto+0xec>
			return 1;
 8001754:	2301      	movs	r3, #1
 8001756:	e01f      	b.n	8001798 <Copy_upto+0x12c>
		while (!IsDataAvailable(uart))
 8001758:	bf00      	nop
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff2e 	bl	80015bc <IsDataAvailable>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f9      	beq.n	800175a <Copy_upto+0xee>
	while (Uart_peek(uart) == string[so_far]) {
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe16 	bl	8001398 <Uart_peek>
 800176c:	4601      	mov	r1, r0
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4299      	cmp	r1, r3
 8001778:	d0d9      	beq.n	800172e <Copy_upto+0xc2>
			;
	}

	if (so_far != len) {
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	429a      	cmp	r2, r3
 8001780:	d002      	beq.n	8001788 <Copy_upto+0x11c>
		so_far = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
		goto again;
 8001786:	e780      	b.n	800168a <Copy_upto+0x1e>
	}

	if (so_far == len)
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	d101      	bne.n	8001794 <Copy_upto+0x128>
		return 1;
 8001790:	2301      	movs	r3, #1
 8001792:	e001      	b.n	8001798 <Copy_upto+0x12c>
	else
		return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000a24 	.word	0x20000a24
 80017a4:	20000a14 	.word	0x20000a14
 80017a8:	20000a68 	.word	0x20000a68
 80017ac:	20000a1c 	.word	0x20000a1c

080017b0 <Wait_for>:

int Wait_for(char *string, UART_HandleTypeDef *uart) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	int so_far = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
	int len = strlen(string);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fd5e 	bl	8000280 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60bb      	str	r3, [r7, #8]
	again: timeout = TIMEOUT_DEF;
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <Wait_for+0x178>)
 80017ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017ce:	801a      	strh	r2, [r3, #0]
	// let's wait for the data to show up
	while ((!IsDataAvailable(uart)) && timeout)
 80017d0:	bf00      	nop
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f7ff fef2 	bl	80015bc <IsDataAvailable>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <Wait_for+0x36>
 80017de:	4b52      	ldr	r3, [pc, #328]	; (8001928 <Wait_for+0x178>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f5      	bne.n	80017d2 <Wait_for+0x22>
		;
	if (timeout == 0)
 80017e6:	4b50      	ldr	r3, [pc, #320]	; (8001928 <Wait_for+0x178>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d139      	bne.n	8001862 <Wait_for+0xb2>
		return 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e096      	b.n	8001920 <Wait_for+0x170>
	// peek in the rx_buffer to see if we get the string
	while (Uart_peek(uart) != string[so_far]) {
		if (uart == device_uart) {
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <Wait_for+0x17c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d117      	bne.n	800182a <Wait_for+0x7a>
			if (_rx_buffer1->tail != _rx_buffer1->head) {
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <Wait_for+0x180>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001802:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <Wait_for+0x180>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800180a:	429a      	cmp	r2, r3
 800180c:	d00b      	beq.n	8001826 <Wait_for+0x76>
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <Wait_for+0x180>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <Wait_for+0x180>)
 800181a:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 800181c:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001820:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001824:	e001      	b.n	800182a <Wait_for+0x7a>
			} else
				return 0;
 8001826:	2300      	movs	r3, #0
 8001828:	e07a      	b.n	8001920 <Wait_for+0x170>
		}
		if (uart == pc_uart) {
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4a41      	ldr	r2, [pc, #260]	; (8001934 <Wait_for+0x184>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d117      	bne.n	8001862 <Wait_for+0xb2>
			if (_rx_buffer2->tail != _rx_buffer2->head) {
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <Wait_for+0x188>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <Wait_for+0x188>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001842:	429a      	cmp	r2, r3
 8001844:	d00b      	beq.n	800185e <Wait_for+0xae>
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <Wait_for+0x188>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <Wait_for+0x188>)
 8001852:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 8001854:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800185c:	e001      	b.n	8001862 <Wait_for+0xb2>
			} else
				return 0;
 800185e:	2300      	movs	r3, #0
 8001860:	e05e      	b.n	8001920 <Wait_for+0x170>
	while (Uart_peek(uart) != string[so_far]) {
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7ff fd98 	bl	8001398 <Uart_peek>
 8001868:	4601      	mov	r1, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4299      	cmp	r1, r3
 8001874:	d1bd      	bne.n	80017f2 <Wait_for+0x42>
		}
	}
	// if we got the first letter of the string
	while (Uart_peek(uart) == string[so_far]) {
 8001876:	e03b      	b.n	80018f0 <Wait_for+0x140>
		// now we will peek for the other letters too
		so_far++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
		if (uart == device_uart) {
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <Wait_for+0x17c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10a      	bne.n	800189c <Wait_for+0xec>
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <Wait_for+0x180>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <Wait_for+0x180>)
 8001892:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8001894:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001898:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		if (uart == pc_uart) {
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4a25      	ldr	r2, [pc, #148]	; (8001934 <Wait_for+0x184>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d10a      	bne.n	80018ba <Wait_for+0x10a>
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <Wait_for+0x188>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <Wait_for+0x188>)
 80018b0:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 80018b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80018b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		if (so_far == len)
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d101      	bne.n	80018c6 <Wait_for+0x116>
			return 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e02c      	b.n	8001920 <Wait_for+0x170>
		timeout = TIMEOUT_DEF;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <Wait_for+0x178>)
 80018c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018cc:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 80018ce:	bf00      	nop
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f7ff fe73 	bl	80015bc <IsDataAvailable>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <Wait_for+0x134>
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <Wait_for+0x178>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f5      	bne.n	80018d0 <Wait_for+0x120>
			;
		if (timeout == 0)
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <Wait_for+0x178>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <Wait_for+0x140>
			return 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e017      	b.n	8001920 <Wait_for+0x170>
	while (Uart_peek(uart) == string[so_far]) {
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f7ff fd51 	bl	8001398 <Uart_peek>
 80018f6:	4601      	mov	r1, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4299      	cmp	r1, r3
 8001902:	d0b9      	beq.n	8001878 <Wait_for+0xc8>
	}
	if (so_far != len) {
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d002      	beq.n	8001912 <Wait_for+0x162>
		so_far = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
		goto again;
 8001910:	e75a      	b.n	80017c8 <Wait_for+0x18>
	}
	if (so_far == len)
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d101      	bne.n	800191e <Wait_for+0x16e>
		return 1;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <Wait_for+0x170>
	else
		return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001f0 	.word	0x200001f0
 800192c:	20000a24 	.word	0x20000a24
 8001930:	20000a14 	.word	0x20000a14
 8001934:	20000a68 	.word	0x20000a68
 8001938:	20000a1c 	.word	0x20000a1c

0800193c <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b00      	cmp	r3, #0
 800195c:	d023      	beq.n	80019a6 <Uart_isr+0x6a>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01e      	beq.n	80019a6 <Uart_isr+0x6a>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->SR; /* Read status register */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	73fb      	strb	r3, [r7, #15]
		if (huart == device_uart) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <Uart_isr+0x13c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d107      	bne.n	800198e <Uart_isr+0x52>
			store_char(c, _rx_buffer1);  // store data in buffer
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <Uart_isr+0x140>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fcb0 	bl	80012ec <store_char>

		else if (huart == pc_uart) {
			store_char(c, _rx_buffer2);  // store data in buffer
		}

		return;
 800198c:	e06d      	b.n	8001a6a <Uart_isr+0x12e>
		else if (huart == pc_uart) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <Uart_isr+0x144>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d169      	bne.n	8001a6a <Uart_isr+0x12e>
			store_char(c, _rx_buffer2);  // store data in buffer
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <Uart_isr+0x148>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fca4 	bl	80012ec <store_char>
		return;
 80019a4:	e061      	b.n	8001a6a <Uart_isr+0x12e>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05f      	beq.n	8001a70 <Uart_isr+0x134>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d05a      	beq.n	8001a70 <Uart_isr+0x134>
		if (huart == device_uart) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <Uart_isr+0x13c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d127      	bne.n	8001a12 <Uart_isr+0xd6>
			if (tx_buffer1.head == tx_buffer1.tail) {
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <Uart_isr+0x14c>)
 80019c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <Uart_isr+0x14c>)
 80019ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d108      	bne.n	80019e4 <Uart_isr+0xa8>
				// Buffer empty, so disable interrupts
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	60da      	str	r2, [r3, #12]
				huart->Instance->SR;
				huart->Instance->DR = c;

			}
		}
		return;
 80019e2:	e044      	b.n	8001a6e <Uart_isr+0x132>
				unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <Uart_isr+0x14c>)
 80019e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019ea:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <Uart_isr+0x14c>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	737b      	strb	r3, [r7, #13]
				tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <Uart_isr+0x14c>)
 80019f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fc:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <Uart_isr+0x14c>)
 80019fe:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
				huart->Instance->SR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	7b7a      	ldrb	r2, [r7, #13]
 8001a0e:	605a      	str	r2, [r3, #4]
		return;
 8001a10:	e02d      	b.n	8001a6e <Uart_isr+0x132>
		else if (huart == pc_uart) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <Uart_isr+0x144>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d129      	bne.n	8001a6e <Uart_isr+0x132>
			if (tx_buffer2.head == tx_buffer2.tail) {
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <Uart_isr+0x150>)
 8001a1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <Uart_isr+0x150>)
 8001a22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d108      	bne.n	8001a3c <Uart_isr+0x100>
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a38:	60da      	str	r2, [r3, #12]
		return;
 8001a3a:	e018      	b.n	8001a6e <Uart_isr+0x132>
				unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <Uart_isr+0x150>)
 8001a3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <Uart_isr+0x150>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	73bb      	strb	r3, [r7, #14]
				tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <Uart_isr+0x150>)
 8001a4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <Uart_isr+0x150>)
 8001a56:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
				huart->Instance->SR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	7bba      	ldrb	r2, [r7, #14]
 8001a66:	605a      	str	r2, [r3, #4]
		return;
 8001a68:	e001      	b.n	8001a6e <Uart_isr+0x132>
		return;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <Uart_isr+0x134>
		return;
 8001a6e:	bf00      	nop
	}
}
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000a24 	.word	0x20000a24
 8001a7c:	20000a14 	.word	0x20000a14
 8001a80:	20000a68 	.word	0x20000a68
 8001a84:	20000a1c 	.word	0x20000a1c
 8001a88:	200003fc 	.word	0x200003fc
 8001a8c:	2000080c 	.word	0x2000080c

08001a90 <leds_init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void leds_init() {
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <leds_init+0x5c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <leds_init+0x5c>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <leds_init+0x5c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
	uint32_t *GPIOD_MODER = (uint32_t*) (0x40020C00 + 0x00);
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <leds_init+0x60>)
 8001ab4:	60fb      	str	r3, [r7, #12]
	uint32_t *GPIOD_OTYPER = (uint32_t*) (0x40020C00 + 0x04);
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <leds_init+0x64>)
 8001ab8:	60bb      	str	r3, [r7, #8]
	/* set up PD12, 13, 14, 15 in OUTPUT */
	*GPIOD_MODER &= ~(0xff << 24);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	601a      	str	r2, [r3, #0]
	/* set up PD12, 13, 14, 15 in push-pull */
	*GPIOD_OTYPER &= ~(0b1111 << 12);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40020c04 	.word	0x40020c04

08001af8 <print_pc>:

void print_pc(char *str) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	Uart_sendstring(str, pc_uart);
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <print_pc+0x18>)
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fd9a 	bl	800163c <Uart_sendstring>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000a24 	.word	0x20000a24

08001b14 <Erase>:

int Erase(int sector_num) {
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	if ((sector_num < 0) | (sector_num > 7))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0fdb      	lsrs	r3, r3, #31
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	bfcc      	ite	gt
 8001b28:	2301      	movgt	r3, #1
 8001b2a:	2300      	movle	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <Erase+0x28>
		return -1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e03e      	b.n	8001bba <Erase+0xa6>
	//1. Check that no flash memory operation is ongoing by checking the BSY bit in the FLASH_SR register
	uint32_t *FLASH_SR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x0c);
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <Erase+0xb4>)
 8001b3e:	617b      	str	r3, [r7, #20]
	// Wait while the BSY bit is still 1
	while (((*FLASH_SR >> 16) & 1) == 1)
 8001b40:	bf00      	nop
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <Erase+0x2e>
		;
	//2. Set the SER bit and select the sector out of the 12 sectors in the main memory block you wish to erase (SNB) in the FLASH_CR register
	uint32_t *FLASH_CR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x10);
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <Erase+0xb8>)
 8001b50:	613b      	str	r3, [r7, #16]
	// After reset, FLASH_CR is locked, have to unlock to config it
	// Check if the CR is locked
	if (((*FLASH_CR >> 31) & 1) == 1) {
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0fdb      	lsrs	r3, r3, #31
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <Erase+0x58>
		// Make unlock sequence
		uint32_t *FLASH_KEYR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x04);
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <Erase+0xbc>)
 8001b5e:	60fb      	str	r3, [r7, #12]
		*FLASH_KEYR = 0x45670123;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <Erase+0xc0>)
 8001b64:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <Erase+0xc4>)
 8001b6a:	601a      	str	r2, [r3, #0]
	}
	*FLASH_CR |= 1 << 1; // Set SER bit
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f043 0202 	orr.w	r2, r3, #2
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	601a      	str	r2, [r3, #0]
	*FLASH_CR &= ~(0b1111 << 3); // Reset SNB value
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= sector_num << 3; // Write SNB value
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	00d2      	lsls	r2, r2, #3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]
	//3. Set the STRT bit in the FLASH_CR register
	*FLASH_CR |= 1 << 16;
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]
	//4. Wait for the BSY bit to be cleared
	while (((*FLASH_SR >> 16) & 1) == 1)
 8001b9e:	bf00      	nop
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <Erase+0x8c>
		;
	// Careful coder
	*FLASH_CR &= ~(1 << 1); // Reset SER bit
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 0202 	bic.w	r2, r3, #2
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	601a      	str	r2, [r3, #0]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023c0c 	.word	0x40023c0c
 8001bcc:	40023c10 	.word	0x40023c10
 8001bd0:	40023c04 	.word	0x40023c04
 8001bd4:	45670123 	.word	0x45670123
 8001bd8:	cdef89ab 	.word	0xcdef89ab

08001bdc <Program>:

void Program(char *address, char *data, int data_size) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
	//1. Check that no main Flash memory operation is ongoing by checking the BSY bit in the FLASH_SR register
	uint32_t *FLASH_SR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x0c);
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <Program+0x94>)
 8001bea:	61bb      	str	r3, [r7, #24]
	// Wait while the BSY bit is still 1
	while (((*FLASH_SR >> 16) & 1) == 1)
 8001bec:	bf00      	nop
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <Program+0x12>
		;
	//2. Set the PG bit in the FLASH_CR register
	uint32_t *FLASH_CR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x10);
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <Program+0x98>)
 8001bfc:	617b      	str	r3, [r7, #20]
	// After reset, FLASH_CR is locked, have to unlock to config it
	// Check if the CR is locked
	if (((*FLASH_CR >> 31) & 1) == 1) {
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0fdb      	lsrs	r3, r3, #31
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <Program+0x3c>
		// Make unlock sequence
		uint32_t *FLASH_KEYR = (uint32_t*) (FLASH_ADDRESS_BASE + 0x04);
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <Program+0x9c>)
 8001c0a:	613b      	str	r3, [r7, #16]
		*FLASH_KEYR = 0x45670123;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <Program+0xa0>)
 8001c10:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <Program+0xa4>)
 8001c16:	601a      	str	r2, [r3, #0]
	}
	*FLASH_CR |= 1 << 0; // Set PG bit
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
	//todo	3. Perform the data write operation(s) to the desired memory address (inside main memory block or OTP area):
	for (int i = 0; i < data_size; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e00a      	b.n	8001c40 <Program+0x64>
		address[i] = data[i];
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	441a      	add	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	440b      	add	r3, r1
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_size; i++) {
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <Program+0x4e>
	}
	//4. Wait for the BSY bit to be cleared
	while (((*FLASH_SR >> 16) & 1) == 1)
 8001c48:	bf00      	nop
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <Program+0x6e>
		;
	// Careful coder
	*FLASH_CR &= ~(1 << 0); // Reset PG bit
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0201 	bic.w	r2, r3, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023c0c 	.word	0x40023c0c
 8001c74:	40023c10 	.word	0x40023c10
 8001c78:	40023c04 	.word	0x40023c04
 8001c7c:	45670123 	.word	0x45670123
 8001c80:	cdef89ab 	.word	0xcdef89ab

08001c84 <system_reset>:

void system_reset() {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
	uint32_t *AIRCR = (uint32_t*) 0xE000ED0C;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <system_reset+0x1c>)
 8001c8c:	607b      	str	r3, [r7, #4]
	*AIRCR = (0x5fa << 16) | (1 << 2);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <system_reset+0x20>)
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed0c 	.word	0xe000ed0c
 8001ca4:	05fa0004 	.word	0x05fa0004

08001ca8 <firmware_update>:

void firmware_update() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	print_pc("Starting update\r\n");
 8001cac:	4820      	ldr	r0, [pc, #128]	; (8001d30 <firmware_update+0x88>)
 8001cae:	f7ff ff23 	bl	8001af8 <print_pc>
	if (current_sector == 2) {
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <firmware_update+0x8c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d10f      	bne.n	8001cda <firmware_update+0x32>
		Erase(3);
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f7ff ff2a 	bl	8001b14 <Erase>
		print_pc("Erased sector 3 (B)\r\n");
 8001cc0:	481d      	ldr	r0, [pc, #116]	; (8001d38 <firmware_update+0x90>)
 8001cc2:	f7ff ff19 	bl	8001af8 <print_pc>
		Program((char*) SECTOR_B, (char*) fw_buf, sizeof(fw_buf));
 8001cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cca:	491c      	ldr	r1, [pc, #112]	; (8001d3c <firmware_update+0x94>)
 8001ccc:	481c      	ldr	r0, [pc, #112]	; (8001d40 <firmware_update+0x98>)
 8001cce:	f7ff ff85 	bl	8001bdc <Program>
		print_pc("Programmed into sector 3 (B)\r\n");
 8001cd2:	481c      	ldr	r0, [pc, #112]	; (8001d44 <firmware_update+0x9c>)
 8001cd4:	f7ff ff10 	bl	8001af8 <print_pc>
 8001cd8:	e020      	b.n	8001d1c <firmware_update+0x74>
	} else if ((current_sector == 3) | (current_sector == 0)) {
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <firmware_update+0x8c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <firmware_update+0x8c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00e      	beq.n	8001d1c <firmware_update+0x74>
		Erase(2);
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f7ff ff08 	bl	8001b14 <Erase>
		print_pc("Erased sector 2 (A)\r\n");
 8001d04:	4810      	ldr	r0, [pc, #64]	; (8001d48 <firmware_update+0xa0>)
 8001d06:	f7ff fef7 	bl	8001af8 <print_pc>
		Program((char*) SECTOR_A, (char*) fw_buf, sizeof(fw_buf));
 8001d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0e:	490b      	ldr	r1, [pc, #44]	; (8001d3c <firmware_update+0x94>)
 8001d10:	480e      	ldr	r0, [pc, #56]	; (8001d4c <firmware_update+0xa4>)
 8001d12:	f7ff ff63 	bl	8001bdc <Program>
		print_pc("Programmed into sector 2 (A)\r\n");
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <firmware_update+0xa8>)
 8001d18:	f7ff feee 	bl	8001af8 <print_pc>
	}
	print_pc("Resetting system\r\n");
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <firmware_update+0xac>)
 8001d1e:	f7ff feeb 	bl	8001af8 <print_pc>
	HAL_Delay(100);
 8001d22:	2064      	movs	r0, #100	; 0x64
 8001d24:	f000 fe08 	bl	8002938 <HAL_Delay>
	system_reset();
 8001d28:	f7ff ffac 	bl	8001c84 <system_reset>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	08006c34 	.word	0x08006c34
 8001d34:	2000172d 	.word	0x2000172d
 8001d38:	08006c48 	.word	0x08006c48
 8001d3c:	2000132c 	.word	0x2000132c
 8001d40:	0800c000 	.word	0x0800c000
 8001d44:	08006c60 	.word	0x08006c60
 8001d48:	08006c80 	.word	0x08006c80
 8001d4c:	08008000 	.word	0x08008000
 8001d50:	08006c98 	.word	0x08006c98
 8001d54:	08006cb8 	.word	0x08006cb8

08001d58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d5e:	f000 fd79 	bl	8002854 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d62:	f000 f95b 	bl	800201c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d66:	f000 fa15 	bl	8002194 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001d6a:	f000 f9e9 	bl	8002140 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001d6e:	f000 f9bd 	bl	80020ec <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	leds_init();
 8001d72:	f7ff fe8d 	bl	8001a90 <leds_init>
	Ringbuf_init();
 8001d76:	f7ff fa71 	bl	800125c <Ringbuf_init>
	print_pc("Bootloader initiated\r\n");
 8001d7a:	4894      	ldr	r0, [pc, #592]	; (8001fcc <main+0x274>)
 8001d7c:	f7ff febc 	bl	8001af8 <print_pc>

	ESP_Init(SSID, PASSWORD);
 8001d80:	4993      	ldr	r1, [pc, #588]	; (8001fd0 <main+0x278>)
 8001d82:	4894      	ldr	r0, [pc, #592]	; (8001fd4 <main+0x27c>)
 8001d84:	f7ff f896 	bl	8000eb4 <ESP_Init>
	print_pc("Connected to wifi\r\n");
 8001d88:	4893      	ldr	r0, [pc, #588]	; (8001fd8 <main+0x280>)
 8001d8a:	f7ff feb5 	bl	8001af8 <print_pc>

	// Get latest firmware's name from server
	memset(recv_buf, 0, sizeof(recv_buf));
 8001d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d92:	2100      	movs	r1, #0
 8001d94:	4891      	ldr	r0, [pc, #580]	; (8001fdc <main+0x284>)
 8001d96:	f002 fd90 	bl	80048ba <memset>
	ESP_Get_Latest_Version(recv_buf);
 8001d9a:	4890      	ldr	r0, [pc, #576]	; (8001fdc <main+0x284>)
 8001d9c:	f7ff f90e 	bl	8000fbc <ESP_Get_Latest_Version>
	memset(lat_ver, 0, sizeof(lat_ver));
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	2100      	movs	r1, #0
 8001da4:	488e      	ldr	r0, [pc, #568]	; (8001fe0 <main+0x288>)
 8001da6:	f002 fd88 	bl	80048ba <memset>
	version_parse(lat_ver, recv_buf);
 8001daa:	498c      	ldr	r1, [pc, #560]	; (8001fdc <main+0x284>)
 8001dac:	488c      	ldr	r0, [pc, #560]	; (8001fe0 <main+0x288>)
 8001dae:	f000 fa56 	bl	800225e <version_parse>
	print_pc("Got latest file name\r\n");
 8001db2:	488c      	ldr	r0, [pc, #560]	; (8001fe4 <main+0x28c>)
 8001db4:	f7ff fea0 	bl	8001af8 <print_pc>

	// Check the 2 current version
	uint32_t *reset_handler_address;
	void (*reset_handler_function)();
	uint32_t *vers_secta = (uint32_t*) (SECTOR_A + 0x198);
 8001db8:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <main+0x290>)
 8001dba:	613b      	str	r3, [r7, #16]
	uint32_t *vers_sectb = (uint32_t*) (SECTOR_B + 0x198);
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <main+0x294>)
 8001dbe:	60fb      	str	r3, [r7, #12]
	if (((*vers_secta > *vers_sectb) & (*vers_secta != 0xffffffff))
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	bf8c      	ite	hi
 8001dcc:	2301      	movhi	r3, #1
 8001dce:	2300      	movls	r3, #0
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	b2da      	uxtb	r2, r3
			| ((*vers_secta != 0xffffffff) & (*vers_sectb == 0xffffffff))) {
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2d9      	uxtb	r1, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	400b      	ands	r3, r1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b2db      	uxtb	r3, r3
	if (((*vers_secta > *vers_sectb) & (*vers_secta != 0xffffffff))
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <main+0xc6>
		reset_handler_address = (uint32_t*) (SECTOR_A + 0x4);
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <main+0x298>)
 8001e14:	617b      	str	r3, [r7, #20]
		current_sector = 2;
 8001e16:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <main+0x29c>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e03b      	b.n	8001e96 <main+0x13e>
	} else if (((*vers_secta < *vers_sectb) & (*vers_sectb != 0xffffffff))
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	bf34      	ite	cc
 8001e2a:	2301      	movcc	r3, #1
 8001e2c:	2300      	movcs	r3, #0
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	b2da      	uxtb	r2, r3
			| ((*vers_sectb != 0xffffffff) & (*vers_secta == 0xffffffff))) {
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	400b      	ands	r3, r1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
	} else if (((*vers_secta < *vers_sectb) & (*vers_sectb != 0xffffffff))
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <main+0x124>
		reset_handler_address = (uint32_t*) (SECTOR_B + 0x4);
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <main+0x2a0>)
 8001e72:	617b      	str	r3, [r7, #20]
		current_sector = 3;
 8001e74:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <main+0x29c>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e00c      	b.n	8001e96 <main+0x13e>
	} else if (current_sector == 0) {
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <main+0x29c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <main+0x134>
		print_pc("There is no app\r\n");
 8001e84:	485d      	ldr	r0, [pc, #372]	; (8001ffc <main+0x2a4>)
 8001e86:	f7ff fe37 	bl	8001af8 <print_pc>
 8001e8a:	e004      	b.n	8001e96 <main+0x13e>
	} else {
		reset_handler_address = (uint32_t*) (SECTOR_A + 0x4);
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <main+0x298>)
 8001e8e:	617b      	str	r3, [r7, #20]
		current_sector = 2;
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <main+0x29c>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	701a      	strb	r2, [r3, #0]
	}
	print_pc("Got current version\r\n");
 8001e96:	485a      	ldr	r0, [pc, #360]	; (8002000 <main+0x2a8>)
 8001e98:	f7ff fe2e 	bl	8001af8 <print_pc>

	// Get latest firmware's content from server
	memset(recv_buf, 0, sizeof(recv_buf));
 8001e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	484e      	ldr	r0, [pc, #312]	; (8001fdc <main+0x284>)
 8001ea4:	f002 fd09 	bl	80048ba <memset>
	ESP_Get_Firmware(recv_buf, lat_ver);
 8001ea8:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <main+0x288>)
 8001eaa:	484c      	ldr	r0, [pc, #304]	; (8001fdc <main+0x284>)
 8001eac:	f7ff f930 	bl	8001110 <ESP_Get_Firmware>
	memset(fw_buf, 0, sizeof(fw_buf));
 8001eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4853      	ldr	r0, [pc, #332]	; (8002004 <main+0x2ac>)
 8001eb8:	f002 fcff 	bl	80048ba <memset>
	firmware_parse(fw_buf, recv_buf, sizeof(recv_buf));
 8001ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec0:	4946      	ldr	r1, [pc, #280]	; (8001fdc <main+0x284>)
 8001ec2:	4850      	ldr	r0, [pc, #320]	; (8002004 <main+0x2ac>)
 8001ec4:	f000 fa4c 	bl	8002360 <firmware_parse>
	print_pc("Downloaded firmware file\r\n");
 8001ec8:	484f      	ldr	r0, [pc, #316]	; (8002008 <main+0x2b0>)
 8001eca:	f7ff fe15 	bl	8001af8 <print_pc>

	// Check if the firmware on the web is newer than the current one or not
	new=0;
 8001ece:	4b4f      	ldr	r3, [pc, #316]	; (800200c <main+0x2b4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	uint32_t *vers_web = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
	vers_web = &fw_buf[0x198];
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <main+0x2b8>)
 8001eda:	60bb      	str	r3, [r7, #8]
	if ((current_sector == 2)
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <main+0x29c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
			& ((*vers_web > *vers_secta) | (*vers_secta == 0xffffffff))) {
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	bf8c      	ite	hi
 8001ef8:	2301      	movhi	r3, #1
 8001efa:	2300      	movls	r3, #0
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	400b      	ands	r3, r1
	if ((current_sector == 2)
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <main+0x1c8>
		new = 1;
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <main+0x2b4>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e036      	b.n	8001f8e <main+0x236>
	} else if ((current_sector == 3)
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <main+0x29c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4619      	mov	r1, r3
			& ((*vers_web > *vers_sectb) | (*vers_sectb == 0xffffffff))) {
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	bf8c      	ite	hi
 8001f3c:	2301      	movhi	r3, #1
 8001f3e:	2300      	movls	r3, #0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	400b      	ands	r3, r1
	} else if ((current_sector == 3)
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <main+0x20c>
		new = 1;
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <main+0x2b4>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e014      	b.n	8001f8e <main+0x236>
	} else if ((current_sector == 0) & (*vers_web != 0))
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <main+0x29c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <main+0x236>
		new = 1;
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <main+0x2b4>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]

	// If there is newer firmware, download and update
	if (new) {
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <main+0x2b4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <main+0x24e>
		print_pc("The web firmware is newer, going to update\r\n");
 8001f96:	481f      	ldr	r0, [pc, #124]	; (8002014 <main+0x2bc>)
 8001f98:	f7ff fdae 	bl	8001af8 <print_pc>
		// Reset the new firmware flag
		new = 0;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <main+0x2b4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
		// Call update firmware function
		firmware_update();
 8001fa2:	f7ff fe81 	bl	8001ca8 <firmware_update>
	}
	reset_handler_function = (void*) *reset_handler_address;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	607b      	str	r3, [r7, #4]
	if (current_sector != 0) {
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <main+0x29c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <main+0x260>
		reset_handler_function();
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4798      	blx	r3
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbc:	4816      	ldr	r0, [pc, #88]	; (8002018 <main+0x2c0>)
 8001fbe:	f000 ff8e 	bl	8002ede <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001fc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc6:	f000 fcb7 	bl	8002938 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001fca:	e7f5      	b.n	8001fb8 <main+0x260>
 8001fcc:	08006ccc 	.word	0x08006ccc
 8001fd0:	08006ce4 	.word	0x08006ce4
 8001fd4:	08006cf0 	.word	0x08006cf0
 8001fd8:	08006cf8 	.word	0x08006cf8
 8001fdc:	20000aac 	.word	0x20000aac
 8001fe0:	200012ac 	.word	0x200012ac
 8001fe4:	08006d0c 	.word	0x08006d0c
 8001fe8:	08008198 	.word	0x08008198
 8001fec:	0800c198 	.word	0x0800c198
 8001ff0:	08008004 	.word	0x08008004
 8001ff4:	2000172d 	.word	0x2000172d
 8001ff8:	0800c004 	.word	0x0800c004
 8001ffc:	08006d24 	.word	0x08006d24
 8002000:	08006d38 	.word	0x08006d38
 8002004:	2000132c 	.word	0x2000132c
 8002008:	08006d50 	.word	0x08006d50
 800200c:	2000172c 	.word	0x2000172c
 8002010:	200014c4 	.word	0x200014c4
 8002014:	08006d6c 	.word	0x08006d6c
 8002018:	40020c00 	.word	0x40020c00

0800201c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	; 0x50
 8002020:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	2230      	movs	r2, #48	; 0x30
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fc45 	bl	80048ba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <SystemClock_Config+0xc8>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <SystemClock_Config+0xc8>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <SystemClock_Config+0xc8>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <SystemClock_Config+0xcc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <SystemClock_Config+0xcc>)
 8002066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <SystemClock_Config+0xcc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002078:	2301      	movs	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800207c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002082:	2302      	movs	r3, #2
 8002084:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800208c:	2304      	movs	r3, #4
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 60;
 8002090:	233c      	movs	r3, #60	; 0x3c
 8002092:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002094:	2302      	movs	r3, #2
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002098:	2304      	movs	r3, #4
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 ff37 	bl	8002f14 <HAL_RCC_OscConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0x94>
		Error_Handler();
 80020ac:	f000 f8d2 	bl	8002254 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020b0:	230f      	movs	r3, #15
 80020b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b4:	2302      	movs	r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 f999 	bl	8003404 <HAL_RCC_ClockConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0xc0>
		Error_Handler();
 80020d8:	f000 f8bc 	bl	8002254 <Error_Handler>
	}
}
 80020dc:	bf00      	nop
 80020de:	3750      	adds	r7, #80	; 0x50
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40007000 	.word	0x40007000

080020ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <MX_USART1_UART_Init+0x50>)
 80020f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_USART1_UART_Init+0x4c>)
 8002124:	f001 fb8e 	bl	8003844 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800212e:	f000 f891 	bl	8002254 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000a24 	.word	0x20000a24
 800213c:	40011000 	.word	0x40011000

08002140 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f001 fb64 	bl	8003844 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002182:	f000 f867 	bl	8002254 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000a68 	.word	0x20000a68
 8002190:	40004400 	.word	0x40004400

08002194 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <MX_GPIO_Init+0xb8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <MX_GPIO_Init+0xb8>)
 80021b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <MX_GPIO_Init+0xb8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <MX_GPIO_Init+0xb8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <MX_GPIO_Init+0xb8>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <MX_GPIO_Init+0xb8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_GPIO_Init+0xb8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <MX_GPIO_Init+0xb8>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_GPIO_Init+0xb8>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_GPIO_Init+0xb8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <MX_GPIO_Init+0xb8>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_GPIO_Init+0xb8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <MX_GPIO_Init+0xbc>)
 8002222:	f000 fe43 	bl	8002eac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4804      	ldr	r0, [pc, #16]	; (8002250 <MX_GPIO_Init+0xbc>)
 8002240:	f000 fcb0 	bl	8002ba4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40020c00 	.word	0x40020c00

08002254 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>

0800225e <version_parse>:

#include <stdint.h>
#include <string.h>
#include "parse.h"

void version_parse(uint8_t *dst, uint8_t *src) {
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	81fb      	strh	r3, [r7, #14]
	while (src[i] != '\r') {
 800226c:	e00a      	b.n	8002284 <version_parse+0x26>
		dst[i] = src[i];
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	441a      	add	r2, r3
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	440b      	add	r3, r1
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	701a      	strb	r2, [r3, #0]
		i++;
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	3301      	adds	r3, #1
 8002282:	81fb      	strh	r3, [r7, #14]
	while (src[i] != '\r') {
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b0d      	cmp	r3, #13
 800228e:	d1ee      	bne.n	800226e <version_parse+0x10>
	}
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <so_ky_tu>:

int so_ky_tu(char *str) {
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	int k = str[0], i = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
	while (k != 0) {
 80022b0:	e007      	b.n	80022c2 <so_ky_tu+0x24>
		k = str[++i];
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
	while (k != 0) {
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f4      	bne.n	80022b2 <so_ky_tu+0x14>
	}
	return i;
 80022c8:	68bb      	ldr	r3, [r7, #8]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <subStr_pos>:

char* subStr_pos(char *str, char *subStr, int size) {
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
	char *pc = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
	int i = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < (size - so_ky_tu(subStr) + 1); i++) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e029      	b.n	8002344 <subStr_pos+0x6e>
		int k = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < so_ky_tu(subStr); j++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e012      	b.n	8002320 <subStr_pos+0x4a>
			if (str[i + j] != subStr[j]) {
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	440b      	add	r3, r1
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d002      	beq.n	800231a <subStr_pos+0x44>
				k++;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < so_ky_tu(subStr); j++) {
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	3301      	adds	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f7ff ffbc 	bl	800229e <so_ky_tu>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4293      	cmp	r3, r2
 800232c:	dbe5      	blt.n	80022fa <subStr_pos+0x24>
			}
		}
		if (k == 0) {
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <subStr_pos+0x68>
			pc = &str[i];
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
			break;
 800233c:	e00b      	b.n	8002356 <subStr_pos+0x80>
	for (i = 0; i < (size - so_ky_tu(subStr) + 1); i++) {
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3301      	adds	r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7ff ffaa 	bl	800229e <so_ky_tu>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	429a      	cmp	r2, r3
 8002354:	ddcc      	ble.n	80022f0 <subStr_pos+0x1a>
		}
	}
	return pc;
 8002356:	69fb      	ldr	r3, [r7, #28]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <firmware_parse>:

void firmware_parse(char *dst, char *src, int size) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
	uint16_t j = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char *str_pos = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
	str_pos = src;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
	int cur_size = size;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
	while (subStr_pos(str_pos, "\r\n\r\n+IPD,", cur_size)) {
 800237c:	e037      	b.n	80023ee <firmware_parse+0x8e>
		uint16_t valid = subStr_pos(str_pos, "\r\n\r\n+IPD,", cur_size)
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	4930      	ldr	r1, [pc, #192]	; (8002444 <firmware_parse+0xe4>)
 8002382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002384:	f7ff ffa7 	bl	80022d6 <subStr_pos>
 8002388:	4602      	mov	r2, r0
				- str_pos;
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	1ad3      	subs	r3, r2, r3
		uint16_t valid = subStr_pos(str_pos, "\r\n\r\n+IPD,", cur_size)
 800238e:	833b      	strh	r3, [r7, #24]
		for (int i = 0; i < valid; i++) {
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	e00d      	b.n	80023b2 <firmware_parse+0x52>
			dst[j] = str_pos[i];
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800239a:	441a      	add	r2, r3
 800239c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	440b      	add	r3, r1
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	701a      	strb	r2, [r3, #0]
			j++;
 80023a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023a8:	3301      	adds	r3, #1
 80023aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (int i = 0; i < valid; i++) {
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	3301      	adds	r3, #1
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	8b3b      	ldrh	r3, [r7, #24]
 80023b4:	6a3a      	ldr	r2, [r7, #32]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbed      	blt.n	8002396 <firmware_parse+0x36>
		}
		str_pos += (valid + 9);
 80023ba:	8b3b      	ldrh	r3, [r7, #24]
 80023bc:	3309      	adds	r3, #9
 80023be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c0:	4413      	add	r3, r2
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
		cur_size -= (valid + 9);
 80023c4:	8b3b      	ldrh	r3, [r7, #24]
 80023c6:	3309      	adds	r3, #9
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
		char* valid2 = subStr_pos(str_pos, ":",cur_size);
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	491d      	ldr	r1, [pc, #116]	; (8002448 <firmware_parse+0xe8>)
 80023d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d4:	f7ff ff7f 	bl	80022d6 <subStr_pos>
 80023d8:	6178      	str	r0, [r7, #20]
		cur_size -= (int)(valid2 + 1 - str_pos);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
		str_pos = (valid2 + 1);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
	while (subStr_pos(str_pos, "\r\n\r\n+IPD,", cur_size)) {
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	4914      	ldr	r1, [pc, #80]	; (8002444 <firmware_parse+0xe4>)
 80023f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f4:	f7ff ff6f 	bl	80022d6 <subStr_pos>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1bf      	bne.n	800237e <firmware_parse+0x1e>
	}
	uint16_t valid = subStr_pos(str_pos, "\r\nCLOSED\r\n",cur_size) - str_pos;
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	4912      	ldr	r1, [pc, #72]	; (800244c <firmware_parse+0xec>)
 8002402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002404:	f7ff ff67 	bl	80022d6 <subStr_pos>
 8002408:	4602      	mov	r2, r0
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	837b      	strh	r3, [r7, #26]
	for (int i = 0; i < valid; i++) {
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	e00d      	b.n	8002432 <firmware_parse+0xd2>
		dst[j] = str_pos[i];
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241a:	441a      	add	r2, r3
 800241c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	440b      	add	r3, r1
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
		j++;
 8002426:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002428:	3301      	adds	r3, #1
 800242a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < valid; i++) {
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	8b7b      	ldrh	r3, [r7, #26]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbed      	blt.n	8002416 <firmware_parse+0xb6>
	}
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3730      	adds	r7, #48	; 0x30
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08006d9c 	.word	0x08006d9c
 8002448:	08006da8 	.word	0x08006da8
 800244c:	08006dac 	.word	0x08006dac

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_MspInit+0x4c>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_MspInit+0x4c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_MspInit+0x4c>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_MspInit+0x4c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_UART_MspInit+0x108>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d134      	bne.n	800252c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a38      	ldr	r2, [pc, #224]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a31      	ldr	r2, [pc, #196]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_UART_MspInit+0x10c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250a:	2307      	movs	r3, #7
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	4826      	ldr	r0, [pc, #152]	; (80025b0 <HAL_UART_MspInit+0x110>)
 8002516:	f000 fb45 	bl	8002ba4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2025      	movs	r0, #37	; 0x25
 8002520:	f000 fb09 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002524:	2025      	movs	r0, #37	; 0x25
 8002526:	f000 fb22 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800252a:	e038      	b.n	800259e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_UART_MspInit+0x114>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d133      	bne.n	800259e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_UART_MspInit+0x10c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_UART_MspInit+0x10c>)
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_UART_MspInit+0x10c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_UART_MspInit+0x10c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_UART_MspInit+0x10c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_UART_MspInit+0x10c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800256e:	230c      	movs	r3, #12
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257e:	2307      	movs	r3, #7
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4619      	mov	r1, r3
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <HAL_UART_MspInit+0x118>)
 800258a:	f000 fb0b 	bl	8002ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2026      	movs	r0, #38	; 0x26
 8002594:	f000 facf 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002598:	2026      	movs	r0, #38	; 0x26
 800259a:	f000 fae8 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3730      	adds	r7, #48	; 0x30
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40020000 	.word	0x40020000

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout > 0)
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SysTick_Handler+0x20>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <SysTick_Handler+0x18>
		timeout--;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Handler+0x20>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <SysTick_Handler+0x20>)
 800261a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 f96c 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200001f0 	.word	0x200001f0

08002628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <USART1_IRQHandler+0x10>)
 800262e:	f7ff f985 	bl	800193c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000a24 	.word	0x20000a24

0800263c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <USART2_IRQHandler+0x10>)
 8002642:	f7ff f97b 	bl	800193c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000a68 	.word	0x20000a68

08002650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return 1;
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_kill>:

int _kill(int pid, int sig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800266a:	f002 f979 	bl	8004960 <__errno>
 800266e:	4603      	mov	r3, r0
 8002670:	2216      	movs	r2, #22
 8002672:	601a      	str	r2, [r3, #0]
  return -1;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_exit>:

void _exit (int status)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffe7 	bl	8002660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002692:	e7fe      	b.n	8002692 <_exit+0x12>

08002694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e00a      	b.n	80026bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a6:	f3af 8000 	nop.w
 80026aa:	4601      	mov	r1, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	b2ca      	uxtb	r2, r1
 80026b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbf0      	blt.n	80026a6 <_read+0x12>
  }

  return len;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x12>
  }
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272e:	605a      	str	r2, [r3, #4]
  return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_isatty>:

int _isatty(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f002 f8de 	bl	8004960 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20020000 	.word	0x20020000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	20001730 	.word	0x20001730
 80027d8:	20001888 	.word	0x20001888

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800281c:	4c0b      	ldr	r4, [pc, #44]	; (800284c <LoopFillZerobss+0x26>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282a:	f7ff ffd7 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282e:	f002 f89d 	bl	800496c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002832:	f7ff fa91 	bl	8001d58 <main>
  bx  lr    
 8002836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002844:	08007154 	.word	0x08007154
  ldr r2, =_sbss
 8002848:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800284c:	20001884 	.word	0x20001884

08002850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC_IRQHandler>
	...

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_Init+0x40>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_Init+0x40>)
 800286a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_Init+0x40>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287c:	2003      	movs	r0, #3
 800287e:	f000 f94f 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002882:	200f      	movs	r0, #15
 8002884:	f000 f808 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002888:	f7ff fde2 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f967 	bl	8002b8a <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 f92f 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	20001734 	.word	0x20001734

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20001734 	.word	0x20001734

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e159      	b.n	8002e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f040 8148 	bne.w	8002e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d005      	beq.n	8002bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d130      	bne.n	8002c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d017      	beq.n	8002c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a2 	beq.w	8002e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a56      	ldr	r2, [pc, #344]	; (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b54      	ldr	r3, [pc, #336]	; (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d46:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a49      	ldr	r2, [pc, #292]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d019      	beq.n	8002da6 <HAL_GPIO_Init+0x202>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a48      	ldr	r2, [pc, #288]	; (8002e98 <HAL_GPIO_Init+0x2f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x1fe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a47      	ldr	r2, [pc, #284]	; (8002e9c <HAL_GPIO_Init+0x2f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <HAL_GPIO_Init+0x2fc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x1f6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <HAL_GPIO_Init+0x300>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x1f2>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	; (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f aea2 	bls.w	8002bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e267      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d075      	beq.n	800301e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05b      	beq.n	800301c <HAL_RCC_OscConfig+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d157      	bne.n	800301c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e242      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x74>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6c      	ldr	r2, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002fac:	4b69      	ldr	r3, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a68      	ldr	r2, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fca8 	bl	8002920 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff fca4 	bl	8002920 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e207      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xc0>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fc94 	bl	8002920 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff fc90 	bl	8002920 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1f3      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0xe8>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1c7      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7ff fc49 	bl	8002920 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7ff fc45 	bl	8002920 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1a8      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff fc28 	bl	8002920 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7ff fc24 	bl	8002920 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e187      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7ff fc08 	bl	8002920 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7ff fc04 	bl	8002920 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e167      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x200>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7ff fbf1 	bl	8002920 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003142:	f7ff fbed 	bl	8002920 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e150      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a7c      	ldr	r2, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b77      	ldr	r3, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7ff fbad 	bl	8002920 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7ff fba9 	bl	8002920 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e10c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x2ea>
 80031f0:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a63      	ldr	r2, [pc, #396]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x30c>
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 8003220:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a57      	ldr	r2, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	4b55      	ldr	r3, [pc, #340]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff fb6e 	bl	8002920 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7ff fb6a 	bl	8002920 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0cb      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b49      	ldr	r3, [pc, #292]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x334>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7ff fb58 	bl	8002920 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7ff fb54 	bl	8002920 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0b5      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a1 	beq.w	80033f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d05c      	beq.n	8003378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d141      	bne.n	800334a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x478>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7ff fb28 	bl	8002920 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7ff fb24 	bl	8002920 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e087      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	491b      	ldr	r1, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7ff fafd 	bl	8002920 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7ff faf9 	bl	8002920 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e05c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x416>
 8003348:	e054      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7ff fae6 	bl	8002920 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003358:	f7ff fae2 	bl	8002920 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e038      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x4ec>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d121      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cc      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d90c      	bls.n	8003440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d044      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e067      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4934      	ldr	r1, [pc, #208]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7ff fa14 	bl	8002920 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7ff fa10 	bl	8002920 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e04f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d20c      	bcs.n	800354c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f974 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08006db8 	.word	0x08006db8
 80035c8:	20000000 	.word	0x20000000
 80035cc:	20000004 	.word	0x20000004

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b094      	sub	sp, #80	; 0x50
 80035d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
 80035dc:	2300      	movs	r3, #0
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	2300      	movs	r3, #0
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e8:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d00d      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	f200 80e1 	bhi.w	80037bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x34>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x3a>
 8003602:	e0db      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003608:	e0db      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360e:	e0d8      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003618:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361a:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
 800363e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003642:	4622      	mov	r2, r4
 8003644:	462b      	mov	r3, r5
 8003646:	f04f 0000 	mov.w	r0, #0
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	0159      	lsls	r1, r3, #5
 8003650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003654:	0150      	lsls	r0, r2, #5
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4621      	mov	r1, r4
 800365c:	1a51      	subs	r1, r2, r1
 800365e:	6139      	str	r1, [r7, #16]
 8003660:	4629      	mov	r1, r5
 8003662:	eb63 0301 	sbc.w	r3, r3, r1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003674:	4659      	mov	r1, fp
 8003676:	018b      	lsls	r3, r1, #6
 8003678:	4651      	mov	r1, sl
 800367a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800367e:	4651      	mov	r1, sl
 8003680:	018a      	lsls	r2, r1, #6
 8003682:	4651      	mov	r1, sl
 8003684:	ebb2 0801 	subs.w	r8, r2, r1
 8003688:	4659      	mov	r1, fp
 800368a:	eb63 0901 	sbc.w	r9, r3, r1
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800369e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a2:	4690      	mov	r8, r2
 80036a4:	4699      	mov	r9, r3
 80036a6:	4623      	mov	r3, r4
 80036a8:	eb18 0303 	adds.w	r3, r8, r3
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	462b      	mov	r3, r5
 80036b0:	eb49 0303 	adc.w	r3, r9, r3
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036c2:	4629      	mov	r1, r5
 80036c4:	024b      	lsls	r3, r1, #9
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036cc:	4621      	mov	r1, r4
 80036ce:	024a      	lsls	r2, r1, #9
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036e0:	f7fd fa6a 	bl	8000bb8 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	e058      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	2200      	movs	r2, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	4611      	mov	r1, r2
 80036fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371a:	0150      	lsls	r0, r2, #5
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4641      	mov	r1, r8
 8003722:	ebb2 0a01 	subs.w	sl, r2, r1
 8003726:	4649      	mov	r1, r9
 8003728:	eb63 0b01 	sbc.w	fp, r3, r1
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003738:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800373c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003740:	ebb2 040a 	subs.w	r4, r2, sl
 8003744:	eb63 050b 	sbc.w	r5, r3, fp
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	00eb      	lsls	r3, r5, #3
 8003752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003756:	00e2      	lsls	r2, r4, #3
 8003758:	4614      	mov	r4, r2
 800375a:	461d      	mov	r5, r3
 800375c:	4643      	mov	r3, r8
 800375e:	18e3      	adds	r3, r4, r3
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	464b      	mov	r3, r9
 8003764:	eb45 0303 	adc.w	r3, r5, r3
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003776:	4629      	mov	r1, r5
 8003778:	028b      	lsls	r3, r1, #10
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003780:	4621      	mov	r1, r4
 8003782:	028a      	lsls	r2, r1, #10
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	61fa      	str	r2, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	f7fd fa10 	bl	8000bb8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	3301      	adds	r3, #1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3750      	adds	r7, #80	; 0x50
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f8:	f7ff fff0 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0a9b      	lsrs	r3, r3, #10
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	08006dc8 	.word	0x08006dc8

0800381c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003820:	f7ff ffdc 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0b5b      	lsrs	r3, r3, #13
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08006dc8 	.word	0x08006dc8

08003844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e03f      	b.n	80038d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fe18 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f829 	bl	80038e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b0c0      	sub	sp, #256	; 0x100
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	ea40 0301 	orr.w	r3, r0, r1
 8003908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003938:	f021 010c 	bic.w	r1, r1, #12
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003946:	430b      	orrs	r3, r1
 8003948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	6999      	ldr	r1, [r3, #24]
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	ea40 0301 	orr.w	r3, r0, r1
 8003966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <UART_SetConfig+0x2cc>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d005      	beq.n	8003980 <UART_SetConfig+0xa0>
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b8d      	ldr	r3, [pc, #564]	; (8003bb0 <UART_SetConfig+0x2d0>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d104      	bne.n	800398a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7ff ff4c 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8003984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003988:	e003      	b.n	8003992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800398a:	f7ff ff33 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 800398e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	f040 810c 	bne.w	8003bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ba:	415b      	adcs	r3, r3
 80039bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c2:	4621      	mov	r1, r4
 80039c4:	eb12 0801 	adds.w	r8, r2, r1
 80039c8:	4629      	mov	r1, r5
 80039ca:	eb43 0901 	adc.w	r9, r3, r1
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e2:	4690      	mov	r8, r2
 80039e4:	4699      	mov	r9, r3
 80039e6:	4623      	mov	r3, r4
 80039e8:	eb18 0303 	adds.w	r3, r8, r3
 80039ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f0:	462b      	mov	r3, r5
 80039f2:	eb49 0303 	adc.w	r3, r9, r3
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a0e:	460b      	mov	r3, r1
 8003a10:	18db      	adds	r3, r3, r3
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
 8003a14:	4613      	mov	r3, r2
 8003a16:	eb42 0303 	adc.w	r3, r2, r3
 8003a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a24:	f7fd f8c8 	bl	8000bb8 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	011c      	lsls	r4, r3, #4
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a50:	415b      	adcs	r3, r3
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a58:	4641      	mov	r1, r8
 8003a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb43 0b01 	adc.w	fp, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a78:	4692      	mov	sl, r2
 8003a7a:	469b      	mov	fp, r3
 8003a7c:	4643      	mov	r3, r8
 8003a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a86:	464b      	mov	r3, r9
 8003a88:	eb4b 0303 	adc.w	r3, fp, r3
 8003a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	18db      	adds	r3, r3, r3
 8003aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8003aaa:	4613      	mov	r3, r2
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aba:	f7fd f87d 	bl	8000bb8 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2264      	movs	r2, #100	; 0x64
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	1acb      	subs	r3, r1, r3
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003adc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae8:	441c      	add	r4, r3
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6339      	str	r1, [r7, #48]	; 0x30
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b60:	460b      	mov	r3, r1
 8003b62:	18db      	adds	r3, r3, r3
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b66:	4613      	mov	r3, r2
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b76:	f7fd f81f 	bl	8000bb8 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4422      	add	r2, r4
 8003ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba8:	e106      	b.n	8003db8 <UART_SetConfig+0x4d8>
 8003baa:	bf00      	nop
 8003bac:	40011000 	.word	0x40011000
 8003bb0:	40011400 	.word	0x40011400
 8003bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bca:	4642      	mov	r2, r8
 8003bcc:	464b      	mov	r3, r9
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	6239      	str	r1, [r7, #32]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1854      	adds	r4, r2, r1
 8003bde:	4649      	mov	r1, r9
 8003be0:	eb43 0501 	adc.w	r5, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	00eb      	lsls	r3, r5, #3
 8003bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	18e3      	adds	r3, r4, r3
 8003bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c00:	464b      	mov	r3, r9
 8003c02:	eb45 0303 	adc.w	r3, r5, r3
 8003c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c26:	4629      	mov	r1, r5
 8003c28:	008b      	lsls	r3, r1, #2
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c30:	4621      	mov	r1, r4
 8003c32:	008a      	lsls	r2, r1, #2
 8003c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c38:	f7fc ffbe 	bl	8000bb8 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4b60      	ldr	r3, [pc, #384]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2302 	umull	r2, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	011c      	lsls	r4, r3, #4
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	61b9      	str	r1, [r7, #24]
 8003c64:	415b      	adcs	r3, r3
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6139      	str	r1, [r7, #16]
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	008b      	lsls	r3, r1, #2
 8003cc8:	4641      	mov	r1, r8
 8003cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cce:	4641      	mov	r1, r8
 8003cd0:	008a      	lsls	r2, r1, #2
 8003cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cd6:	f7fc ff6f 	bl	8000bb8 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2264      	movs	r2, #100	; 0x64
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003d0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d20:	4641      	mov	r1, r8
 8003d22:	1851      	adds	r1, r2, r1
 8003d24:	6039      	str	r1, [r7, #0]
 8003d26:	4649      	mov	r1, r9
 8003d28:	414b      	adcs	r3, r1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	00cb      	lsls	r3, r1, #3
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d42:	4651      	mov	r1, sl
 8003d44:	00ca      	lsls	r2, r1, #3
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d52:	464b      	mov	r3, r9
 8003d54:	460a      	mov	r2, r1
 8003d56:	eb42 0303 	adc.w	r3, r2, r3
 8003d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
 8003d66:	667a      	str	r2, [r7, #100]	; 0x64
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d74:	4649      	mov	r1, r9
 8003d76:	008b      	lsls	r3, r1, #2
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7e:	4641      	mov	r1, r8
 8003d80:	008a      	lsls	r2, r1, #2
 8003d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d86:	f7fc ff17 	bl	8000bb8 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003d90:	fba3 1302 	umull	r1, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2164      	movs	r1, #100	; 0x64
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	3332      	adds	r3, #50	; 0x32
 8003da2:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4422      	add	r2, r4
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <__cvt>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	ec55 4b10 	vmov	r4, r5, d0
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	460e      	mov	r6, r1
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	bfbb      	ittet	lt
 8003dda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003dde:	461d      	movlt	r5, r3
 8003de0:	2300      	movge	r3, #0
 8003de2:	232d      	movlt	r3, #45	; 0x2d
 8003de4:	700b      	strb	r3, [r1, #0]
 8003de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003de8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003dec:	4691      	mov	r9, r2
 8003dee:	f023 0820 	bic.w	r8, r3, #32
 8003df2:	bfbc      	itt	lt
 8003df4:	4622      	movlt	r2, r4
 8003df6:	4614      	movlt	r4, r2
 8003df8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dfc:	d005      	beq.n	8003e0a <__cvt+0x42>
 8003dfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e02:	d100      	bne.n	8003e06 <__cvt+0x3e>
 8003e04:	3601      	adds	r6, #1
 8003e06:	2102      	movs	r1, #2
 8003e08:	e000      	b.n	8003e0c <__cvt+0x44>
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	ab02      	add	r3, sp, #8
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	ec45 4b10 	vmov	d0, r4, r5
 8003e18:	4653      	mov	r3, sl
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	f000 fe54 	bl	8004ac8 <_dtoa_r>
 8003e20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e24:	4607      	mov	r7, r0
 8003e26:	d102      	bne.n	8003e2e <__cvt+0x66>
 8003e28:	f019 0f01 	tst.w	r9, #1
 8003e2c:	d022      	beq.n	8003e74 <__cvt+0xac>
 8003e2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e32:	eb07 0906 	add.w	r9, r7, r6
 8003e36:	d110      	bne.n	8003e5a <__cvt+0x92>
 8003e38:	783b      	ldrb	r3, [r7, #0]
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d10a      	bne.n	8003e54 <__cvt+0x8c>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2300      	movs	r3, #0
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc fe47 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e4a:	b918      	cbnz	r0, 8003e54 <__cvt+0x8c>
 8003e4c:	f1c6 0601 	rsb	r6, r6, #1
 8003e50:	f8ca 6000 	str.w	r6, [sl]
 8003e54:	f8da 3000 	ldr.w	r3, [sl]
 8003e58:	4499      	add	r9, r3
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7fc fe39 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e66:	b108      	cbz	r0, 8003e6c <__cvt+0xa4>
 8003e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e6c:	2230      	movs	r2, #48	; 0x30
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	454b      	cmp	r3, r9
 8003e72:	d307      	bcc.n	8003e84 <__cvt+0xbc>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e78:	1bdb      	subs	r3, r3, r7
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	b004      	add	sp, #16
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	1c59      	adds	r1, r3, #1
 8003e86:	9103      	str	r1, [sp, #12]
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e7f0      	b.n	8003e6e <__cvt+0xa6>

08003e8c <__exponent>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2900      	cmp	r1, #0
 8003e92:	bfb8      	it	lt
 8003e94:	4249      	neglt	r1, r1
 8003e96:	f803 2b02 	strb.w	r2, [r3], #2
 8003e9a:	bfb4      	ite	lt
 8003e9c:	222d      	movlt	r2, #45	; 0x2d
 8003e9e:	222b      	movge	r2, #43	; 0x2b
 8003ea0:	2909      	cmp	r1, #9
 8003ea2:	7042      	strb	r2, [r0, #1]
 8003ea4:	dd2a      	ble.n	8003efc <__exponent+0x70>
 8003ea6:	f10d 0207 	add.w	r2, sp, #7
 8003eaa:	4617      	mov	r7, r2
 8003eac:	260a      	movs	r6, #10
 8003eae:	4694      	mov	ip, r2
 8003eb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8003eb4:	fb06 1415 	mls	r4, r6, r5, r1
 8003eb8:	3430      	adds	r4, #48	; 0x30
 8003eba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	2c63      	cmp	r4, #99	; 0x63
 8003ec2:	f102 32ff 	add.w	r2, r2, #4294967295
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	dcf1      	bgt.n	8003eae <__exponent+0x22>
 8003eca:	3130      	adds	r1, #48	; 0x30
 8003ecc:	f1ac 0402 	sub.w	r4, ip, #2
 8003ed0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003ed4:	1c41      	adds	r1, r0, #1
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	42ba      	cmp	r2, r7
 8003eda:	d30a      	bcc.n	8003ef2 <__exponent+0x66>
 8003edc:	f10d 0209 	add.w	r2, sp, #9
 8003ee0:	eba2 020c 	sub.w	r2, r2, ip
 8003ee4:	42bc      	cmp	r4, r7
 8003ee6:	bf88      	it	hi
 8003ee8:	2200      	movhi	r2, #0
 8003eea:	4413      	add	r3, r2
 8003eec:	1a18      	subs	r0, r3, r0
 8003eee:	b003      	add	sp, #12
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003ef6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003efa:	e7ed      	b.n	8003ed8 <__exponent+0x4c>
 8003efc:	2330      	movs	r3, #48	; 0x30
 8003efe:	3130      	adds	r1, #48	; 0x30
 8003f00:	7083      	strb	r3, [r0, #2]
 8003f02:	70c1      	strb	r1, [r0, #3]
 8003f04:	1d03      	adds	r3, r0, #4
 8003f06:	e7f1      	b.n	8003eec <__exponent+0x60>

08003f08 <_printf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	ed2d 8b02 	vpush	{d8}
 8003f10:	b08d      	sub	sp, #52	; 0x34
 8003f12:	460c      	mov	r4, r1
 8003f14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f18:	4616      	mov	r6, r2
 8003f1a:	461f      	mov	r7, r3
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	f000 fcd5 	bl	80048cc <_localeconv_r>
 8003f22:	f8d0 a000 	ldr.w	sl, [r0]
 8003f26:	4650      	mov	r0, sl
 8003f28:	f7fc f9aa 	bl	8000280 <strlen>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	f8d8 3000 	ldr.w	r3, [r8]
 8003f38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f3c:	3307      	adds	r3, #7
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	f103 0208 	add.w	r2, r3, #8
 8003f46:	f8c8 2000 	str.w	r2, [r8]
 8003f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f52:	9307      	str	r3, [sp, #28]
 8003f54:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f58:	ee08 0a10 	vmov	s16, r0
 8003f5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f64:	4b9e      	ldr	r3, [pc, #632]	; (80041e0 <_printf_float+0x2d8>)
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6a:	f7fc fde7 	bl	8000b3c <__aeabi_dcmpun>
 8003f6e:	bb88      	cbnz	r0, 8003fd4 <_printf_float+0xcc>
 8003f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f74:	4b9a      	ldr	r3, [pc, #616]	; (80041e0 <_printf_float+0x2d8>)
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	f7fc fdc1 	bl	8000b00 <__aeabi_dcmple>
 8003f7e:	bb48      	cbnz	r0, 8003fd4 <_printf_float+0xcc>
 8003f80:	2200      	movs	r2, #0
 8003f82:	2300      	movs	r3, #0
 8003f84:	4640      	mov	r0, r8
 8003f86:	4649      	mov	r1, r9
 8003f88:	f7fc fdb0 	bl	8000aec <__aeabi_dcmplt>
 8003f8c:	b110      	cbz	r0, 8003f94 <_printf_float+0x8c>
 8003f8e:	232d      	movs	r3, #45	; 0x2d
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	4a93      	ldr	r2, [pc, #588]	; (80041e4 <_printf_float+0x2dc>)
 8003f96:	4b94      	ldr	r3, [pc, #592]	; (80041e8 <_printf_float+0x2e0>)
 8003f98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f9c:	bf94      	ite	ls
 8003f9e:	4690      	movls	r8, r2
 8003fa0:	4698      	movhi	r8, r3
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	6123      	str	r3, [r4, #16]
 8003fa6:	9b05      	ldr	r3, [sp, #20]
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	f04f 0900 	mov.w	r9, #0
 8003fb2:	9700      	str	r7, [sp, #0]
 8003fb4:	4633      	mov	r3, r6
 8003fb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 f9da 	bl	8004374 <_printf_common>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	f040 8090 	bne.w	80040e6 <_printf_float+0x1de>
 8003fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fca:	b00d      	add	sp, #52	; 0x34
 8003fcc:	ecbd 8b02 	vpop	{d8}
 8003fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f7fc fdae 	bl	8000b3c <__aeabi_dcmpun>
 8003fe0:	b140      	cbz	r0, 8003ff4 <_printf_float+0xec>
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfbc      	itt	lt
 8003fe8:	232d      	movlt	r3, #45	; 0x2d
 8003fea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fee:	4a7f      	ldr	r2, [pc, #508]	; (80041ec <_printf_float+0x2e4>)
 8003ff0:	4b7f      	ldr	r3, [pc, #508]	; (80041f0 <_printf_float+0x2e8>)
 8003ff2:	e7d1      	b.n	8003f98 <_printf_float+0x90>
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003ffa:	9206      	str	r2, [sp, #24]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	d13f      	bne.n	8004080 <_printf_float+0x178>
 8004000:	2306      	movs	r3, #6
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	9b05      	ldr	r3, [sp, #20]
 8004006:	6861      	ldr	r1, [r4, #4]
 8004008:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800400c:	2300      	movs	r3, #0
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	ab0a      	add	r3, sp, #40	; 0x28
 8004012:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004016:	ab09      	add	r3, sp, #36	; 0x24
 8004018:	ec49 8b10 	vmov	d0, r8, r9
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6022      	str	r2, [r4, #0]
 8004020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004024:	4628      	mov	r0, r5
 8004026:	f7ff fecf 	bl	8003dc8 <__cvt>
 800402a:	9b06      	ldr	r3, [sp, #24]
 800402c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800402e:	2b47      	cmp	r3, #71	; 0x47
 8004030:	4680      	mov	r8, r0
 8004032:	d108      	bne.n	8004046 <_printf_float+0x13e>
 8004034:	1cc8      	adds	r0, r1, #3
 8004036:	db02      	blt.n	800403e <_printf_float+0x136>
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	4299      	cmp	r1, r3
 800403c:	dd41      	ble.n	80040c2 <_printf_float+0x1ba>
 800403e:	f1ab 0302 	sub.w	r3, fp, #2
 8004042:	fa5f fb83 	uxtb.w	fp, r3
 8004046:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800404a:	d820      	bhi.n	800408e <_printf_float+0x186>
 800404c:	3901      	subs	r1, #1
 800404e:	465a      	mov	r2, fp
 8004050:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004054:	9109      	str	r1, [sp, #36]	; 0x24
 8004056:	f7ff ff19 	bl	8003e8c <__exponent>
 800405a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405c:	1813      	adds	r3, r2, r0
 800405e:	2a01      	cmp	r2, #1
 8004060:	4681      	mov	r9, r0
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	dc02      	bgt.n	800406c <_printf_float+0x164>
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	07d2      	lsls	r2, r2, #31
 800406a:	d501      	bpl.n	8004070 <_printf_float+0x168>
 800406c:	3301      	adds	r3, #1
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004074:	2b00      	cmp	r3, #0
 8004076:	d09c      	beq.n	8003fb2 <_printf_float+0xaa>
 8004078:	232d      	movs	r3, #45	; 0x2d
 800407a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407e:	e798      	b.n	8003fb2 <_printf_float+0xaa>
 8004080:	9a06      	ldr	r2, [sp, #24]
 8004082:	2a47      	cmp	r2, #71	; 0x47
 8004084:	d1be      	bne.n	8004004 <_printf_float+0xfc>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1bc      	bne.n	8004004 <_printf_float+0xfc>
 800408a:	2301      	movs	r3, #1
 800408c:	e7b9      	b.n	8004002 <_printf_float+0xfa>
 800408e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004092:	d118      	bne.n	80040c6 <_printf_float+0x1be>
 8004094:	2900      	cmp	r1, #0
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	dd0b      	ble.n	80040b2 <_printf_float+0x1aa>
 800409a:	6121      	str	r1, [r4, #16]
 800409c:	b913      	cbnz	r3, 80040a4 <_printf_float+0x19c>
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	07d0      	lsls	r0, r2, #31
 80040a2:	d502      	bpl.n	80040aa <_printf_float+0x1a2>
 80040a4:	3301      	adds	r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80040ac:	f04f 0900 	mov.w	r9, #0
 80040b0:	e7de      	b.n	8004070 <_printf_float+0x168>
 80040b2:	b913      	cbnz	r3, 80040ba <_printf_float+0x1b2>
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	07d2      	lsls	r2, r2, #31
 80040b8:	d501      	bpl.n	80040be <_printf_float+0x1b6>
 80040ba:	3302      	adds	r3, #2
 80040bc:	e7f4      	b.n	80040a8 <_printf_float+0x1a0>
 80040be:	2301      	movs	r3, #1
 80040c0:	e7f2      	b.n	80040a8 <_printf_float+0x1a0>
 80040c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c8:	4299      	cmp	r1, r3
 80040ca:	db05      	blt.n	80040d8 <_printf_float+0x1d0>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	6121      	str	r1, [r4, #16]
 80040d0:	07d8      	lsls	r0, r3, #31
 80040d2:	d5ea      	bpl.n	80040aa <_printf_float+0x1a2>
 80040d4:	1c4b      	adds	r3, r1, #1
 80040d6:	e7e7      	b.n	80040a8 <_printf_float+0x1a0>
 80040d8:	2900      	cmp	r1, #0
 80040da:	bfd4      	ite	le
 80040dc:	f1c1 0202 	rsble	r2, r1, #2
 80040e0:	2201      	movgt	r2, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	e7e0      	b.n	80040a8 <_printf_float+0x1a0>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	055a      	lsls	r2, r3, #21
 80040ea:	d407      	bmi.n	80040fc <_printf_float+0x1f4>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	4642      	mov	r2, r8
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	d12c      	bne.n	8004154 <_printf_float+0x24c>
 80040fa:	e764      	b.n	8003fc6 <_printf_float+0xbe>
 80040fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004100:	f240 80e0 	bls.w	80042c4 <_printf_float+0x3bc>
 8004104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004108:	2200      	movs	r2, #0
 800410a:	2300      	movs	r3, #0
 800410c:	f7fc fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004110:	2800      	cmp	r0, #0
 8004112:	d034      	beq.n	800417e <_printf_float+0x276>
 8004114:	4a37      	ldr	r2, [pc, #220]	; (80041f4 <_printf_float+0x2ec>)
 8004116:	2301      	movs	r3, #1
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	f43f af51 	beq.w	8003fc6 <_printf_float+0xbe>
 8004124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	db02      	blt.n	8004132 <_printf_float+0x22a>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	07d8      	lsls	r0, r3, #31
 8004130:	d510      	bpl.n	8004154 <_printf_float+0x24c>
 8004132:	ee18 3a10 	vmov	r3, s16
 8004136:	4652      	mov	r2, sl
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	f43f af41 	beq.w	8003fc6 <_printf_float+0xbe>
 8004144:	f04f 0800 	mov.w	r8, #0
 8004148:	f104 091a 	add.w	r9, r4, #26
 800414c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	4543      	cmp	r3, r8
 8004152:	dc09      	bgt.n	8004168 <_printf_float+0x260>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	079b      	lsls	r3, r3, #30
 8004158:	f100 8107 	bmi.w	800436a <_printf_float+0x462>
 800415c:	68e0      	ldr	r0, [r4, #12]
 800415e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004160:	4298      	cmp	r0, r3
 8004162:	bfb8      	it	lt
 8004164:	4618      	movlt	r0, r3
 8004166:	e730      	b.n	8003fca <_printf_float+0xc2>
 8004168:	2301      	movs	r3, #1
 800416a:	464a      	mov	r2, r9
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af27 	beq.w	8003fc6 <_printf_float+0xbe>
 8004178:	f108 0801 	add.w	r8, r8, #1
 800417c:	e7e6      	b.n	800414c <_printf_float+0x244>
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	dc39      	bgt.n	80041f8 <_printf_float+0x2f0>
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <_printf_float+0x2ec>)
 8004186:	2301      	movs	r3, #1
 8004188:	4631      	mov	r1, r6
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	f43f af19 	beq.w	8003fc6 <_printf_float+0xbe>
 8004194:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004198:	4313      	orrs	r3, r2
 800419a:	d102      	bne.n	80041a2 <_printf_float+0x29a>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	07d9      	lsls	r1, r3, #31
 80041a0:	d5d8      	bpl.n	8004154 <_printf_float+0x24c>
 80041a2:	ee18 3a10 	vmov	r3, s16
 80041a6:	4652      	mov	r2, sl
 80041a8:	4631      	mov	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	f43f af09 	beq.w	8003fc6 <_printf_float+0xbe>
 80041b4:	f04f 0900 	mov.w	r9, #0
 80041b8:	f104 0a1a 	add.w	sl, r4, #26
 80041bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041be:	425b      	negs	r3, r3
 80041c0:	454b      	cmp	r3, r9
 80041c2:	dc01      	bgt.n	80041c8 <_printf_float+0x2c0>
 80041c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c6:	e792      	b.n	80040ee <_printf_float+0x1e6>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4652      	mov	r2, sl
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f aef7 	beq.w	8003fc6 <_printf_float+0xbe>
 80041d8:	f109 0901 	add.w	r9, r9, #1
 80041dc:	e7ee      	b.n	80041bc <_printf_float+0x2b4>
 80041de:	bf00      	nop
 80041e0:	7fefffff 	.word	0x7fefffff
 80041e4:	08006dd0 	.word	0x08006dd0
 80041e8:	08006dd4 	.word	0x08006dd4
 80041ec:	08006dd8 	.word	0x08006dd8
 80041f0:	08006ddc 	.word	0x08006ddc
 80041f4:	08006de0 	.word	0x08006de0
 80041f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041fc:	429a      	cmp	r2, r3
 80041fe:	bfa8      	it	ge
 8004200:	461a      	movge	r2, r3
 8004202:	2a00      	cmp	r2, #0
 8004204:	4691      	mov	r9, r2
 8004206:	dc37      	bgt.n	8004278 <_printf_float+0x370>
 8004208:	f04f 0b00 	mov.w	fp, #0
 800420c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004210:	f104 021a 	add.w	r2, r4, #26
 8004214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004216:	9305      	str	r3, [sp, #20]
 8004218:	eba3 0309 	sub.w	r3, r3, r9
 800421c:	455b      	cmp	r3, fp
 800421e:	dc33      	bgt.n	8004288 <_printf_float+0x380>
 8004220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004224:	429a      	cmp	r2, r3
 8004226:	db3b      	blt.n	80042a0 <_printf_float+0x398>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	07da      	lsls	r2, r3, #31
 800422c:	d438      	bmi.n	80042a0 <_printf_float+0x398>
 800422e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004232:	eba2 0903 	sub.w	r9, r2, r3
 8004236:	9b05      	ldr	r3, [sp, #20]
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	4591      	cmp	r9, r2
 800423c:	bfa8      	it	ge
 800423e:	4691      	movge	r9, r2
 8004240:	f1b9 0f00 	cmp.w	r9, #0
 8004244:	dc35      	bgt.n	80042b2 <_printf_float+0x3aa>
 8004246:	f04f 0800 	mov.w	r8, #0
 800424a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800424e:	f104 0a1a 	add.w	sl, r4, #26
 8004252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	eba3 0309 	sub.w	r3, r3, r9
 800425c:	4543      	cmp	r3, r8
 800425e:	f77f af79 	ble.w	8004154 <_printf_float+0x24c>
 8004262:	2301      	movs	r3, #1
 8004264:	4652      	mov	r2, sl
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	f43f aeaa 	beq.w	8003fc6 <_printf_float+0xbe>
 8004272:	f108 0801 	add.w	r8, r8, #1
 8004276:	e7ec      	b.n	8004252 <_printf_float+0x34a>
 8004278:	4613      	mov	r3, r2
 800427a:	4631      	mov	r1, r6
 800427c:	4642      	mov	r2, r8
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	d1c0      	bne.n	8004208 <_printf_float+0x300>
 8004286:	e69e      	b.n	8003fc6 <_printf_float+0xbe>
 8004288:	2301      	movs	r3, #1
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	9205      	str	r2, [sp, #20]
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	f43f ae97 	beq.w	8003fc6 <_printf_float+0xbe>
 8004298:	9a05      	ldr	r2, [sp, #20]
 800429a:	f10b 0b01 	add.w	fp, fp, #1
 800429e:	e7b9      	b.n	8004214 <_printf_float+0x30c>
 80042a0:	ee18 3a10 	vmov	r3, s16
 80042a4:	4652      	mov	r2, sl
 80042a6:	4631      	mov	r1, r6
 80042a8:	4628      	mov	r0, r5
 80042aa:	47b8      	blx	r7
 80042ac:	3001      	adds	r0, #1
 80042ae:	d1be      	bne.n	800422e <_printf_float+0x326>
 80042b0:	e689      	b.n	8003fc6 <_printf_float+0xbe>
 80042b2:	9a05      	ldr	r2, [sp, #20]
 80042b4:	464b      	mov	r3, r9
 80042b6:	4442      	add	r2, r8
 80042b8:	4631      	mov	r1, r6
 80042ba:	4628      	mov	r0, r5
 80042bc:	47b8      	blx	r7
 80042be:	3001      	adds	r0, #1
 80042c0:	d1c1      	bne.n	8004246 <_printf_float+0x33e>
 80042c2:	e680      	b.n	8003fc6 <_printf_float+0xbe>
 80042c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042c6:	2a01      	cmp	r2, #1
 80042c8:	dc01      	bgt.n	80042ce <_printf_float+0x3c6>
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d53a      	bpl.n	8004344 <_printf_float+0x43c>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4642      	mov	r2, r8
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	f43f ae74 	beq.w	8003fc6 <_printf_float+0xbe>
 80042de:	ee18 3a10 	vmov	r3, s16
 80042e2:	4652      	mov	r2, sl
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f ae6b 	beq.w	8003fc6 <_printf_float+0xbe>
 80042f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042f4:	2200      	movs	r2, #0
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80042fc:	f7fc fbec 	bl	8000ad8 <__aeabi_dcmpeq>
 8004300:	b9d8      	cbnz	r0, 800433a <_printf_float+0x432>
 8004302:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004306:	f108 0201 	add.w	r2, r8, #1
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	d10e      	bne.n	8004332 <_printf_float+0x42a>
 8004314:	e657      	b.n	8003fc6 <_printf_float+0xbe>
 8004316:	2301      	movs	r3, #1
 8004318:	4652      	mov	r2, sl
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	47b8      	blx	r7
 8004320:	3001      	adds	r0, #1
 8004322:	f43f ae50 	beq.w	8003fc6 <_printf_float+0xbe>
 8004326:	f108 0801 	add.w	r8, r8, #1
 800432a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800432c:	3b01      	subs	r3, #1
 800432e:	4543      	cmp	r3, r8
 8004330:	dcf1      	bgt.n	8004316 <_printf_float+0x40e>
 8004332:	464b      	mov	r3, r9
 8004334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004338:	e6da      	b.n	80040f0 <_printf_float+0x1e8>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 0a1a 	add.w	sl, r4, #26
 8004342:	e7f2      	b.n	800432a <_printf_float+0x422>
 8004344:	2301      	movs	r3, #1
 8004346:	4642      	mov	r2, r8
 8004348:	e7df      	b.n	800430a <_printf_float+0x402>
 800434a:	2301      	movs	r3, #1
 800434c:	464a      	mov	r2, r9
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f ae36 	beq.w	8003fc6 <_printf_float+0xbe>
 800435a:	f108 0801 	add.w	r8, r8, #1
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004362:	1a5b      	subs	r3, r3, r1
 8004364:	4543      	cmp	r3, r8
 8004366:	dcf0      	bgt.n	800434a <_printf_float+0x442>
 8004368:	e6f8      	b.n	800415c <_printf_float+0x254>
 800436a:	f04f 0800 	mov.w	r8, #0
 800436e:	f104 0919 	add.w	r9, r4, #25
 8004372:	e7f4      	b.n	800435e <_printf_float+0x456>

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4699      	mov	r9, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	4293      	cmp	r3, r2
 8004386:	bfb8      	it	lt
 8004388:	4613      	movlt	r3, r2
 800438a:	6033      	str	r3, [r6, #0]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc26      	bgt.n	800440a <_printf_common+0x96>
 80043bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c0:	1e13      	subs	r3, r2, #0
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d42b      	bmi.n	8004424 <_printf_common+0xb0>
 80043cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d01e      	beq.n	8004418 <_printf_common+0xa4>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	f003 0306 	and.w	r3, r3, #6
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf02      	ittt	eq
 80043e6:	68e5      	ldreq	r5, [r4, #12]
 80043e8:	6833      	ldreq	r3, [r6, #0]
 80043ea:	1aed      	subeq	r5, r5, r3
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	2600      	movs	r6, #0
 8004400:	341a      	adds	r4, #26
 8004402:	42b5      	cmp	r5, r6
 8004404:	d11a      	bne.n	800443c <_printf_common+0xc8>
 8004406:	2000      	movs	r0, #0
 8004408:	e008      	b.n	800441c <_printf_common+0xa8>
 800440a:	2301      	movs	r3, #1
 800440c:	4652      	mov	r2, sl
 800440e:	4649      	mov	r1, r9
 8004410:	4638      	mov	r0, r7
 8004412:	47c0      	blx	r8
 8004414:	3001      	adds	r0, #1
 8004416:	d103      	bne.n	8004420 <_printf_common+0xac>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	3501      	adds	r5, #1
 8004422:	e7c6      	b.n	80043b2 <_printf_common+0x3e>
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	2030      	movs	r0, #48	; 0x30
 800442a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442e:	4422      	add	r2, r4
 8004430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	3302      	adds	r3, #2
 800443a:	e7c7      	b.n	80043cc <_printf_common+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	4622      	mov	r2, r4
 8004440:	4649      	mov	r1, r9
 8004442:	4638      	mov	r0, r7
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d0e6      	beq.n	8004418 <_printf_common+0xa4>
 800444a:	3601      	adds	r6, #1
 800444c:	e7d9      	b.n	8004402 <_printf_common+0x8e>
	...

08004450 <_printf_i>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	7e0f      	ldrb	r7, [r1, #24]
 8004456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004458:	2f78      	cmp	r7, #120	; 0x78
 800445a:	4691      	mov	r9, r2
 800445c:	4680      	mov	r8, r0
 800445e:	460c      	mov	r4, r1
 8004460:	469a      	mov	sl, r3
 8004462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004466:	d807      	bhi.n	8004478 <_printf_i+0x28>
 8004468:	2f62      	cmp	r7, #98	; 0x62
 800446a:	d80a      	bhi.n	8004482 <_printf_i+0x32>
 800446c:	2f00      	cmp	r7, #0
 800446e:	f000 80d4 	beq.w	800461a <_printf_i+0x1ca>
 8004472:	2f58      	cmp	r7, #88	; 0x58
 8004474:	f000 80c0 	beq.w	80045f8 <_printf_i+0x1a8>
 8004478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800447c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004480:	e03a      	b.n	80044f8 <_printf_i+0xa8>
 8004482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004486:	2b15      	cmp	r3, #21
 8004488:	d8f6      	bhi.n	8004478 <_printf_i+0x28>
 800448a:	a101      	add	r1, pc, #4	; (adr r1, 8004490 <_printf_i+0x40>)
 800448c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004479 	.word	0x08004479
 800449c:	08004479 	.word	0x08004479
 80044a0:	08004479 	.word	0x08004479
 80044a4:	08004479 	.word	0x08004479
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004479 	.word	0x08004479
 80044b0:	08004479 	.word	0x08004479
 80044b4:	08004479 	.word	0x08004479
 80044b8:	08004479 	.word	0x08004479
 80044bc:	08004601 	.word	0x08004601
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080045bb 	.word	0x080045bb
 80044c8:	08004479 	.word	0x08004479
 80044cc:	08004479 	.word	0x08004479
 80044d0:	08004623 	.word	0x08004623
 80044d4:	08004479 	.word	0x08004479
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004479 	.word	0x08004479
 80044e0:	08004479 	.word	0x08004479
 80044e4:	080045c3 	.word	0x080045c3
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	602a      	str	r2, [r5, #0]
 80044f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f8:	2301      	movs	r3, #1
 80044fa:	e09f      	b.n	800463c <_printf_i+0x1ec>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	682b      	ldr	r3, [r5, #0]
 8004500:	0607      	lsls	r7, r0, #24
 8004502:	f103 0104 	add.w	r1, r3, #4
 8004506:	6029      	str	r1, [r5, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0xbe>
 800450a:	681e      	ldr	r6, [r3, #0]
 800450c:	e003      	b.n	8004516 <_printf_i+0xc6>
 800450e:	0646      	lsls	r6, r0, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0xba>
 8004512:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004516:	2e00      	cmp	r6, #0
 8004518:	da03      	bge.n	8004522 <_printf_i+0xd2>
 800451a:	232d      	movs	r3, #45	; 0x2d
 800451c:	4276      	negs	r6, r6
 800451e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004522:	485a      	ldr	r0, [pc, #360]	; (800468c <_printf_i+0x23c>)
 8004524:	230a      	movs	r3, #10
 8004526:	e012      	b.n	800454e <_printf_i+0xfe>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	6029      	str	r1, [r5, #0]
 8004530:	0605      	lsls	r5, r0, #24
 8004532:	d501      	bpl.n	8004538 <_printf_i+0xe8>
 8004534:	681e      	ldr	r6, [r3, #0]
 8004536:	e002      	b.n	800453e <_printf_i+0xee>
 8004538:	0641      	lsls	r1, r0, #25
 800453a:	d5fb      	bpl.n	8004534 <_printf_i+0xe4>
 800453c:	881e      	ldrh	r6, [r3, #0]
 800453e:	4853      	ldr	r0, [pc, #332]	; (800468c <_printf_i+0x23c>)
 8004540:	2f6f      	cmp	r7, #111	; 0x6f
 8004542:	bf0c      	ite	eq
 8004544:	2308      	moveq	r3, #8
 8004546:	230a      	movne	r3, #10
 8004548:	2100      	movs	r1, #0
 800454a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800454e:	6865      	ldr	r5, [r4, #4]
 8004550:	60a5      	str	r5, [r4, #8]
 8004552:	2d00      	cmp	r5, #0
 8004554:	bfa2      	ittt	ge
 8004556:	6821      	ldrge	r1, [r4, #0]
 8004558:	f021 0104 	bicge.w	r1, r1, #4
 800455c:	6021      	strge	r1, [r4, #0]
 800455e:	b90e      	cbnz	r6, 8004564 <_printf_i+0x114>
 8004560:	2d00      	cmp	r5, #0
 8004562:	d04b      	beq.n	80045fc <_printf_i+0x1ac>
 8004564:	4615      	mov	r5, r2
 8004566:	fbb6 f1f3 	udiv	r1, r6, r3
 800456a:	fb03 6711 	mls	r7, r3, r1, r6
 800456e:	5dc7      	ldrb	r7, [r0, r7]
 8004570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004574:	4637      	mov	r7, r6
 8004576:	42bb      	cmp	r3, r7
 8004578:	460e      	mov	r6, r1
 800457a:	d9f4      	bls.n	8004566 <_printf_i+0x116>
 800457c:	2b08      	cmp	r3, #8
 800457e:	d10b      	bne.n	8004598 <_printf_i+0x148>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	07de      	lsls	r6, r3, #31
 8004584:	d508      	bpl.n	8004598 <_printf_i+0x148>
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	6861      	ldr	r1, [r4, #4]
 800458a:	4299      	cmp	r1, r3
 800458c:	bfde      	ittt	le
 800458e:	2330      	movle	r3, #48	; 0x30
 8004590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004594:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004598:	1b52      	subs	r2, r2, r5
 800459a:	6122      	str	r2, [r4, #16]
 800459c:	f8cd a000 	str.w	sl, [sp]
 80045a0:	464b      	mov	r3, r9
 80045a2:	aa03      	add	r2, sp, #12
 80045a4:	4621      	mov	r1, r4
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fee4 	bl	8004374 <_printf_common>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d14a      	bne.n	8004646 <_printf_i+0x1f6>
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	b004      	add	sp, #16
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	4833      	ldr	r0, [pc, #204]	; (8004690 <_printf_i+0x240>)
 80045c4:	2778      	movs	r7, #120	; 0x78
 80045c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	6829      	ldr	r1, [r5, #0]
 80045ce:	061f      	lsls	r7, r3, #24
 80045d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80045d4:	d402      	bmi.n	80045dc <_printf_i+0x18c>
 80045d6:	065f      	lsls	r7, r3, #25
 80045d8:	bf48      	it	mi
 80045da:	b2b6      	uxthmi	r6, r6
 80045dc:	07df      	lsls	r7, r3, #31
 80045de:	bf48      	it	mi
 80045e0:	f043 0320 	orrmi.w	r3, r3, #32
 80045e4:	6029      	str	r1, [r5, #0]
 80045e6:	bf48      	it	mi
 80045e8:	6023      	strmi	r3, [r4, #0]
 80045ea:	b91e      	cbnz	r6, 80045f4 <_printf_i+0x1a4>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f023 0320 	bic.w	r3, r3, #32
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	2310      	movs	r3, #16
 80045f6:	e7a7      	b.n	8004548 <_printf_i+0xf8>
 80045f8:	4824      	ldr	r0, [pc, #144]	; (800468c <_printf_i+0x23c>)
 80045fa:	e7e4      	b.n	80045c6 <_printf_i+0x176>
 80045fc:	4615      	mov	r5, r2
 80045fe:	e7bd      	b.n	800457c <_printf_i+0x12c>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	6826      	ldr	r6, [r4, #0]
 8004604:	6961      	ldr	r1, [r4, #20]
 8004606:	1d18      	adds	r0, r3, #4
 8004608:	6028      	str	r0, [r5, #0]
 800460a:	0635      	lsls	r5, r6, #24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	d501      	bpl.n	8004614 <_printf_i+0x1c4>
 8004610:	6019      	str	r1, [r3, #0]
 8004612:	e002      	b.n	800461a <_printf_i+0x1ca>
 8004614:	0670      	lsls	r0, r6, #25
 8004616:	d5fb      	bpl.n	8004610 <_printf_i+0x1c0>
 8004618:	8019      	strh	r1, [r3, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	4615      	mov	r5, r2
 8004620:	e7bc      	b.n	800459c <_printf_i+0x14c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	2100      	movs	r1, #0
 800462e:	4628      	mov	r0, r5
 8004630:	f7fb fdd6 	bl	80001e0 <memchr>
 8004634:	b108      	cbz	r0, 800463a <_printf_i+0x1ea>
 8004636:	1b40      	subs	r0, r0, r5
 8004638:	6060      	str	r0, [r4, #4]
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	2300      	movs	r3, #0
 8004640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004644:	e7aa      	b.n	800459c <_printf_i+0x14c>
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	462a      	mov	r2, r5
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d0ad      	beq.n	80045b0 <_printf_i+0x160>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	079b      	lsls	r3, r3, #30
 8004658:	d413      	bmi.n	8004682 <_printf_i+0x232>
 800465a:	68e0      	ldr	r0, [r4, #12]
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	4298      	cmp	r0, r3
 8004660:	bfb8      	it	lt
 8004662:	4618      	movlt	r0, r3
 8004664:	e7a6      	b.n	80045b4 <_printf_i+0x164>
 8004666:	2301      	movs	r3, #1
 8004668:	4632      	mov	r2, r6
 800466a:	4649      	mov	r1, r9
 800466c:	4640      	mov	r0, r8
 800466e:	47d0      	blx	sl
 8004670:	3001      	adds	r0, #1
 8004672:	d09d      	beq.n	80045b0 <_printf_i+0x160>
 8004674:	3501      	adds	r5, #1
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	9903      	ldr	r1, [sp, #12]
 800467a:	1a5b      	subs	r3, r3, r1
 800467c:	42ab      	cmp	r3, r5
 800467e:	dcf2      	bgt.n	8004666 <_printf_i+0x216>
 8004680:	e7eb      	b.n	800465a <_printf_i+0x20a>
 8004682:	2500      	movs	r5, #0
 8004684:	f104 0619 	add.w	r6, r4, #25
 8004688:	e7f5      	b.n	8004676 <_printf_i+0x226>
 800468a:	bf00      	nop
 800468c:	08006de2 	.word	0x08006de2
 8004690:	08006df3 	.word	0x08006df3

08004694 <std>:
 8004694:	2300      	movs	r3, #0
 8004696:	b510      	push	{r4, lr}
 8004698:	4604      	mov	r4, r0
 800469a:	e9c0 3300 	strd	r3, r3, [r0]
 800469e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046a2:	6083      	str	r3, [r0, #8]
 80046a4:	8181      	strh	r1, [r0, #12]
 80046a6:	6643      	str	r3, [r0, #100]	; 0x64
 80046a8:	81c2      	strh	r2, [r0, #14]
 80046aa:	6183      	str	r3, [r0, #24]
 80046ac:	4619      	mov	r1, r3
 80046ae:	2208      	movs	r2, #8
 80046b0:	305c      	adds	r0, #92	; 0x5c
 80046b2:	f000 f902 	bl	80048ba <memset>
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <std+0x38>)
 80046b8:	6263      	str	r3, [r4, #36]	; 0x24
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <std+0x3c>)
 80046bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <std+0x40>)
 80046c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <std+0x44>)
 80046c4:	6224      	str	r4, [r4, #32]
 80046c6:	6323      	str	r3, [r4, #48]	; 0x30
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	bf00      	nop
 80046cc:	08004835 	.word	0x08004835
 80046d0:	08004857 	.word	0x08004857
 80046d4:	0800488f 	.word	0x0800488f
 80046d8:	080048b3 	.word	0x080048b3

080046dc <stdio_exit_handler>:
 80046dc:	4a02      	ldr	r2, [pc, #8]	; (80046e8 <stdio_exit_handler+0xc>)
 80046de:	4903      	ldr	r1, [pc, #12]	; (80046ec <stdio_exit_handler+0x10>)
 80046e0:	4803      	ldr	r0, [pc, #12]	; (80046f0 <stdio_exit_handler+0x14>)
 80046e2:	f000 b869 	b.w	80047b8 <_fwalk_sglue>
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	08006361 	.word	0x08006361
 80046f0:	20000018 	.word	0x20000018

080046f4 <cleanup_stdio>:
 80046f4:	6841      	ldr	r1, [r0, #4]
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <cleanup_stdio+0x34>)
 80046f8:	4299      	cmp	r1, r3
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	d001      	beq.n	8004704 <cleanup_stdio+0x10>
 8004700:	f001 fe2e 	bl	8006360 <_fflush_r>
 8004704:	68a1      	ldr	r1, [r4, #8]
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <cleanup_stdio+0x38>)
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <cleanup_stdio+0x1e>
 800470c:	4620      	mov	r0, r4
 800470e:	f001 fe27 	bl	8006360 <_fflush_r>
 8004712:	68e1      	ldr	r1, [r4, #12]
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <cleanup_stdio+0x3c>)
 8004716:	4299      	cmp	r1, r3
 8004718:	d004      	beq.n	8004724 <cleanup_stdio+0x30>
 800471a:	4620      	mov	r0, r4
 800471c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004720:	f001 be1e 	b.w	8006360 <_fflush_r>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	bf00      	nop
 8004728:	20001738 	.word	0x20001738
 800472c:	200017a0 	.word	0x200017a0
 8004730:	20001808 	.word	0x20001808

08004734 <global_stdio_init.part.0>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <global_stdio_init.part.0+0x30>)
 8004738:	4c0b      	ldr	r4, [pc, #44]	; (8004768 <global_stdio_init.part.0+0x34>)
 800473a:	4a0c      	ldr	r2, [pc, #48]	; (800476c <global_stdio_init.part.0+0x38>)
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	4620      	mov	r0, r4
 8004740:	2200      	movs	r2, #0
 8004742:	2104      	movs	r1, #4
 8004744:	f7ff ffa6 	bl	8004694 <std>
 8004748:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800474c:	2201      	movs	r2, #1
 800474e:	2109      	movs	r1, #9
 8004750:	f7ff ffa0 	bl	8004694 <std>
 8004754:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004758:	2202      	movs	r2, #2
 800475a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475e:	2112      	movs	r1, #18
 8004760:	f7ff bf98 	b.w	8004694 <std>
 8004764:	20001870 	.word	0x20001870
 8004768:	20001738 	.word	0x20001738
 800476c:	080046dd 	.word	0x080046dd

08004770 <__sfp_lock_acquire>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__sfp_lock_acquire+0x8>)
 8004772:	f000 b91f 	b.w	80049b4 <__retarget_lock_acquire_recursive>
 8004776:	bf00      	nop
 8004778:	20001879 	.word	0x20001879

0800477c <__sfp_lock_release>:
 800477c:	4801      	ldr	r0, [pc, #4]	; (8004784 <__sfp_lock_release+0x8>)
 800477e:	f000 b91a 	b.w	80049b6 <__retarget_lock_release_recursive>
 8004782:	bf00      	nop
 8004784:	20001879 	.word	0x20001879

08004788 <__sinit>:
 8004788:	b510      	push	{r4, lr}
 800478a:	4604      	mov	r4, r0
 800478c:	f7ff fff0 	bl	8004770 <__sfp_lock_acquire>
 8004790:	6a23      	ldr	r3, [r4, #32]
 8004792:	b11b      	cbz	r3, 800479c <__sinit+0x14>
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f7ff bff0 	b.w	800477c <__sfp_lock_release>
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <__sinit+0x28>)
 800479e:	6223      	str	r3, [r4, #32]
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <__sinit+0x2c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f5      	bne.n	8004794 <__sinit+0xc>
 80047a8:	f7ff ffc4 	bl	8004734 <global_stdio_init.part.0>
 80047ac:	e7f2      	b.n	8004794 <__sinit+0xc>
 80047ae:	bf00      	nop
 80047b0:	080046f5 	.word	0x080046f5
 80047b4:	20001870 	.word	0x20001870

080047b8 <_fwalk_sglue>:
 80047b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047bc:	4607      	mov	r7, r0
 80047be:	4688      	mov	r8, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	2600      	movs	r6, #0
 80047c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c8:	f1b9 0901 	subs.w	r9, r9, #1
 80047cc:	d505      	bpl.n	80047da <_fwalk_sglue+0x22>
 80047ce:	6824      	ldr	r4, [r4, #0]
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d1f7      	bne.n	80047c4 <_fwalk_sglue+0xc>
 80047d4:	4630      	mov	r0, r6
 80047d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047da:	89ab      	ldrh	r3, [r5, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d907      	bls.n	80047f0 <_fwalk_sglue+0x38>
 80047e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047e4:	3301      	adds	r3, #1
 80047e6:	d003      	beq.n	80047f0 <_fwalk_sglue+0x38>
 80047e8:	4629      	mov	r1, r5
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c0      	blx	r8
 80047ee:	4306      	orrs	r6, r0
 80047f0:	3568      	adds	r5, #104	; 0x68
 80047f2:	e7e9      	b.n	80047c8 <_fwalk_sglue+0x10>

080047f4 <siprintf>:
 80047f4:	b40e      	push	{r1, r2, r3}
 80047f6:	b500      	push	{lr}
 80047f8:	b09c      	sub	sp, #112	; 0x70
 80047fa:	ab1d      	add	r3, sp, #116	; 0x74
 80047fc:	9002      	str	r0, [sp, #8]
 80047fe:	9006      	str	r0, [sp, #24]
 8004800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <siprintf+0x38>)
 8004806:	9107      	str	r1, [sp, #28]
 8004808:	9104      	str	r1, [sp, #16]
 800480a:	4909      	ldr	r1, [pc, #36]	; (8004830 <siprintf+0x3c>)
 800480c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004810:	9105      	str	r1, [sp, #20]
 8004812:	6800      	ldr	r0, [r0, #0]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	a902      	add	r1, sp, #8
 8004818:	f001 fc1e 	bl	8006058 <_svfiprintf_r>
 800481c:	9b02      	ldr	r3, [sp, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	b01c      	add	sp, #112	; 0x70
 8004824:	f85d eb04 	ldr.w	lr, [sp], #4
 8004828:	b003      	add	sp, #12
 800482a:	4770      	bx	lr
 800482c:	20000064 	.word	0x20000064
 8004830:	ffff0208 	.word	0xffff0208

08004834 <__sread>:
 8004834:	b510      	push	{r4, lr}
 8004836:	460c      	mov	r4, r1
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	f000 f86c 	bl	8004918 <_read_r>
 8004840:	2800      	cmp	r0, #0
 8004842:	bfab      	itete	ge
 8004844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004846:	89a3      	ldrhlt	r3, [r4, #12]
 8004848:	181b      	addge	r3, r3, r0
 800484a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800484e:	bfac      	ite	ge
 8004850:	6563      	strge	r3, [r4, #84]	; 0x54
 8004852:	81a3      	strhlt	r3, [r4, #12]
 8004854:	bd10      	pop	{r4, pc}

08004856 <__swrite>:
 8004856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485a:	461f      	mov	r7, r3
 800485c:	898b      	ldrh	r3, [r1, #12]
 800485e:	05db      	lsls	r3, r3, #23
 8004860:	4605      	mov	r5, r0
 8004862:	460c      	mov	r4, r1
 8004864:	4616      	mov	r6, r2
 8004866:	d505      	bpl.n	8004874 <__swrite+0x1e>
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	2302      	movs	r3, #2
 800486e:	2200      	movs	r2, #0
 8004870:	f000 f840 	bl	80048f4 <_lseek_r>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800487a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	4632      	mov	r2, r6
 8004882:	463b      	mov	r3, r7
 8004884:	4628      	mov	r0, r5
 8004886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800488a:	f000 b857 	b.w	800493c <_write_r>

0800488e <__sseek>:
 800488e:	b510      	push	{r4, lr}
 8004890:	460c      	mov	r4, r1
 8004892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004896:	f000 f82d 	bl	80048f4 <_lseek_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	bf15      	itete	ne
 80048a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80048a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048aa:	81a3      	strheq	r3, [r4, #12]
 80048ac:	bf18      	it	ne
 80048ae:	81a3      	strhne	r3, [r4, #12]
 80048b0:	bd10      	pop	{r4, pc}

080048b2 <__sclose>:
 80048b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b6:	f000 b80d 	b.w	80048d4 <_close_r>

080048ba <memset>:
 80048ba:	4402      	add	r2, r0
 80048bc:	4603      	mov	r3, r0
 80048be:	4293      	cmp	r3, r2
 80048c0:	d100      	bne.n	80048c4 <memset+0xa>
 80048c2:	4770      	bx	lr
 80048c4:	f803 1b01 	strb.w	r1, [r3], #1
 80048c8:	e7f9      	b.n	80048be <memset+0x4>
	...

080048cc <_localeconv_r>:
 80048cc:	4800      	ldr	r0, [pc, #0]	; (80048d0 <_localeconv_r+0x4>)
 80048ce:	4770      	bx	lr
 80048d0:	20000158 	.word	0x20000158

080048d4 <_close_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d06      	ldr	r5, [pc, #24]	; (80048f0 <_close_r+0x1c>)
 80048d8:	2300      	movs	r3, #0
 80048da:	4604      	mov	r4, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	f7fd ff11 	bl	8002706 <_close>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_close_r+0x1a>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_close_r+0x1a>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20001874 	.word	0x20001874

080048f4 <_lseek_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	; (8004914 <_lseek_r+0x20>)
 80048f8:	4604      	mov	r4, r0
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f7fd ff26 	bl	8002754 <_lseek>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_lseek_r+0x1e>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_lseek_r+0x1e>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20001874 	.word	0x20001874

08004918 <_read_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d07      	ldr	r5, [pc, #28]	; (8004938 <_read_r+0x20>)
 800491c:	4604      	mov	r4, r0
 800491e:	4608      	mov	r0, r1
 8004920:	4611      	mov	r1, r2
 8004922:	2200      	movs	r2, #0
 8004924:	602a      	str	r2, [r5, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f7fd feb4 	bl	8002694 <_read>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_read_r+0x1e>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_read_r+0x1e>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20001874 	.word	0x20001874

0800493c <_write_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4d07      	ldr	r5, [pc, #28]	; (800495c <_write_r+0x20>)
 8004940:	4604      	mov	r4, r0
 8004942:	4608      	mov	r0, r1
 8004944:	4611      	mov	r1, r2
 8004946:	2200      	movs	r2, #0
 8004948:	602a      	str	r2, [r5, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	f7fd febf 	bl	80026ce <_write>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_write_r+0x1e>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_write_r+0x1e>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20001874 	.word	0x20001874

08004960 <__errno>:
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <__errno+0x8>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000064 	.word	0x20000064

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4d0d      	ldr	r5, [pc, #52]	; (80049a4 <__libc_init_array+0x38>)
 8004970:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004972:	1b64      	subs	r4, r4, r5
 8004974:	10a4      	asrs	r4, r4, #2
 8004976:	2600      	movs	r6, #0
 8004978:	42a6      	cmp	r6, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	4d0b      	ldr	r5, [pc, #44]	; (80049ac <__libc_init_array+0x40>)
 800497e:	4c0c      	ldr	r4, [pc, #48]	; (80049b0 <__libc_init_array+0x44>)
 8004980:	f002 f892 	bl	8006aa8 <_init>
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	2600      	movs	r6, #0
 800498a:	42a6      	cmp	r6, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f855 3b04 	ldr.w	r3, [r5], #4
 8004994:	4798      	blx	r3
 8004996:	3601      	adds	r6, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f855 3b04 	ldr.w	r3, [r5], #4
 800499e:	4798      	blx	r3
 80049a0:	3601      	adds	r6, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	0800714c 	.word	0x0800714c
 80049a8:	0800714c 	.word	0x0800714c
 80049ac:	0800714c 	.word	0x0800714c
 80049b0:	08007150 	.word	0x08007150

080049b4 <__retarget_lock_acquire_recursive>:
 80049b4:	4770      	bx	lr

080049b6 <__retarget_lock_release_recursive>:
 80049b6:	4770      	bx	lr

080049b8 <quorem>:
 80049b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	6903      	ldr	r3, [r0, #16]
 80049be:	690c      	ldr	r4, [r1, #16]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	4607      	mov	r7, r0
 80049c4:	db7e      	blt.n	8004ac4 <quorem+0x10c>
 80049c6:	3c01      	subs	r4, #1
 80049c8:	f101 0814 	add.w	r8, r1, #20
 80049cc:	f100 0514 	add.w	r5, r0, #20
 80049d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049de:	3301      	adds	r3, #1
 80049e0:	429a      	cmp	r2, r3
 80049e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80049ee:	d331      	bcc.n	8004a54 <quorem+0x9c>
 80049f0:	f04f 0e00 	mov.w	lr, #0
 80049f4:	4640      	mov	r0, r8
 80049f6:	46ac      	mov	ip, r5
 80049f8:	46f2      	mov	sl, lr
 80049fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80049fe:	b293      	uxth	r3, r2
 8004a00:	fb06 e303 	mla	r3, r6, r3, lr
 8004a04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a08:	0c1a      	lsrs	r2, r3, #16
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004a10:	f8dc a000 	ldr.w	sl, [ip]
 8004a14:	fa13 f38a 	uxtah	r3, r3, sl
 8004a18:	fb06 220e 	mla	r2, r6, lr, r2
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a24:	b292      	uxth	r2, r2
 8004a26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a32:	4581      	cmp	r9, r0
 8004a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a38:	f84c 3b04 	str.w	r3, [ip], #4
 8004a3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a40:	d2db      	bcs.n	80049fa <quorem+0x42>
 8004a42:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a46:	b92b      	cbnz	r3, 8004a54 <quorem+0x9c>
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	429d      	cmp	r5, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	d32c      	bcc.n	8004aac <quorem+0xf4>
 8004a52:	613c      	str	r4, [r7, #16]
 8004a54:	4638      	mov	r0, r7
 8004a56:	f001 f9a5 	bl	8005da4 <__mcmp>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	db22      	blt.n	8004aa4 <quorem+0xec>
 8004a5e:	3601      	adds	r6, #1
 8004a60:	4629      	mov	r1, r5
 8004a62:	2000      	movs	r0, #0
 8004a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a68:	f8d1 c000 	ldr.w	ip, [r1]
 8004a6c:	b293      	uxth	r3, r2
 8004a6e:	1ac3      	subs	r3, r0, r3
 8004a70:	0c12      	lsrs	r2, r2, #16
 8004a72:	fa13 f38c 	uxtah	r3, r3, ip
 8004a76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a84:	45c1      	cmp	r9, r8
 8004a86:	f841 3b04 	str.w	r3, [r1], #4
 8004a8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a8e:	d2e9      	bcs.n	8004a64 <quorem+0xac>
 8004a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a98:	b922      	cbnz	r2, 8004aa4 <quorem+0xec>
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	429d      	cmp	r5, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	d30a      	bcc.n	8004ab8 <quorem+0x100>
 8004aa2:	613c      	str	r4, [r7, #16]
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	b003      	add	sp, #12
 8004aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d1ce      	bne.n	8004a52 <quorem+0x9a>
 8004ab4:	3c01      	subs	r4, #1
 8004ab6:	e7c9      	b.n	8004a4c <quorem+0x94>
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	3b04      	subs	r3, #4
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	d1f0      	bne.n	8004aa2 <quorem+0xea>
 8004ac0:	3c01      	subs	r4, #1
 8004ac2:	e7eb      	b.n	8004a9c <quorem+0xe4>
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e7ee      	b.n	8004aa6 <quorem+0xee>

08004ac8 <_dtoa_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	ed2d 8b04 	vpush	{d8-d9}
 8004ad0:	69c5      	ldr	r5, [r0, #28]
 8004ad2:	b093      	sub	sp, #76	; 0x4c
 8004ad4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ad8:	ec57 6b10 	vmov	r6, r7, d0
 8004adc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ae0:	9107      	str	r1, [sp, #28]
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ae8:	b975      	cbnz	r5, 8004b08 <_dtoa_r+0x40>
 8004aea:	2010      	movs	r0, #16
 8004aec:	f000 fe2a 	bl	8005744 <malloc>
 8004af0:	4602      	mov	r2, r0
 8004af2:	61e0      	str	r0, [r4, #28]
 8004af4:	b920      	cbnz	r0, 8004b00 <_dtoa_r+0x38>
 8004af6:	4bae      	ldr	r3, [pc, #696]	; (8004db0 <_dtoa_r+0x2e8>)
 8004af8:	21ef      	movs	r1, #239	; 0xef
 8004afa:	48ae      	ldr	r0, [pc, #696]	; (8004db4 <_dtoa_r+0x2ec>)
 8004afc:	f001 fc90 	bl	8006420 <__assert_func>
 8004b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b04:	6005      	str	r5, [r0, #0]
 8004b06:	60c5      	str	r5, [r0, #12]
 8004b08:	69e3      	ldr	r3, [r4, #28]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	b151      	cbz	r1, 8004b24 <_dtoa_r+0x5c>
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	604a      	str	r2, [r1, #4]
 8004b12:	2301      	movs	r3, #1
 8004b14:	4093      	lsls	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 ff07 	bl	800592c <_Bfree>
 8004b1e:	69e3      	ldr	r3, [r4, #28]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	1e3b      	subs	r3, r7, #0
 8004b26:	bfbb      	ittet	lt
 8004b28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	9303      	strlt	r3, [sp, #12]
 8004b2e:	2300      	movge	r3, #0
 8004b30:	2201      	movlt	r2, #1
 8004b32:	bfac      	ite	ge
 8004b34:	f8c8 3000 	strge.w	r3, [r8]
 8004b38:	f8c8 2000 	strlt.w	r2, [r8]
 8004b3c:	4b9e      	ldr	r3, [pc, #632]	; (8004db8 <_dtoa_r+0x2f0>)
 8004b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b42:	ea33 0308 	bics.w	r3, r3, r8
 8004b46:	d11b      	bne.n	8004b80 <_dtoa_r+0xb8>
 8004b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b54:	4333      	orrs	r3, r6
 8004b56:	f000 8593 	beq.w	8005680 <_dtoa_r+0xbb8>
 8004b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5c:	b963      	cbnz	r3, 8004b78 <_dtoa_r+0xb0>
 8004b5e:	4b97      	ldr	r3, [pc, #604]	; (8004dbc <_dtoa_r+0x2f4>)
 8004b60:	e027      	b.n	8004bb2 <_dtoa_r+0xea>
 8004b62:	4b97      	ldr	r3, [pc, #604]	; (8004dc0 <_dtoa_r+0x2f8>)
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	9800      	ldr	r0, [sp, #0]
 8004b6e:	b013      	add	sp, #76	; 0x4c
 8004b70:	ecbd 8b04 	vpop	{d8-d9}
 8004b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b78:	4b90      	ldr	r3, [pc, #576]	; (8004dbc <_dtoa_r+0x2f4>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	3303      	adds	r3, #3
 8004b7e:	e7f3      	b.n	8004b68 <_dtoa_r+0xa0>
 8004b80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	ec51 0b17 	vmov	r0, r1, d7
 8004b8a:	eeb0 8a47 	vmov.f32	s16, s14
 8004b8e:	eef0 8a67 	vmov.f32	s17, s15
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7fb ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b98:	4681      	mov	r9, r0
 8004b9a:	b160      	cbz	r0, 8004bb6 <_dtoa_r+0xee>
 8004b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8568 	beq.w	800567a <_dtoa_r+0xbb2>
 8004baa:	4b86      	ldr	r3, [pc, #536]	; (8004dc4 <_dtoa_r+0x2fc>)
 8004bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	e7da      	b.n	8004b6c <_dtoa_r+0xa4>
 8004bb6:	aa10      	add	r2, sp, #64	; 0x40
 8004bb8:	a911      	add	r1, sp, #68	; 0x44
 8004bba:	4620      	mov	r0, r4
 8004bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8004bc0:	eef0 0a68 	vmov.f32	s1, s17
 8004bc4:	f001 f994 	bl	8005ef0 <__d2b>
 8004bc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bcc:	4682      	mov	sl, r0
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	d07f      	beq.n	8004cd2 <_dtoa_r+0x20a>
 8004bd2:	ee18 3a90 	vmov	r3, s17
 8004bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004bde:	ec51 0b18 	vmov	r0, r1, d8
 8004be2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bee:	4619      	mov	r1, r3
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <_dtoa_r+0x300>)
 8004bf4:	f7fb fb50 	bl	8000298 <__aeabi_dsub>
 8004bf8:	a367      	add	r3, pc, #412	; (adr r3, 8004d98 <_dtoa_r+0x2d0>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fd03 	bl	8000608 <__aeabi_dmul>
 8004c02:	a367      	add	r3, pc, #412	; (adr r3, 8004da0 <_dtoa_r+0x2d8>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fb48 	bl	800029c <__adddf3>
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	460f      	mov	r7, r1
 8004c12:	f7fb fc8f 	bl	8000534 <__aeabi_i2d>
 8004c16:	a364      	add	r3, pc, #400	; (adr r3, 8004da8 <_dtoa_r+0x2e0>)
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f7fb fcf4 	bl	8000608 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fb38 	bl	800029c <__adddf3>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	f7fb ff9a 	bl	8000b68 <__aeabi_d2iz>
 8004c34:	2200      	movs	r2, #0
 8004c36:	4683      	mov	fp, r0
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	f7fb ff55 	bl	8000aec <__aeabi_dcmplt>
 8004c42:	b148      	cbz	r0, 8004c58 <_dtoa_r+0x190>
 8004c44:	4658      	mov	r0, fp
 8004c46:	f7fb fc75 	bl	8000534 <__aeabi_i2d>
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	f7fb ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c52:	b908      	cbnz	r0, 8004c58 <_dtoa_r+0x190>
 8004c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c58:	f1bb 0f16 	cmp.w	fp, #22
 8004c5c:	d857      	bhi.n	8004d0e <_dtoa_r+0x246>
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <_dtoa_r+0x304>)
 8004c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	ec51 0b18 	vmov	r0, r1, d8
 8004c6c:	f7fb ff3e 	bl	8000aec <__aeabi_dcmplt>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d04e      	beq.n	8004d12 <_dtoa_r+0x24a>
 8004c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c78:	2300      	movs	r3, #0
 8004c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c7e:	1b5b      	subs	r3, r3, r5
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	bf45      	ittet	mi
 8004c84:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c88:	9305      	strmi	r3, [sp, #20]
 8004c8a:	2300      	movpl	r3, #0
 8004c8c:	2300      	movmi	r3, #0
 8004c8e:	9206      	str	r2, [sp, #24]
 8004c90:	bf54      	ite	pl
 8004c92:	9305      	strpl	r3, [sp, #20]
 8004c94:	9306      	strmi	r3, [sp, #24]
 8004c96:	f1bb 0f00 	cmp.w	fp, #0
 8004c9a:	db3c      	blt.n	8004d16 <_dtoa_r+0x24e>
 8004c9c:	9b06      	ldr	r3, [sp, #24]
 8004c9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004ca2:	445b      	add	r3, fp
 8004ca4:	9306      	str	r3, [sp, #24]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9308      	str	r3, [sp, #32]
 8004caa:	9b07      	ldr	r3, [sp, #28]
 8004cac:	2b09      	cmp	r3, #9
 8004cae:	d868      	bhi.n	8004d82 <_dtoa_r+0x2ba>
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	bfc4      	itt	gt
 8004cb4:	3b04      	subgt	r3, #4
 8004cb6:	9307      	strgt	r3, [sp, #28]
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	f1a3 0302 	sub.w	r3, r3, #2
 8004cbe:	bfcc      	ite	gt
 8004cc0:	2500      	movgt	r5, #0
 8004cc2:	2501      	movle	r5, #1
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	f200 8085 	bhi.w	8004dd4 <_dtoa_r+0x30c>
 8004cca:	e8df f003 	tbb	[pc, r3]
 8004cce:	3b2e      	.short	0x3b2e
 8004cd0:	5839      	.short	0x5839
 8004cd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004cd6:	441d      	add	r5, r3
 8004cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	bfc1      	itttt	gt
 8004ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ce4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ce8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004cec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cf0:	bfd6      	itet	le
 8004cf2:	f1c3 0320 	rsble	r3, r3, #32
 8004cf6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004cfa:	fa06 f003 	lslle.w	r0, r6, r3
 8004cfe:	f7fb fc09 	bl	8000514 <__aeabi_ui2d>
 8004d02:	2201      	movs	r2, #1
 8004d04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004d08:	3d01      	subs	r5, #1
 8004d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d0c:	e76f      	b.n	8004bee <_dtoa_r+0x126>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e7b3      	b.n	8004c7a <_dtoa_r+0x1b2>
 8004d12:	900c      	str	r0, [sp, #48]	; 0x30
 8004d14:	e7b2      	b.n	8004c7c <_dtoa_r+0x1b4>
 8004d16:	9b05      	ldr	r3, [sp, #20]
 8004d18:	eba3 030b 	sub.w	r3, r3, fp
 8004d1c:	9305      	str	r3, [sp, #20]
 8004d1e:	f1cb 0300 	rsb	r3, fp, #0
 8004d22:	9308      	str	r3, [sp, #32]
 8004d24:	2300      	movs	r3, #0
 8004d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d28:	e7bf      	b.n	8004caa <_dtoa_r+0x1e2>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	dc52      	bgt.n	8004dda <_dtoa_r+0x312>
 8004d34:	2301      	movs	r3, #1
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004d3e:	e00b      	b.n	8004d58 <_dtoa_r+0x290>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7f3      	b.n	8004d2c <_dtoa_r+0x264>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4a:	445b      	add	r3, fp
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	bfb8      	it	lt
 8004d56:	2301      	movlt	r3, #1
 8004d58:	69e0      	ldr	r0, [r4, #28]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	f102 0614 	add.w	r6, r2, #20
 8004d62:	429e      	cmp	r6, r3
 8004d64:	d93d      	bls.n	8004de2 <_dtoa_r+0x31a>
 8004d66:	6041      	str	r1, [r0, #4]
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fd9f 	bl	80058ac <_Balloc>
 8004d6e:	9000      	str	r0, [sp, #0]
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d139      	bne.n	8004de8 <_dtoa_r+0x320>
 8004d74:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <_dtoa_r+0x308>)
 8004d76:	4602      	mov	r2, r0
 8004d78:	f240 11af 	movw	r1, #431	; 0x1af
 8004d7c:	e6bd      	b.n	8004afa <_dtoa_r+0x32>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7e1      	b.n	8004d46 <_dtoa_r+0x27e>
 8004d82:	2501      	movs	r5, #1
 8004d84:	2300      	movs	r3, #0
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	9509      	str	r5, [sp, #36]	; 0x24
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	9304      	str	r3, [sp, #16]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2312      	movs	r3, #18
 8004d96:	e7d1      	b.n	8004d3c <_dtoa_r+0x274>
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	08006e11 	.word	0x08006e11
 8004db4:	08006e28 	.word	0x08006e28
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	08006e0d 	.word	0x08006e0d
 8004dc0:	08006e04 	.word	0x08006e04
 8004dc4:	08006de1 	.word	0x08006de1
 8004dc8:	3ff80000 	.word	0x3ff80000
 8004dcc:	08006f18 	.word	0x08006f18
 8004dd0:	08006e80 	.word	0x08006e80
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	e7d7      	b.n	8004d8a <_dtoa_r+0x2c2>
 8004dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	9304      	str	r3, [sp, #16]
 8004de0:	e7ba      	b.n	8004d58 <_dtoa_r+0x290>
 8004de2:	3101      	adds	r1, #1
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	e7ba      	b.n	8004d5e <_dtoa_r+0x296>
 8004de8:	69e3      	ldr	r3, [r4, #28]
 8004dea:	9a00      	ldr	r2, [sp, #0]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	2b0e      	cmp	r3, #14
 8004df2:	f200 80a8 	bhi.w	8004f46 <_dtoa_r+0x47e>
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	f000 80a5 	beq.w	8004f46 <_dtoa_r+0x47e>
 8004dfc:	f1bb 0f00 	cmp.w	fp, #0
 8004e00:	dd38      	ble.n	8004e74 <_dtoa_r+0x3ac>
 8004e02:	4bc0      	ldr	r3, [pc, #768]	; (8005104 <_dtoa_r+0x63c>)
 8004e04:	f00b 020f 	and.w	r2, fp, #15
 8004e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004e10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004e18:	d019      	beq.n	8004e4e <_dtoa_r+0x386>
 8004e1a:	4bbb      	ldr	r3, [pc, #748]	; (8005108 <_dtoa_r+0x640>)
 8004e1c:	ec51 0b18 	vmov	r0, r1, d8
 8004e20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e24:	f7fb fd1a 	bl	800085c <__aeabi_ddiv>
 8004e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2c:	f008 080f 	and.w	r8, r8, #15
 8004e30:	2503      	movs	r5, #3
 8004e32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005108 <_dtoa_r+0x640>
 8004e36:	f1b8 0f00 	cmp.w	r8, #0
 8004e3a:	d10a      	bne.n	8004e52 <_dtoa_r+0x38a>
 8004e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	f7fb fd0a 	bl	800085c <__aeabi_ddiv>
 8004e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4c:	e02b      	b.n	8004ea6 <_dtoa_r+0x3de>
 8004e4e:	2502      	movs	r5, #2
 8004e50:	e7ef      	b.n	8004e32 <_dtoa_r+0x36a>
 8004e52:	f018 0f01 	tst.w	r8, #1
 8004e56:	d008      	beq.n	8004e6a <_dtoa_r+0x3a2>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e60:	f7fb fbd2 	bl	8000608 <__aeabi_dmul>
 8004e64:	3501      	adds	r5, #1
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e6e:	f109 0908 	add.w	r9, r9, #8
 8004e72:	e7e0      	b.n	8004e36 <_dtoa_r+0x36e>
 8004e74:	f000 809f 	beq.w	8004fb6 <_dtoa_r+0x4ee>
 8004e78:	f1cb 0600 	rsb	r6, fp, #0
 8004e7c:	4ba1      	ldr	r3, [pc, #644]	; (8005104 <_dtoa_r+0x63c>)
 8004e7e:	4fa2      	ldr	r7, [pc, #648]	; (8005108 <_dtoa_r+0x640>)
 8004e80:	f006 020f 	and.w	r2, r6, #15
 8004e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	ec51 0b18 	vmov	r0, r1, d8
 8004e90:	f7fb fbba 	bl	8000608 <__aeabi_dmul>
 8004e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e98:	1136      	asrs	r6, r6, #4
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2502      	movs	r5, #2
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d17e      	bne.n	8004fa0 <_dtoa_r+0x4d8>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1d0      	bne.n	8004e48 <_dtoa_r+0x380>
 8004ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8084 	beq.w	8004fba <_dtoa_r+0x4f2>
 8004eb2:	4b96      	ldr	r3, [pc, #600]	; (800510c <_dtoa_r+0x644>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb fe17 	bl	8000aec <__aeabi_dcmplt>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d07b      	beq.n	8004fba <_dtoa_r+0x4f2>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d078      	beq.n	8004fba <_dtoa_r+0x4f2>
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dd39      	ble.n	8004f42 <_dtoa_r+0x47a>
 8004ece:	4b90      	ldr	r3, [pc, #576]	; (8005110 <_dtoa_r+0x648>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ede:	9e01      	ldr	r6, [sp, #4]
 8004ee0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7fb fb22 	bl	8000534 <__aeabi_i2d>
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	f7fb fb88 	bl	8000608 <__aeabi_dmul>
 8004ef8:	4b86      	ldr	r3, [pc, #536]	; (8005114 <_dtoa_r+0x64c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fb f9ce 	bl	800029c <__adddf3>
 8004f00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	d158      	bne.n	8004fc0 <_dtoa_r+0x4f8>
 8004f0e:	4b82      	ldr	r3, [pc, #520]	; (8005118 <_dtoa_r+0x650>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb f9bf 	bl	8000298 <__aeabi_dsub>
 8004f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f1e:	4680      	mov	r8, r0
 8004f20:	4689      	mov	r9, r1
 8004f22:	f7fb fe01 	bl	8000b28 <__aeabi_dcmpgt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 8296 	bne.w	8005458 <_dtoa_r+0x990>
 8004f2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f30:	4640      	mov	r0, r8
 8004f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f36:	4649      	mov	r1, r9
 8004f38:	f7fb fdd8 	bl	8000aec <__aeabi_dcmplt>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f040 8289 	bne.w	8005454 <_dtoa_r+0x98c>
 8004f42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f2c0 814e 	blt.w	80051ea <_dtoa_r+0x722>
 8004f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8004f52:	f300 814a 	bgt.w	80051ea <_dtoa_r+0x722>
 8004f56:	4b6b      	ldr	r3, [pc, #428]	; (8005104 <_dtoa_r+0x63c>)
 8004f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f280 80dc 	bge.w	8005120 <_dtoa_r+0x658>
 8004f68:	9b04      	ldr	r3, [sp, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f300 80d8 	bgt.w	8005120 <_dtoa_r+0x658>
 8004f70:	f040 826f 	bne.w	8005452 <_dtoa_r+0x98a>
 8004f74:	4b68      	ldr	r3, [pc, #416]	; (8005118 <_dtoa_r+0x650>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb fb44 	bl	8000608 <__aeabi_dmul>
 8004f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f84:	f7fb fdc6 	bl	8000b14 <__aeabi_dcmpge>
 8004f88:	9e04      	ldr	r6, [sp, #16]
 8004f8a:	4637      	mov	r7, r6
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f040 8245 	bne.w	800541c <_dtoa_r+0x954>
 8004f92:	9d00      	ldr	r5, [sp, #0]
 8004f94:	2331      	movs	r3, #49	; 0x31
 8004f96:	f805 3b01 	strb.w	r3, [r5], #1
 8004f9a:	f10b 0b01 	add.w	fp, fp, #1
 8004f9e:	e241      	b.n	8005424 <_dtoa_r+0x95c>
 8004fa0:	07f2      	lsls	r2, r6, #31
 8004fa2:	d505      	bpl.n	8004fb0 <_dtoa_r+0x4e8>
 8004fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa8:	f7fb fb2e 	bl	8000608 <__aeabi_dmul>
 8004fac:	3501      	adds	r5, #1
 8004fae:	2301      	movs	r3, #1
 8004fb0:	1076      	asrs	r6, r6, #1
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	e773      	b.n	8004e9e <_dtoa_r+0x3d6>
 8004fb6:	2502      	movs	r5, #2
 8004fb8:	e775      	b.n	8004ea6 <_dtoa_r+0x3de>
 8004fba:	9e04      	ldr	r6, [sp, #16]
 8004fbc:	465f      	mov	r7, fp
 8004fbe:	e792      	b.n	8004ee6 <_dtoa_r+0x41e>
 8004fc0:	9900      	ldr	r1, [sp, #0]
 8004fc2:	4b50      	ldr	r3, [pc, #320]	; (8005104 <_dtoa_r+0x63c>)
 8004fc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc8:	4431      	add	r1, r6
 8004fca:	9102      	str	r1, [sp, #8]
 8004fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fce:	eeb0 9a47 	vmov.f32	s18, s14
 8004fd2:	eef0 9a67 	vmov.f32	s19, s15
 8004fd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d044      	beq.n	800506c <_dtoa_r+0x5a4>
 8004fe2:	494e      	ldr	r1, [pc, #312]	; (800511c <_dtoa_r+0x654>)
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fb fc39 	bl	800085c <__aeabi_ddiv>
 8004fea:	ec53 2b19 	vmov	r2, r3, d9
 8004fee:	f7fb f953 	bl	8000298 <__aeabi_dsub>
 8004ff2:	9d00      	ldr	r5, [sp, #0]
 8004ff4:	ec41 0b19 	vmov	d9, r0, r1
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7fb fdb4 	bl	8000b68 <__aeabi_d2iz>
 8005000:	4606      	mov	r6, r0
 8005002:	f7fb fa97 	bl	8000534 <__aeabi_i2d>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4640      	mov	r0, r8
 800500c:	4649      	mov	r1, r9
 800500e:	f7fb f943 	bl	8000298 <__aeabi_dsub>
 8005012:	3630      	adds	r6, #48	; 0x30
 8005014:	f805 6b01 	strb.w	r6, [r5], #1
 8005018:	ec53 2b19 	vmov	r2, r3, d9
 800501c:	4680      	mov	r8, r0
 800501e:	4689      	mov	r9, r1
 8005020:	f7fb fd64 	bl	8000aec <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	d164      	bne.n	80050f2 <_dtoa_r+0x62a>
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	4937      	ldr	r1, [pc, #220]	; (800510c <_dtoa_r+0x644>)
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb f932 	bl	8000298 <__aeabi_dsub>
 8005034:	ec53 2b19 	vmov	r2, r3, d9
 8005038:	f7fb fd58 	bl	8000aec <__aeabi_dcmplt>
 800503c:	2800      	cmp	r0, #0
 800503e:	f040 80b6 	bne.w	80051ae <_dtoa_r+0x6e6>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	429d      	cmp	r5, r3
 8005046:	f43f af7c 	beq.w	8004f42 <_dtoa_r+0x47a>
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <_dtoa_r+0x648>)
 800504c:	ec51 0b19 	vmov	r0, r1, d9
 8005050:	2200      	movs	r2, #0
 8005052:	f7fb fad9 	bl	8000608 <__aeabi_dmul>
 8005056:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <_dtoa_r+0x648>)
 8005058:	ec41 0b19 	vmov	d9, r0, r1
 800505c:	2200      	movs	r2, #0
 800505e:	4640      	mov	r0, r8
 8005060:	4649      	mov	r1, r9
 8005062:	f7fb fad1 	bl	8000608 <__aeabi_dmul>
 8005066:	4680      	mov	r8, r0
 8005068:	4689      	mov	r9, r1
 800506a:	e7c5      	b.n	8004ff8 <_dtoa_r+0x530>
 800506c:	ec51 0b17 	vmov	r0, r1, d7
 8005070:	f7fb faca 	bl	8000608 <__aeabi_dmul>
 8005074:	9b02      	ldr	r3, [sp, #8]
 8005076:	9d00      	ldr	r5, [sp, #0]
 8005078:	930f      	str	r3, [sp, #60]	; 0x3c
 800507a:	ec41 0b19 	vmov	d9, r0, r1
 800507e:	4649      	mov	r1, r9
 8005080:	4640      	mov	r0, r8
 8005082:	f7fb fd71 	bl	8000b68 <__aeabi_d2iz>
 8005086:	4606      	mov	r6, r0
 8005088:	f7fb fa54 	bl	8000534 <__aeabi_i2d>
 800508c:	3630      	adds	r6, #48	; 0x30
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f8ff 	bl	8000298 <__aeabi_dsub>
 800509a:	f805 6b01 	strb.w	r6, [r5], #1
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	429d      	cmp	r5, r3
 80050a2:	4680      	mov	r8, r0
 80050a4:	4689      	mov	r9, r1
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	d124      	bne.n	80050f6 <_dtoa_r+0x62e>
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <_dtoa_r+0x654>)
 80050ae:	ec51 0b19 	vmov	r0, r1, d9
 80050b2:	f7fb f8f3 	bl	800029c <__adddf3>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fd33 	bl	8000b28 <__aeabi_dcmpgt>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d173      	bne.n	80051ae <_dtoa_r+0x6e6>
 80050c6:	ec53 2b19 	vmov	r2, r3, d9
 80050ca:	4914      	ldr	r1, [pc, #80]	; (800511c <_dtoa_r+0x654>)
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fb f8e3 	bl	8000298 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4640      	mov	r0, r8
 80050d8:	4649      	mov	r1, r9
 80050da:	f7fb fd07 	bl	8000aec <__aeabi_dcmplt>
 80050de:	2800      	cmp	r0, #0
 80050e0:	f43f af2f 	beq.w	8004f42 <_dtoa_r+0x47a>
 80050e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050e6:	1e6b      	subs	r3, r5, #1
 80050e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050ee:	2b30      	cmp	r3, #48	; 0x30
 80050f0:	d0f8      	beq.n	80050e4 <_dtoa_r+0x61c>
 80050f2:	46bb      	mov	fp, r7
 80050f4:	e04a      	b.n	800518c <_dtoa_r+0x6c4>
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_dtoa_r+0x648>)
 80050f8:	f7fb fa86 	bl	8000608 <__aeabi_dmul>
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	e7bd      	b.n	800507e <_dtoa_r+0x5b6>
 8005102:	bf00      	nop
 8005104:	08006f18 	.word	0x08006f18
 8005108:	08006ef0 	.word	0x08006ef0
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	40240000 	.word	0x40240000
 8005114:	401c0000 	.word	0x401c0000
 8005118:	40140000 	.word	0x40140000
 800511c:	3fe00000 	.word	0x3fe00000
 8005120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005124:	9d00      	ldr	r5, [sp, #0]
 8005126:	4642      	mov	r2, r8
 8005128:	464b      	mov	r3, r9
 800512a:	4630      	mov	r0, r6
 800512c:	4639      	mov	r1, r7
 800512e:	f7fb fb95 	bl	800085c <__aeabi_ddiv>
 8005132:	f7fb fd19 	bl	8000b68 <__aeabi_d2iz>
 8005136:	9001      	str	r0, [sp, #4]
 8005138:	f7fb f9fc 	bl	8000534 <__aeabi_i2d>
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	f7fb fa62 	bl	8000608 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb f8a4 	bl	8000298 <__aeabi_dsub>
 8005150:	9e01      	ldr	r6, [sp, #4]
 8005152:	9f04      	ldr	r7, [sp, #16]
 8005154:	3630      	adds	r6, #48	; 0x30
 8005156:	f805 6b01 	strb.w	r6, [r5], #1
 800515a:	9e00      	ldr	r6, [sp, #0]
 800515c:	1bae      	subs	r6, r5, r6
 800515e:	42b7      	cmp	r7, r6
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	d134      	bne.n	80051d0 <_dtoa_r+0x708>
 8005166:	f7fb f899 	bl	800029c <__adddf3>
 800516a:	4642      	mov	r2, r8
 800516c:	464b      	mov	r3, r9
 800516e:	4606      	mov	r6, r0
 8005170:	460f      	mov	r7, r1
 8005172:	f7fb fcd9 	bl	8000b28 <__aeabi_dcmpgt>
 8005176:	b9c8      	cbnz	r0, 80051ac <_dtoa_r+0x6e4>
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb fcaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005184:	b110      	cbz	r0, 800518c <_dtoa_r+0x6c4>
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	07db      	lsls	r3, r3, #31
 800518a:	d40f      	bmi.n	80051ac <_dtoa_r+0x6e4>
 800518c:	4651      	mov	r1, sl
 800518e:	4620      	mov	r0, r4
 8005190:	f000 fbcc 	bl	800592c <_Bfree>
 8005194:	2300      	movs	r3, #0
 8005196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005198:	702b      	strb	r3, [r5, #0]
 800519a:	f10b 0301 	add.w	r3, fp, #1
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f43f ace2 	beq.w	8004b6c <_dtoa_r+0xa4>
 80051a8:	601d      	str	r5, [r3, #0]
 80051aa:	e4df      	b.n	8004b6c <_dtoa_r+0xa4>
 80051ac:	465f      	mov	r7, fp
 80051ae:	462b      	mov	r3, r5
 80051b0:	461d      	mov	r5, r3
 80051b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051b6:	2a39      	cmp	r2, #57	; 0x39
 80051b8:	d106      	bne.n	80051c8 <_dtoa_r+0x700>
 80051ba:	9a00      	ldr	r2, [sp, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1f7      	bne.n	80051b0 <_dtoa_r+0x6e8>
 80051c0:	9900      	ldr	r1, [sp, #0]
 80051c2:	2230      	movs	r2, #48	; 0x30
 80051c4:	3701      	adds	r7, #1
 80051c6:	700a      	strb	r2, [r1, #0]
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	3201      	adds	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e790      	b.n	80050f2 <_dtoa_r+0x62a>
 80051d0:	4ba3      	ldr	r3, [pc, #652]	; (8005460 <_dtoa_r+0x998>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	f7fb fa18 	bl	8000608 <__aeabi_dmul>
 80051d8:	2200      	movs	r2, #0
 80051da:	2300      	movs	r3, #0
 80051dc:	4606      	mov	r6, r0
 80051de:	460f      	mov	r7, r1
 80051e0:	f7fb fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d09e      	beq.n	8005126 <_dtoa_r+0x65e>
 80051e8:	e7d0      	b.n	800518c <_dtoa_r+0x6c4>
 80051ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	f000 80ca 	beq.w	8005386 <_dtoa_r+0x8be>
 80051f2:	9a07      	ldr	r2, [sp, #28]
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	f300 80ad 	bgt.w	8005354 <_dtoa_r+0x88c>
 80051fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	f000 80a5 	beq.w	800534c <_dtoa_r+0x884>
 8005202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005206:	9e08      	ldr	r6, [sp, #32]
 8005208:	9d05      	ldr	r5, [sp, #20]
 800520a:	9a05      	ldr	r2, [sp, #20]
 800520c:	441a      	add	r2, r3
 800520e:	9205      	str	r2, [sp, #20]
 8005210:	9a06      	ldr	r2, [sp, #24]
 8005212:	2101      	movs	r1, #1
 8005214:	441a      	add	r2, r3
 8005216:	4620      	mov	r0, r4
 8005218:	9206      	str	r2, [sp, #24]
 800521a:	f000 fc3d 	bl	8005a98 <__i2b>
 800521e:	4607      	mov	r7, r0
 8005220:	b165      	cbz	r5, 800523c <_dtoa_r+0x774>
 8005222:	9b06      	ldr	r3, [sp, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	dd09      	ble.n	800523c <_dtoa_r+0x774>
 8005228:	42ab      	cmp	r3, r5
 800522a:	9a05      	ldr	r2, [sp, #20]
 800522c:	bfa8      	it	ge
 800522e:	462b      	movge	r3, r5
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	9205      	str	r2, [sp, #20]
 8005234:	9a06      	ldr	r2, [sp, #24]
 8005236:	1aed      	subs	r5, r5, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	9306      	str	r3, [sp, #24]
 800523c:	9b08      	ldr	r3, [sp, #32]
 800523e:	b1f3      	cbz	r3, 800527e <_dtoa_r+0x7b6>
 8005240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80a3 	beq.w	800538e <_dtoa_r+0x8c6>
 8005248:	2e00      	cmp	r6, #0
 800524a:	dd10      	ble.n	800526e <_dtoa_r+0x7a6>
 800524c:	4639      	mov	r1, r7
 800524e:	4632      	mov	r2, r6
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fce1 	bl	8005c18 <__pow5mult>
 8005256:	4652      	mov	r2, sl
 8005258:	4601      	mov	r1, r0
 800525a:	4607      	mov	r7, r0
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fc31 	bl	8005ac4 <__multiply>
 8005262:	4651      	mov	r1, sl
 8005264:	4680      	mov	r8, r0
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fb60 	bl	800592c <_Bfree>
 800526c:	46c2      	mov	sl, r8
 800526e:	9b08      	ldr	r3, [sp, #32]
 8005270:	1b9a      	subs	r2, r3, r6
 8005272:	d004      	beq.n	800527e <_dtoa_r+0x7b6>
 8005274:	4651      	mov	r1, sl
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fcce 	bl	8005c18 <__pow5mult>
 800527c:	4682      	mov	sl, r0
 800527e:	2101      	movs	r1, #1
 8005280:	4620      	mov	r0, r4
 8005282:	f000 fc09 	bl	8005a98 <__i2b>
 8005286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	4606      	mov	r6, r0
 800528c:	f340 8081 	ble.w	8005392 <_dtoa_r+0x8ca>
 8005290:	461a      	mov	r2, r3
 8005292:	4601      	mov	r1, r0
 8005294:	4620      	mov	r0, r4
 8005296:	f000 fcbf 	bl	8005c18 <__pow5mult>
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	2b01      	cmp	r3, #1
 800529e:	4606      	mov	r6, r0
 80052a0:	dd7a      	ble.n	8005398 <_dtoa_r+0x8d0>
 80052a2:	f04f 0800 	mov.w	r8, #0
 80052a6:	6933      	ldr	r3, [r6, #16]
 80052a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052ac:	6918      	ldr	r0, [r3, #16]
 80052ae:	f000 fba5 	bl	80059fc <__hi0bits>
 80052b2:	f1c0 0020 	rsb	r0, r0, #32
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	4418      	add	r0, r3
 80052ba:	f010 001f 	ands.w	r0, r0, #31
 80052be:	f000 8094 	beq.w	80053ea <_dtoa_r+0x922>
 80052c2:	f1c0 0320 	rsb	r3, r0, #32
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	f340 8085 	ble.w	80053d6 <_dtoa_r+0x90e>
 80052cc:	9b05      	ldr	r3, [sp, #20]
 80052ce:	f1c0 001c 	rsb	r0, r0, #28
 80052d2:	4403      	add	r3, r0
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	9b06      	ldr	r3, [sp, #24]
 80052d8:	4403      	add	r3, r0
 80052da:	4405      	add	r5, r0
 80052dc:	9306      	str	r3, [sp, #24]
 80052de:	9b05      	ldr	r3, [sp, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dd05      	ble.n	80052f0 <_dtoa_r+0x828>
 80052e4:	4651      	mov	r1, sl
 80052e6:	461a      	mov	r2, r3
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fcef 	bl	8005ccc <__lshift>
 80052ee:	4682      	mov	sl, r0
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dd05      	ble.n	8005302 <_dtoa_r+0x83a>
 80052f6:	4631      	mov	r1, r6
 80052f8:	461a      	mov	r2, r3
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fce6 	bl	8005ccc <__lshift>
 8005300:	4606      	mov	r6, r0
 8005302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005304:	2b00      	cmp	r3, #0
 8005306:	d072      	beq.n	80053ee <_dtoa_r+0x926>
 8005308:	4631      	mov	r1, r6
 800530a:	4650      	mov	r0, sl
 800530c:	f000 fd4a 	bl	8005da4 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	da6c      	bge.n	80053ee <_dtoa_r+0x926>
 8005314:	2300      	movs	r3, #0
 8005316:	4651      	mov	r1, sl
 8005318:	220a      	movs	r2, #10
 800531a:	4620      	mov	r0, r4
 800531c:	f000 fb28 	bl	8005970 <__multadd>
 8005320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005326:	4682      	mov	sl, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 81b0 	beq.w	800568e <_dtoa_r+0xbc6>
 800532e:	2300      	movs	r3, #0
 8005330:	4639      	mov	r1, r7
 8005332:	220a      	movs	r2, #10
 8005334:	4620      	mov	r0, r4
 8005336:	f000 fb1b 	bl	8005970 <__multadd>
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	4607      	mov	r7, r0
 8005340:	f300 8096 	bgt.w	8005470 <_dtoa_r+0x9a8>
 8005344:	9b07      	ldr	r3, [sp, #28]
 8005346:	2b02      	cmp	r3, #2
 8005348:	dc59      	bgt.n	80053fe <_dtoa_r+0x936>
 800534a:	e091      	b.n	8005470 <_dtoa_r+0x9a8>
 800534c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800534e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005352:	e758      	b.n	8005206 <_dtoa_r+0x73e>
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	1e5e      	subs	r6, r3, #1
 8005358:	9b08      	ldr	r3, [sp, #32]
 800535a:	42b3      	cmp	r3, r6
 800535c:	bfbf      	itttt	lt
 800535e:	9b08      	ldrlt	r3, [sp, #32]
 8005360:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005362:	9608      	strlt	r6, [sp, #32]
 8005364:	1af3      	sublt	r3, r6, r3
 8005366:	bfb4      	ite	lt
 8005368:	18d2      	addlt	r2, r2, r3
 800536a:	1b9e      	subge	r6, r3, r6
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	bfbc      	itt	lt
 8005370:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005372:	2600      	movlt	r6, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	bfb7      	itett	lt
 8005378:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800537c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005380:	1a9d      	sublt	r5, r3, r2
 8005382:	2300      	movlt	r3, #0
 8005384:	e741      	b.n	800520a <_dtoa_r+0x742>
 8005386:	9e08      	ldr	r6, [sp, #32]
 8005388:	9d05      	ldr	r5, [sp, #20]
 800538a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800538c:	e748      	b.n	8005220 <_dtoa_r+0x758>
 800538e:	9a08      	ldr	r2, [sp, #32]
 8005390:	e770      	b.n	8005274 <_dtoa_r+0x7ac>
 8005392:	9b07      	ldr	r3, [sp, #28]
 8005394:	2b01      	cmp	r3, #1
 8005396:	dc19      	bgt.n	80053cc <_dtoa_r+0x904>
 8005398:	9b02      	ldr	r3, [sp, #8]
 800539a:	b9bb      	cbnz	r3, 80053cc <_dtoa_r+0x904>
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a2:	b99b      	cbnz	r3, 80053cc <_dtoa_r+0x904>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	0d1b      	lsrs	r3, r3, #20
 80053ac:	051b      	lsls	r3, r3, #20
 80053ae:	b183      	cbz	r3, 80053d2 <_dtoa_r+0x90a>
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9305      	str	r3, [sp, #20]
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	f04f 0801 	mov.w	r8, #1
 80053c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f47f af6f 	bne.w	80052a6 <_dtoa_r+0x7de>
 80053c8:	2001      	movs	r0, #1
 80053ca:	e774      	b.n	80052b6 <_dtoa_r+0x7ee>
 80053cc:	f04f 0800 	mov.w	r8, #0
 80053d0:	e7f6      	b.n	80053c0 <_dtoa_r+0x8f8>
 80053d2:	4698      	mov	r8, r3
 80053d4:	e7f4      	b.n	80053c0 <_dtoa_r+0x8f8>
 80053d6:	d082      	beq.n	80052de <_dtoa_r+0x816>
 80053d8:	9a05      	ldr	r2, [sp, #20]
 80053da:	331c      	adds	r3, #28
 80053dc:	441a      	add	r2, r3
 80053de:	9205      	str	r2, [sp, #20]
 80053e0:	9a06      	ldr	r2, [sp, #24]
 80053e2:	441a      	add	r2, r3
 80053e4:	441d      	add	r5, r3
 80053e6:	9206      	str	r2, [sp, #24]
 80053e8:	e779      	b.n	80052de <_dtoa_r+0x816>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e7f4      	b.n	80053d8 <_dtoa_r+0x910>
 80053ee:	9b04      	ldr	r3, [sp, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dc37      	bgt.n	8005464 <_dtoa_r+0x99c>
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	dd34      	ble.n	8005464 <_dtoa_r+0x99c>
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	9b01      	ldr	r3, [sp, #4]
 8005400:	b963      	cbnz	r3, 800541c <_dtoa_r+0x954>
 8005402:	4631      	mov	r1, r6
 8005404:	2205      	movs	r2, #5
 8005406:	4620      	mov	r0, r4
 8005408:	f000 fab2 	bl	8005970 <__multadd>
 800540c:	4601      	mov	r1, r0
 800540e:	4606      	mov	r6, r0
 8005410:	4650      	mov	r0, sl
 8005412:	f000 fcc7 	bl	8005da4 <__mcmp>
 8005416:	2800      	cmp	r0, #0
 8005418:	f73f adbb 	bgt.w	8004f92 <_dtoa_r+0x4ca>
 800541c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541e:	9d00      	ldr	r5, [sp, #0]
 8005420:	ea6f 0b03 	mvn.w	fp, r3
 8005424:	f04f 0800 	mov.w	r8, #0
 8005428:	4631      	mov	r1, r6
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fa7e 	bl	800592c <_Bfree>
 8005430:	2f00      	cmp	r7, #0
 8005432:	f43f aeab 	beq.w	800518c <_dtoa_r+0x6c4>
 8005436:	f1b8 0f00 	cmp.w	r8, #0
 800543a:	d005      	beq.n	8005448 <_dtoa_r+0x980>
 800543c:	45b8      	cmp	r8, r7
 800543e:	d003      	beq.n	8005448 <_dtoa_r+0x980>
 8005440:	4641      	mov	r1, r8
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fa72 	bl	800592c <_Bfree>
 8005448:	4639      	mov	r1, r7
 800544a:	4620      	mov	r0, r4
 800544c:	f000 fa6e 	bl	800592c <_Bfree>
 8005450:	e69c      	b.n	800518c <_dtoa_r+0x6c4>
 8005452:	2600      	movs	r6, #0
 8005454:	4637      	mov	r7, r6
 8005456:	e7e1      	b.n	800541c <_dtoa_r+0x954>
 8005458:	46bb      	mov	fp, r7
 800545a:	4637      	mov	r7, r6
 800545c:	e599      	b.n	8004f92 <_dtoa_r+0x4ca>
 800545e:	bf00      	nop
 8005460:	40240000 	.word	0x40240000
 8005464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80c8 	beq.w	80055fc <_dtoa_r+0xb34>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2d00      	cmp	r5, #0
 8005472:	dd05      	ble.n	8005480 <_dtoa_r+0x9b8>
 8005474:	4639      	mov	r1, r7
 8005476:	462a      	mov	r2, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fc27 	bl	8005ccc <__lshift>
 800547e:	4607      	mov	r7, r0
 8005480:	f1b8 0f00 	cmp.w	r8, #0
 8005484:	d05b      	beq.n	800553e <_dtoa_r+0xa76>
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fa0f 	bl	80058ac <_Balloc>
 800548e:	4605      	mov	r5, r0
 8005490:	b928      	cbnz	r0, 800549e <_dtoa_r+0x9d6>
 8005492:	4b83      	ldr	r3, [pc, #524]	; (80056a0 <_dtoa_r+0xbd8>)
 8005494:	4602      	mov	r2, r0
 8005496:	f240 21ef 	movw	r1, #751	; 0x2ef
 800549a:	f7ff bb2e 	b.w	8004afa <_dtoa_r+0x32>
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	3202      	adds	r2, #2
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	f107 010c 	add.w	r1, r7, #12
 80054a8:	300c      	adds	r0, #12
 80054aa:	f000 ffab 	bl	8006404 <memcpy>
 80054ae:	2201      	movs	r2, #1
 80054b0:	4629      	mov	r1, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fc0a 	bl	8005ccc <__lshift>
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c2:	4413      	add	r3, r2
 80054c4:	9308      	str	r3, [sp, #32]
 80054c6:	9b02      	ldr	r3, [sp, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	46b8      	mov	r8, r7
 80054ce:	9306      	str	r3, [sp, #24]
 80054d0:	4607      	mov	r7, r0
 80054d2:	9b04      	ldr	r3, [sp, #16]
 80054d4:	4631      	mov	r1, r6
 80054d6:	3b01      	subs	r3, #1
 80054d8:	4650      	mov	r0, sl
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	f7ff fa6c 	bl	80049b8 <quorem>
 80054e0:	4641      	mov	r1, r8
 80054e2:	9002      	str	r0, [sp, #8]
 80054e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054e8:	4650      	mov	r0, sl
 80054ea:	f000 fc5b 	bl	8005da4 <__mcmp>
 80054ee:	463a      	mov	r2, r7
 80054f0:	9005      	str	r0, [sp, #20]
 80054f2:	4631      	mov	r1, r6
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fc71 	bl	8005ddc <__mdiff>
 80054fa:	68c2      	ldr	r2, [r0, #12]
 80054fc:	4605      	mov	r5, r0
 80054fe:	bb02      	cbnz	r2, 8005542 <_dtoa_r+0xa7a>
 8005500:	4601      	mov	r1, r0
 8005502:	4650      	mov	r0, sl
 8005504:	f000 fc4e 	bl	8005da4 <__mcmp>
 8005508:	4602      	mov	r2, r0
 800550a:	4629      	mov	r1, r5
 800550c:	4620      	mov	r0, r4
 800550e:	9209      	str	r2, [sp, #36]	; 0x24
 8005510:	f000 fa0c 	bl	800592c <_Bfree>
 8005514:	9b07      	ldr	r3, [sp, #28]
 8005516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005518:	9d04      	ldr	r5, [sp, #16]
 800551a:	ea43 0102 	orr.w	r1, r3, r2
 800551e:	9b06      	ldr	r3, [sp, #24]
 8005520:	4319      	orrs	r1, r3
 8005522:	d110      	bne.n	8005546 <_dtoa_r+0xa7e>
 8005524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005528:	d029      	beq.n	800557e <_dtoa_r+0xab6>
 800552a:	9b05      	ldr	r3, [sp, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	dd02      	ble.n	8005536 <_dtoa_r+0xa6e>
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	f883 9000 	strb.w	r9, [r3]
 800553c:	e774      	b.n	8005428 <_dtoa_r+0x960>
 800553e:	4638      	mov	r0, r7
 8005540:	e7ba      	b.n	80054b8 <_dtoa_r+0x9f0>
 8005542:	2201      	movs	r2, #1
 8005544:	e7e1      	b.n	800550a <_dtoa_r+0xa42>
 8005546:	9b05      	ldr	r3, [sp, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db04      	blt.n	8005556 <_dtoa_r+0xa8e>
 800554c:	9907      	ldr	r1, [sp, #28]
 800554e:	430b      	orrs	r3, r1
 8005550:	9906      	ldr	r1, [sp, #24]
 8005552:	430b      	orrs	r3, r1
 8005554:	d120      	bne.n	8005598 <_dtoa_r+0xad0>
 8005556:	2a00      	cmp	r2, #0
 8005558:	dded      	ble.n	8005536 <_dtoa_r+0xa6e>
 800555a:	4651      	mov	r1, sl
 800555c:	2201      	movs	r2, #1
 800555e:	4620      	mov	r0, r4
 8005560:	f000 fbb4 	bl	8005ccc <__lshift>
 8005564:	4631      	mov	r1, r6
 8005566:	4682      	mov	sl, r0
 8005568:	f000 fc1c 	bl	8005da4 <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	dc03      	bgt.n	8005578 <_dtoa_r+0xab0>
 8005570:	d1e1      	bne.n	8005536 <_dtoa_r+0xa6e>
 8005572:	f019 0f01 	tst.w	r9, #1
 8005576:	d0de      	beq.n	8005536 <_dtoa_r+0xa6e>
 8005578:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800557c:	d1d8      	bne.n	8005530 <_dtoa_r+0xa68>
 800557e:	9a01      	ldr	r2, [sp, #4]
 8005580:	2339      	movs	r3, #57	; 0x39
 8005582:	7013      	strb	r3, [r2, #0]
 8005584:	462b      	mov	r3, r5
 8005586:	461d      	mov	r5, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800558e:	2a39      	cmp	r2, #57	; 0x39
 8005590:	d06c      	beq.n	800566c <_dtoa_r+0xba4>
 8005592:	3201      	adds	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e747      	b.n	8005428 <_dtoa_r+0x960>
 8005598:	2a00      	cmp	r2, #0
 800559a:	dd07      	ble.n	80055ac <_dtoa_r+0xae4>
 800559c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055a0:	d0ed      	beq.n	800557e <_dtoa_r+0xab6>
 80055a2:	9a01      	ldr	r2, [sp, #4]
 80055a4:	f109 0301 	add.w	r3, r9, #1
 80055a8:	7013      	strb	r3, [r2, #0]
 80055aa:	e73d      	b.n	8005428 <_dtoa_r+0x960>
 80055ac:	9b04      	ldr	r3, [sp, #16]
 80055ae:	9a08      	ldr	r2, [sp, #32]
 80055b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d043      	beq.n	8005640 <_dtoa_r+0xb78>
 80055b8:	4651      	mov	r1, sl
 80055ba:	2300      	movs	r3, #0
 80055bc:	220a      	movs	r2, #10
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 f9d6 	bl	8005970 <__multadd>
 80055c4:	45b8      	cmp	r8, r7
 80055c6:	4682      	mov	sl, r0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	f04f 020a 	mov.w	r2, #10
 80055d0:	4641      	mov	r1, r8
 80055d2:	4620      	mov	r0, r4
 80055d4:	d107      	bne.n	80055e6 <_dtoa_r+0xb1e>
 80055d6:	f000 f9cb 	bl	8005970 <__multadd>
 80055da:	4680      	mov	r8, r0
 80055dc:	4607      	mov	r7, r0
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	e775      	b.n	80054d2 <_dtoa_r+0xa0a>
 80055e6:	f000 f9c3 	bl	8005970 <__multadd>
 80055ea:	4639      	mov	r1, r7
 80055ec:	4680      	mov	r8, r0
 80055ee:	2300      	movs	r3, #0
 80055f0:	220a      	movs	r2, #10
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f9bc 	bl	8005970 <__multadd>
 80055f8:	4607      	mov	r7, r0
 80055fa:	e7f0      	b.n	80055de <_dtoa_r+0xb16>
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	9d00      	ldr	r5, [sp, #0]
 8005602:	4631      	mov	r1, r6
 8005604:	4650      	mov	r0, sl
 8005606:	f7ff f9d7 	bl	80049b8 <quorem>
 800560a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	f805 9b01 	strb.w	r9, [r5], #1
 8005614:	1aea      	subs	r2, r5, r3
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	4293      	cmp	r3, r2
 800561a:	dd07      	ble.n	800562c <_dtoa_r+0xb64>
 800561c:	4651      	mov	r1, sl
 800561e:	2300      	movs	r3, #0
 8005620:	220a      	movs	r2, #10
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f9a4 	bl	8005970 <__multadd>
 8005628:	4682      	mov	sl, r0
 800562a:	e7ea      	b.n	8005602 <_dtoa_r+0xb3a>
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfc8      	it	gt
 8005632:	461d      	movgt	r5, r3
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	bfd8      	it	le
 8005638:	2501      	movle	r5, #1
 800563a:	441d      	add	r5, r3
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	4651      	mov	r1, sl
 8005642:	2201      	movs	r2, #1
 8005644:	4620      	mov	r0, r4
 8005646:	f000 fb41 	bl	8005ccc <__lshift>
 800564a:	4631      	mov	r1, r6
 800564c:	4682      	mov	sl, r0
 800564e:	f000 fba9 	bl	8005da4 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	dc96      	bgt.n	8005584 <_dtoa_r+0xabc>
 8005656:	d102      	bne.n	800565e <_dtoa_r+0xb96>
 8005658:	f019 0f01 	tst.w	r9, #1
 800565c:	d192      	bne.n	8005584 <_dtoa_r+0xabc>
 800565e:	462b      	mov	r3, r5
 8005660:	461d      	mov	r5, r3
 8005662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005666:	2a30      	cmp	r2, #48	; 0x30
 8005668:	d0fa      	beq.n	8005660 <_dtoa_r+0xb98>
 800566a:	e6dd      	b.n	8005428 <_dtoa_r+0x960>
 800566c:	9a00      	ldr	r2, [sp, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d189      	bne.n	8005586 <_dtoa_r+0xabe>
 8005672:	f10b 0b01 	add.w	fp, fp, #1
 8005676:	2331      	movs	r3, #49	; 0x31
 8005678:	e796      	b.n	80055a8 <_dtoa_r+0xae0>
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <_dtoa_r+0xbdc>)
 800567c:	f7ff ba99 	b.w	8004bb2 <_dtoa_r+0xea>
 8005680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f aa6d 	bne.w	8004b62 <_dtoa_r+0x9a>
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <_dtoa_r+0xbe0>)
 800568a:	f7ff ba92 	b.w	8004bb2 <_dtoa_r+0xea>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dcb5      	bgt.n	8005600 <_dtoa_r+0xb38>
 8005694:	9b07      	ldr	r3, [sp, #28]
 8005696:	2b02      	cmp	r3, #2
 8005698:	f73f aeb1 	bgt.w	80053fe <_dtoa_r+0x936>
 800569c:	e7b0      	b.n	8005600 <_dtoa_r+0xb38>
 800569e:	bf00      	nop
 80056a0:	08006e80 	.word	0x08006e80
 80056a4:	08006de0 	.word	0x08006de0
 80056a8:	08006e04 	.word	0x08006e04

080056ac <_free_r>:
 80056ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d044      	beq.n	800573c <_free_r+0x90>
 80056b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b6:	9001      	str	r0, [sp, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f1a1 0404 	sub.w	r4, r1, #4
 80056be:	bfb8      	it	lt
 80056c0:	18e4      	addlt	r4, r4, r3
 80056c2:	f000 f8e7 	bl	8005894 <__malloc_lock>
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <_free_r+0x94>)
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	b933      	cbnz	r3, 80056dc <_free_r+0x30>
 80056ce:	6063      	str	r3, [r4, #4]
 80056d0:	6014      	str	r4, [r2, #0]
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056d8:	f000 b8e2 	b.w	80058a0 <__malloc_unlock>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d908      	bls.n	80056f2 <_free_r+0x46>
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	1961      	adds	r1, r4, r5
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf01      	itttt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	1949      	addeq	r1, r1, r5
 80056ee:	6021      	streq	r1, [r4, #0]
 80056f0:	e7ed      	b.n	80056ce <_free_r+0x22>
 80056f2:	461a      	mov	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b10b      	cbz	r3, 80056fc <_free_r+0x50>
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d9fa      	bls.n	80056f2 <_free_r+0x46>
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	1855      	adds	r5, r2, r1
 8005700:	42a5      	cmp	r5, r4
 8005702:	d10b      	bne.n	800571c <_free_r+0x70>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	4421      	add	r1, r4
 8005708:	1854      	adds	r4, r2, r1
 800570a:	42a3      	cmp	r3, r4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	d1e0      	bne.n	80056d2 <_free_r+0x26>
 8005710:	681c      	ldr	r4, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	440c      	add	r4, r1
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	e7da      	b.n	80056d2 <_free_r+0x26>
 800571c:	d902      	bls.n	8005724 <_free_r+0x78>
 800571e:	230c      	movs	r3, #12
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	e7d6      	b.n	80056d2 <_free_r+0x26>
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	1961      	adds	r1, r4, r5
 8005728:	428b      	cmp	r3, r1
 800572a:	bf04      	itt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	bf04      	itt	eq
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	6054      	str	r4, [r2, #4]
 800573a:	e7ca      	b.n	80056d2 <_free_r+0x26>
 800573c:	b003      	add	sp, #12
 800573e:	bd30      	pop	{r4, r5, pc}
 8005740:	2000187c 	.word	0x2000187c

08005744 <malloc>:
 8005744:	4b02      	ldr	r3, [pc, #8]	; (8005750 <malloc+0xc>)
 8005746:	4601      	mov	r1, r0
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	f000 b823 	b.w	8005794 <_malloc_r>
 800574e:	bf00      	nop
 8005750:	20000064 	.word	0x20000064

08005754 <sbrk_aligned>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4e0e      	ldr	r6, [pc, #56]	; (8005790 <sbrk_aligned+0x3c>)
 8005758:	460c      	mov	r4, r1
 800575a:	6831      	ldr	r1, [r6, #0]
 800575c:	4605      	mov	r5, r0
 800575e:	b911      	cbnz	r1, 8005766 <sbrk_aligned+0x12>
 8005760:	f000 fe40 	bl	80063e4 <_sbrk_r>
 8005764:	6030      	str	r0, [r6, #0]
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fe3b 	bl	80063e4 <_sbrk_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d00a      	beq.n	8005788 <sbrk_aligned+0x34>
 8005772:	1cc4      	adds	r4, r0, #3
 8005774:	f024 0403 	bic.w	r4, r4, #3
 8005778:	42a0      	cmp	r0, r4
 800577a:	d007      	beq.n	800578c <sbrk_aligned+0x38>
 800577c:	1a21      	subs	r1, r4, r0
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fe30 	bl	80063e4 <_sbrk_r>
 8005784:	3001      	adds	r0, #1
 8005786:	d101      	bne.n	800578c <sbrk_aligned+0x38>
 8005788:	f04f 34ff 	mov.w	r4, #4294967295
 800578c:	4620      	mov	r0, r4
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	20001880 	.word	0x20001880

08005794 <_malloc_r>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	1ccd      	adds	r5, r1, #3
 800579a:	f025 0503 	bic.w	r5, r5, #3
 800579e:	3508      	adds	r5, #8
 80057a0:	2d0c      	cmp	r5, #12
 80057a2:	bf38      	it	cc
 80057a4:	250c      	movcc	r5, #12
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	4607      	mov	r7, r0
 80057aa:	db01      	blt.n	80057b0 <_malloc_r+0x1c>
 80057ac:	42a9      	cmp	r1, r5
 80057ae:	d905      	bls.n	80057bc <_malloc_r+0x28>
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	2600      	movs	r6, #0
 80057b6:	4630      	mov	r0, r6
 80057b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005890 <_malloc_r+0xfc>
 80057c0:	f000 f868 	bl	8005894 <__malloc_lock>
 80057c4:	f8d8 3000 	ldr.w	r3, [r8]
 80057c8:	461c      	mov	r4, r3
 80057ca:	bb5c      	cbnz	r4, 8005824 <_malloc_r+0x90>
 80057cc:	4629      	mov	r1, r5
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7ff ffc0 	bl	8005754 <sbrk_aligned>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	4604      	mov	r4, r0
 80057d8:	d155      	bne.n	8005886 <_malloc_r+0xf2>
 80057da:	f8d8 4000 	ldr.w	r4, [r8]
 80057de:	4626      	mov	r6, r4
 80057e0:	2e00      	cmp	r6, #0
 80057e2:	d145      	bne.n	8005870 <_malloc_r+0xdc>
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d048      	beq.n	800587a <_malloc_r+0xe6>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	4631      	mov	r1, r6
 80057ec:	4638      	mov	r0, r7
 80057ee:	eb04 0903 	add.w	r9, r4, r3
 80057f2:	f000 fdf7 	bl	80063e4 <_sbrk_r>
 80057f6:	4581      	cmp	r9, r0
 80057f8:	d13f      	bne.n	800587a <_malloc_r+0xe6>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	1a6d      	subs	r5, r5, r1
 80057fe:	4629      	mov	r1, r5
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff ffa7 	bl	8005754 <sbrk_aligned>
 8005806:	3001      	adds	r0, #1
 8005808:	d037      	beq.n	800587a <_malloc_r+0xe6>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	442b      	add	r3, r5
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	f8d8 3000 	ldr.w	r3, [r8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d038      	beq.n	800588a <_malloc_r+0xf6>
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	42a2      	cmp	r2, r4
 800581c:	d12b      	bne.n	8005876 <_malloc_r+0xe2>
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	e00f      	b.n	8005844 <_malloc_r+0xb0>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	1b52      	subs	r2, r2, r5
 8005828:	d41f      	bmi.n	800586a <_malloc_r+0xd6>
 800582a:	2a0b      	cmp	r2, #11
 800582c:	d917      	bls.n	800585e <_malloc_r+0xca>
 800582e:	1961      	adds	r1, r4, r5
 8005830:	42a3      	cmp	r3, r4
 8005832:	6025      	str	r5, [r4, #0]
 8005834:	bf18      	it	ne
 8005836:	6059      	strne	r1, [r3, #4]
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	bf08      	it	eq
 800583c:	f8c8 1000 	streq.w	r1, [r8]
 8005840:	5162      	str	r2, [r4, r5]
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	4638      	mov	r0, r7
 8005846:	f104 060b 	add.w	r6, r4, #11
 800584a:	f000 f829 	bl	80058a0 <__malloc_unlock>
 800584e:	f026 0607 	bic.w	r6, r6, #7
 8005852:	1d23      	adds	r3, r4, #4
 8005854:	1af2      	subs	r2, r6, r3
 8005856:	d0ae      	beq.n	80057b6 <_malloc_r+0x22>
 8005858:	1b9b      	subs	r3, r3, r6
 800585a:	50a3      	str	r3, [r4, r2]
 800585c:	e7ab      	b.n	80057b6 <_malloc_r+0x22>
 800585e:	42a3      	cmp	r3, r4
 8005860:	6862      	ldr	r2, [r4, #4]
 8005862:	d1dd      	bne.n	8005820 <_malloc_r+0x8c>
 8005864:	f8c8 2000 	str.w	r2, [r8]
 8005868:	e7ec      	b.n	8005844 <_malloc_r+0xb0>
 800586a:	4623      	mov	r3, r4
 800586c:	6864      	ldr	r4, [r4, #4]
 800586e:	e7ac      	b.n	80057ca <_malloc_r+0x36>
 8005870:	4634      	mov	r4, r6
 8005872:	6876      	ldr	r6, [r6, #4]
 8005874:	e7b4      	b.n	80057e0 <_malloc_r+0x4c>
 8005876:	4613      	mov	r3, r2
 8005878:	e7cc      	b.n	8005814 <_malloc_r+0x80>
 800587a:	230c      	movs	r3, #12
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	4638      	mov	r0, r7
 8005880:	f000 f80e 	bl	80058a0 <__malloc_unlock>
 8005884:	e797      	b.n	80057b6 <_malloc_r+0x22>
 8005886:	6025      	str	r5, [r4, #0]
 8005888:	e7dc      	b.n	8005844 <_malloc_r+0xb0>
 800588a:	605b      	str	r3, [r3, #4]
 800588c:	deff      	udf	#255	; 0xff
 800588e:	bf00      	nop
 8005890:	2000187c 	.word	0x2000187c

08005894 <__malloc_lock>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__malloc_lock+0x8>)
 8005896:	f7ff b88d 	b.w	80049b4 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	20001878 	.word	0x20001878

080058a0 <__malloc_unlock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__malloc_unlock+0x8>)
 80058a2:	f7ff b888 	b.w	80049b6 <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	20001878 	.word	0x20001878

080058ac <_Balloc>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	69c6      	ldr	r6, [r0, #28]
 80058b0:	4604      	mov	r4, r0
 80058b2:	460d      	mov	r5, r1
 80058b4:	b976      	cbnz	r6, 80058d4 <_Balloc+0x28>
 80058b6:	2010      	movs	r0, #16
 80058b8:	f7ff ff44 	bl	8005744 <malloc>
 80058bc:	4602      	mov	r2, r0
 80058be:	61e0      	str	r0, [r4, #28]
 80058c0:	b920      	cbnz	r0, 80058cc <_Balloc+0x20>
 80058c2:	4b18      	ldr	r3, [pc, #96]	; (8005924 <_Balloc+0x78>)
 80058c4:	4818      	ldr	r0, [pc, #96]	; (8005928 <_Balloc+0x7c>)
 80058c6:	216b      	movs	r1, #107	; 0x6b
 80058c8:	f000 fdaa 	bl	8006420 <__assert_func>
 80058cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058d0:	6006      	str	r6, [r0, #0]
 80058d2:	60c6      	str	r6, [r0, #12]
 80058d4:	69e6      	ldr	r6, [r4, #28]
 80058d6:	68f3      	ldr	r3, [r6, #12]
 80058d8:	b183      	cbz	r3, 80058fc <_Balloc+0x50>
 80058da:	69e3      	ldr	r3, [r4, #28]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058e2:	b9b8      	cbnz	r0, 8005914 <_Balloc+0x68>
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ea:	1d72      	adds	r2, r6, #5
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fdb4 	bl	800645c <_calloc_r>
 80058f4:	b160      	cbz	r0, 8005910 <_Balloc+0x64>
 80058f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058fa:	e00e      	b.n	800591a <_Balloc+0x6e>
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	2104      	movs	r1, #4
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fdab 	bl	800645c <_calloc_r>
 8005906:	69e3      	ldr	r3, [r4, #28]
 8005908:	60f0      	str	r0, [r6, #12]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <_Balloc+0x2e>
 8005910:	2000      	movs	r0, #0
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800591a:	2300      	movs	r3, #0
 800591c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005920:	e7f7      	b.n	8005912 <_Balloc+0x66>
 8005922:	bf00      	nop
 8005924:	08006e11 	.word	0x08006e11
 8005928:	08006e91 	.word	0x08006e91

0800592c <_Bfree>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	69c6      	ldr	r6, [r0, #28]
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b976      	cbnz	r6, 8005954 <_Bfree+0x28>
 8005936:	2010      	movs	r0, #16
 8005938:	f7ff ff04 	bl	8005744 <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	61e8      	str	r0, [r5, #28]
 8005940:	b920      	cbnz	r0, 800594c <_Bfree+0x20>
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <_Bfree+0x3c>)
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <_Bfree+0x40>)
 8005946:	218f      	movs	r1, #143	; 0x8f
 8005948:	f000 fd6a 	bl	8006420 <__assert_func>
 800594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005950:	6006      	str	r6, [r0, #0]
 8005952:	60c6      	str	r6, [r0, #12]
 8005954:	b13c      	cbz	r4, 8005966 <_Bfree+0x3a>
 8005956:	69eb      	ldr	r3, [r5, #28]
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	08006e11 	.word	0x08006e11
 800596c:	08006e91 	.word	0x08006e91

08005970 <__multadd>:
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	690d      	ldr	r5, [r1, #16]
 8005976:	4607      	mov	r7, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461e      	mov	r6, r3
 800597c:	f101 0c14 	add.w	ip, r1, #20
 8005980:	2000      	movs	r0, #0
 8005982:	f8dc 3000 	ldr.w	r3, [ip]
 8005986:	b299      	uxth	r1, r3
 8005988:	fb02 6101 	mla	r1, r2, r1, r6
 800598c:	0c1e      	lsrs	r6, r3, #16
 800598e:	0c0b      	lsrs	r3, r1, #16
 8005990:	fb02 3306 	mla	r3, r2, r6, r3
 8005994:	b289      	uxth	r1, r1
 8005996:	3001      	adds	r0, #1
 8005998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800599c:	4285      	cmp	r5, r0
 800599e:	f84c 1b04 	str.w	r1, [ip], #4
 80059a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059a6:	dcec      	bgt.n	8005982 <__multadd+0x12>
 80059a8:	b30e      	cbz	r6, 80059ee <__multadd+0x7e>
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc19      	bgt.n	80059e4 <__multadd+0x74>
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	4638      	mov	r0, r7
 80059b4:	3101      	adds	r1, #1
 80059b6:	f7ff ff79 	bl	80058ac <_Balloc>
 80059ba:	4680      	mov	r8, r0
 80059bc:	b928      	cbnz	r0, 80059ca <__multadd+0x5a>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <__multadd+0x84>)
 80059c2:	480d      	ldr	r0, [pc, #52]	; (80059f8 <__multadd+0x88>)
 80059c4:	21ba      	movs	r1, #186	; 0xba
 80059c6:	f000 fd2b 	bl	8006420 <__assert_func>
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	3202      	adds	r2, #2
 80059ce:	f104 010c 	add.w	r1, r4, #12
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	300c      	adds	r0, #12
 80059d6:	f000 fd15 	bl	8006404 <memcpy>
 80059da:	4621      	mov	r1, r4
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ffa5 	bl	800592c <_Bfree>
 80059e2:	4644      	mov	r4, r8
 80059e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059e8:	3501      	adds	r5, #1
 80059ea:	615e      	str	r6, [r3, #20]
 80059ec:	6125      	str	r5, [r4, #16]
 80059ee:	4620      	mov	r0, r4
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	08006e80 	.word	0x08006e80
 80059f8:	08006e91 	.word	0x08006e91

080059fc <__hi0bits>:
 80059fc:	0c03      	lsrs	r3, r0, #16
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	b9d3      	cbnz	r3, 8005a38 <__hi0bits+0x3c>
 8005a02:	0400      	lsls	r0, r0, #16
 8005a04:	2310      	movs	r3, #16
 8005a06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a0a:	bf04      	itt	eq
 8005a0c:	0200      	lsleq	r0, r0, #8
 8005a0e:	3308      	addeq	r3, #8
 8005a10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a14:	bf04      	itt	eq
 8005a16:	0100      	lsleq	r0, r0, #4
 8005a18:	3304      	addeq	r3, #4
 8005a1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a1e:	bf04      	itt	eq
 8005a20:	0080      	lsleq	r0, r0, #2
 8005a22:	3302      	addeq	r3, #2
 8005a24:	2800      	cmp	r0, #0
 8005a26:	db05      	blt.n	8005a34 <__hi0bits+0x38>
 8005a28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a2c:	f103 0301 	add.w	r3, r3, #1
 8005a30:	bf08      	it	eq
 8005a32:	2320      	moveq	r3, #32
 8005a34:	4618      	mov	r0, r3
 8005a36:	4770      	bx	lr
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e7e4      	b.n	8005a06 <__hi0bits+0xa>

08005a3c <__lo0bits>:
 8005a3c:	6803      	ldr	r3, [r0, #0]
 8005a3e:	f013 0207 	ands.w	r2, r3, #7
 8005a42:	d00c      	beq.n	8005a5e <__lo0bits+0x22>
 8005a44:	07d9      	lsls	r1, r3, #31
 8005a46:	d422      	bmi.n	8005a8e <__lo0bits+0x52>
 8005a48:	079a      	lsls	r2, r3, #30
 8005a4a:	bf49      	itett	mi
 8005a4c:	085b      	lsrmi	r3, r3, #1
 8005a4e:	089b      	lsrpl	r3, r3, #2
 8005a50:	6003      	strmi	r3, [r0, #0]
 8005a52:	2201      	movmi	r2, #1
 8005a54:	bf5c      	itt	pl
 8005a56:	6003      	strpl	r3, [r0, #0]
 8005a58:	2202      	movpl	r2, #2
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4770      	bx	lr
 8005a5e:	b299      	uxth	r1, r3
 8005a60:	b909      	cbnz	r1, 8005a66 <__lo0bits+0x2a>
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	2210      	movs	r2, #16
 8005a66:	b2d9      	uxtb	r1, r3
 8005a68:	b909      	cbnz	r1, 8005a6e <__lo0bits+0x32>
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	0719      	lsls	r1, r3, #28
 8005a70:	bf04      	itt	eq
 8005a72:	091b      	lsreq	r3, r3, #4
 8005a74:	3204      	addeq	r2, #4
 8005a76:	0799      	lsls	r1, r3, #30
 8005a78:	bf04      	itt	eq
 8005a7a:	089b      	lsreq	r3, r3, #2
 8005a7c:	3202      	addeq	r2, #2
 8005a7e:	07d9      	lsls	r1, r3, #31
 8005a80:	d403      	bmi.n	8005a8a <__lo0bits+0x4e>
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	f102 0201 	add.w	r2, r2, #1
 8005a88:	d003      	beq.n	8005a92 <__lo0bits+0x56>
 8005a8a:	6003      	str	r3, [r0, #0]
 8005a8c:	e7e5      	b.n	8005a5a <__lo0bits+0x1e>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	e7e3      	b.n	8005a5a <__lo0bits+0x1e>
 8005a92:	2220      	movs	r2, #32
 8005a94:	e7e1      	b.n	8005a5a <__lo0bits+0x1e>
	...

08005a98 <__i2b>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	f7ff ff05 	bl	80058ac <_Balloc>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	b928      	cbnz	r0, 8005ab2 <__i2b+0x1a>
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <__i2b+0x24>)
 8005aa8:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <__i2b+0x28>)
 8005aaa:	f240 1145 	movw	r1, #325	; 0x145
 8005aae:	f000 fcb7 	bl	8006420 <__assert_func>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	6144      	str	r4, [r0, #20]
 8005ab6:	6103      	str	r3, [r0, #16]
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	08006e80 	.word	0x08006e80
 8005ac0:	08006e91 	.word	0x08006e91

08005ac4 <__multiply>:
 8005ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	4691      	mov	r9, r2
 8005aca:	690a      	ldr	r2, [r1, #16]
 8005acc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bfb8      	it	lt
 8005ad4:	460b      	movlt	r3, r1
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	bfbc      	itt	lt
 8005ada:	464c      	movlt	r4, r9
 8005adc:	4699      	movlt	r9, r3
 8005ade:	6927      	ldr	r7, [r4, #16]
 8005ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ae4:	68a3      	ldr	r3, [r4, #8]
 8005ae6:	6861      	ldr	r1, [r4, #4]
 8005ae8:	eb07 060a 	add.w	r6, r7, sl
 8005aec:	42b3      	cmp	r3, r6
 8005aee:	b085      	sub	sp, #20
 8005af0:	bfb8      	it	lt
 8005af2:	3101      	addlt	r1, #1
 8005af4:	f7ff feda 	bl	80058ac <_Balloc>
 8005af8:	b930      	cbnz	r0, 8005b08 <__multiply+0x44>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b44      	ldr	r3, [pc, #272]	; (8005c10 <__multiply+0x14c>)
 8005afe:	4845      	ldr	r0, [pc, #276]	; (8005c14 <__multiply+0x150>)
 8005b00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b04:	f000 fc8c 	bl	8006420 <__assert_func>
 8005b08:	f100 0514 	add.w	r5, r0, #20
 8005b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b10:	462b      	mov	r3, r5
 8005b12:	2200      	movs	r2, #0
 8005b14:	4543      	cmp	r3, r8
 8005b16:	d321      	bcc.n	8005b5c <__multiply+0x98>
 8005b18:	f104 0314 	add.w	r3, r4, #20
 8005b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b20:	f109 0314 	add.w	r3, r9, #20
 8005b24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b28:	9202      	str	r2, [sp, #8]
 8005b2a:	1b3a      	subs	r2, r7, r4
 8005b2c:	3a15      	subs	r2, #21
 8005b2e:	f022 0203 	bic.w	r2, r2, #3
 8005b32:	3204      	adds	r2, #4
 8005b34:	f104 0115 	add.w	r1, r4, #21
 8005b38:	428f      	cmp	r7, r1
 8005b3a:	bf38      	it	cc
 8005b3c:	2204      	movcc	r2, #4
 8005b3e:	9201      	str	r2, [sp, #4]
 8005b40:	9a02      	ldr	r2, [sp, #8]
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d80c      	bhi.n	8005b62 <__multiply+0x9e>
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	dd03      	ble.n	8005b54 <__multiply+0x90>
 8005b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05b      	beq.n	8005c0c <__multiply+0x148>
 8005b54:	6106      	str	r6, [r0, #16]
 8005b56:	b005      	add	sp, #20
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5c:	f843 2b04 	str.w	r2, [r3], #4
 8005b60:	e7d8      	b.n	8005b14 <__multiply+0x50>
 8005b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b66:	f1ba 0f00 	cmp.w	sl, #0
 8005b6a:	d024      	beq.n	8005bb6 <__multiply+0xf2>
 8005b6c:	f104 0e14 	add.w	lr, r4, #20
 8005b70:	46a9      	mov	r9, r5
 8005b72:	f04f 0c00 	mov.w	ip, #0
 8005b76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8005b7e:	fa1f fb82 	uxth.w	fp, r2
 8005b82:	b289      	uxth	r1, r1
 8005b84:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b90:	4461      	add	r1, ip
 8005b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b96:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b9e:	b289      	uxth	r1, r1
 8005ba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ba4:	4577      	cmp	r7, lr
 8005ba6:	f849 1b04 	str.w	r1, [r9], #4
 8005baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005bae:	d8e2      	bhi.n	8005b76 <__multiply+0xb2>
 8005bb0:	9a01      	ldr	r2, [sp, #4]
 8005bb2:	f845 c002 	str.w	ip, [r5, r2]
 8005bb6:	9a03      	ldr	r2, [sp, #12]
 8005bb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	f1b9 0f00 	cmp.w	r9, #0
 8005bc2:	d021      	beq.n	8005c08 <__multiply+0x144>
 8005bc4:	6829      	ldr	r1, [r5, #0]
 8005bc6:	f104 0c14 	add.w	ip, r4, #20
 8005bca:	46ae      	mov	lr, r5
 8005bcc:	f04f 0a00 	mov.w	sl, #0
 8005bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8005bd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8005bdc:	4452      	add	r2, sl
 8005bde:	b289      	uxth	r1, r1
 8005be0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005be4:	f84e 1b04 	str.w	r1, [lr], #4
 8005be8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bf0:	f8be 1000 	ldrh.w	r1, [lr]
 8005bf4:	fb09 110a 	mla	r1, r9, sl, r1
 8005bf8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005bfc:	4567      	cmp	r7, ip
 8005bfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c02:	d8e5      	bhi.n	8005bd0 <__multiply+0x10c>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	50a9      	str	r1, [r5, r2]
 8005c08:	3504      	adds	r5, #4
 8005c0a:	e799      	b.n	8005b40 <__multiply+0x7c>
 8005c0c:	3e01      	subs	r6, #1
 8005c0e:	e79b      	b.n	8005b48 <__multiply+0x84>
 8005c10:	08006e80 	.word	0x08006e80
 8005c14:	08006e91 	.word	0x08006e91

08005c18 <__pow5mult>:
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	f012 0203 	ands.w	r2, r2, #3
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	d007      	beq.n	8005c38 <__pow5mult+0x20>
 8005c28:	4c25      	ldr	r4, [pc, #148]	; (8005cc0 <__pow5mult+0xa8>)
 8005c2a:	3a01      	subs	r2, #1
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c32:	f7ff fe9d 	bl	8005970 <__multadd>
 8005c36:	4607      	mov	r7, r0
 8005c38:	10ad      	asrs	r5, r5, #2
 8005c3a:	d03d      	beq.n	8005cb8 <__pow5mult+0xa0>
 8005c3c:	69f4      	ldr	r4, [r6, #28]
 8005c3e:	b97c      	cbnz	r4, 8005c60 <__pow5mult+0x48>
 8005c40:	2010      	movs	r0, #16
 8005c42:	f7ff fd7f 	bl	8005744 <malloc>
 8005c46:	4602      	mov	r2, r0
 8005c48:	61f0      	str	r0, [r6, #28]
 8005c4a:	b928      	cbnz	r0, 8005c58 <__pow5mult+0x40>
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <__pow5mult+0xac>)
 8005c4e:	481e      	ldr	r0, [pc, #120]	; (8005cc8 <__pow5mult+0xb0>)
 8005c50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c54:	f000 fbe4 	bl	8006420 <__assert_func>
 8005c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c5c:	6004      	str	r4, [r0, #0]
 8005c5e:	60c4      	str	r4, [r0, #12]
 8005c60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c68:	b94c      	cbnz	r4, 8005c7e <__pow5mult+0x66>
 8005c6a:	f240 2171 	movw	r1, #625	; 0x271
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7ff ff12 	bl	8005a98 <__i2b>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	f04f 0900 	mov.w	r9, #0
 8005c82:	07eb      	lsls	r3, r5, #31
 8005c84:	d50a      	bpl.n	8005c9c <__pow5mult+0x84>
 8005c86:	4639      	mov	r1, r7
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7ff ff1a 	bl	8005ac4 <__multiply>
 8005c90:	4639      	mov	r1, r7
 8005c92:	4680      	mov	r8, r0
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff fe49 	bl	800592c <_Bfree>
 8005c9a:	4647      	mov	r7, r8
 8005c9c:	106d      	asrs	r5, r5, #1
 8005c9e:	d00b      	beq.n	8005cb8 <__pow5mult+0xa0>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	b938      	cbnz	r0, 8005cb4 <__pow5mult+0x9c>
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ff0b 	bl	8005ac4 <__multiply>
 8005cae:	6020      	str	r0, [r4, #0]
 8005cb0:	f8c0 9000 	str.w	r9, [r0]
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	e7e4      	b.n	8005c82 <__pow5mult+0x6a>
 8005cb8:	4638      	mov	r0, r7
 8005cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08006fe0 	.word	0x08006fe0
 8005cc4:	08006e11 	.word	0x08006e11
 8005cc8:	08006e91 	.word	0x08006e91

08005ccc <__lshift>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	4607      	mov	r7, r0
 8005cde:	4691      	mov	r9, r2
 8005ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ce4:	f108 0601 	add.w	r6, r8, #1
 8005ce8:	42b3      	cmp	r3, r6
 8005cea:	db0b      	blt.n	8005d04 <__lshift+0x38>
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7ff fddd 	bl	80058ac <_Balloc>
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	b948      	cbnz	r0, 8005d0a <__lshift+0x3e>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b28      	ldr	r3, [pc, #160]	; (8005d9c <__lshift+0xd0>)
 8005cfa:	4829      	ldr	r0, [pc, #164]	; (8005da0 <__lshift+0xd4>)
 8005cfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d00:	f000 fb8e 	bl	8006420 <__assert_func>
 8005d04:	3101      	adds	r1, #1
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	e7ee      	b.n	8005ce8 <__lshift+0x1c>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f100 0114 	add.w	r1, r0, #20
 8005d10:	f100 0210 	add.w	r2, r0, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	4553      	cmp	r3, sl
 8005d18:	db33      	blt.n	8005d82 <__lshift+0xb6>
 8005d1a:	6920      	ldr	r0, [r4, #16]
 8005d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d20:	f104 0314 	add.w	r3, r4, #20
 8005d24:	f019 091f 	ands.w	r9, r9, #31
 8005d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d30:	d02b      	beq.n	8005d8a <__lshift+0xbe>
 8005d32:	f1c9 0e20 	rsb	lr, r9, #32
 8005d36:	468a      	mov	sl, r1
 8005d38:	2200      	movs	r2, #0
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d40:	4310      	orrs	r0, r2
 8005d42:	f84a 0b04 	str.w	r0, [sl], #4
 8005d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d4a:	459c      	cmp	ip, r3
 8005d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d50:	d8f3      	bhi.n	8005d3a <__lshift+0x6e>
 8005d52:	ebac 0304 	sub.w	r3, ip, r4
 8005d56:	3b15      	subs	r3, #21
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	f104 0015 	add.w	r0, r4, #21
 8005d62:	4584      	cmp	ip, r0
 8005d64:	bf38      	it	cc
 8005d66:	2304      	movcc	r3, #4
 8005d68:	50ca      	str	r2, [r1, r3]
 8005d6a:	b10a      	cbz	r2, 8005d70 <__lshift+0xa4>
 8005d6c:	f108 0602 	add.w	r6, r8, #2
 8005d70:	3e01      	subs	r6, #1
 8005d72:	4638      	mov	r0, r7
 8005d74:	612e      	str	r6, [r5, #16]
 8005d76:	4621      	mov	r1, r4
 8005d78:	f7ff fdd8 	bl	800592c <_Bfree>
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d86:	3301      	adds	r3, #1
 8005d88:	e7c5      	b.n	8005d16 <__lshift+0x4a>
 8005d8a:	3904      	subs	r1, #4
 8005d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d94:	459c      	cmp	ip, r3
 8005d96:	d8f9      	bhi.n	8005d8c <__lshift+0xc0>
 8005d98:	e7ea      	b.n	8005d70 <__lshift+0xa4>
 8005d9a:	bf00      	nop
 8005d9c:	08006e80 	.word	0x08006e80
 8005da0:	08006e91 	.word	0x08006e91

08005da4 <__mcmp>:
 8005da4:	b530      	push	{r4, r5, lr}
 8005da6:	6902      	ldr	r2, [r0, #16]
 8005da8:	690c      	ldr	r4, [r1, #16]
 8005daa:	1b12      	subs	r2, r2, r4
 8005dac:	d10e      	bne.n	8005dcc <__mcmp+0x28>
 8005dae:	f100 0314 	add.w	r3, r0, #20
 8005db2:	3114      	adds	r1, #20
 8005db4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005db8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005dbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005dc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005dc4:	42a5      	cmp	r5, r4
 8005dc6:	d003      	beq.n	8005dd0 <__mcmp+0x2c>
 8005dc8:	d305      	bcc.n	8005dd6 <__mcmp+0x32>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4610      	mov	r0, r2
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	d3f3      	bcc.n	8005dbc <__mcmp+0x18>
 8005dd4:	e7fa      	b.n	8005dcc <__mcmp+0x28>
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dda:	e7f7      	b.n	8005dcc <__mcmp+0x28>

08005ddc <__mdiff>:
 8005ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	4606      	mov	r6, r0
 8005de4:	4611      	mov	r1, r2
 8005de6:	4620      	mov	r0, r4
 8005de8:	4690      	mov	r8, r2
 8005dea:	f7ff ffdb 	bl	8005da4 <__mcmp>
 8005dee:	1e05      	subs	r5, r0, #0
 8005df0:	d110      	bne.n	8005e14 <__mdiff+0x38>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff fd59 	bl	80058ac <_Balloc>
 8005dfa:	b930      	cbnz	r0, 8005e0a <__mdiff+0x2e>
 8005dfc:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <__mdiff+0x10c>)
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f240 2137 	movw	r1, #567	; 0x237
 8005e04:	4839      	ldr	r0, [pc, #228]	; (8005eec <__mdiff+0x110>)
 8005e06:	f000 fb0b 	bl	8006420 <__assert_func>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	bfa4      	itt	ge
 8005e16:	4643      	movge	r3, r8
 8005e18:	46a0      	movge	r8, r4
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e20:	bfa6      	itte	ge
 8005e22:	461c      	movge	r4, r3
 8005e24:	2500      	movge	r5, #0
 8005e26:	2501      	movlt	r5, #1
 8005e28:	f7ff fd40 	bl	80058ac <_Balloc>
 8005e2c:	b920      	cbnz	r0, 8005e38 <__mdiff+0x5c>
 8005e2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <__mdiff+0x10c>)
 8005e30:	4602      	mov	r2, r0
 8005e32:	f240 2145 	movw	r1, #581	; 0x245
 8005e36:	e7e5      	b.n	8005e04 <__mdiff+0x28>
 8005e38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e3c:	6926      	ldr	r6, [r4, #16]
 8005e3e:	60c5      	str	r5, [r0, #12]
 8005e40:	f104 0914 	add.w	r9, r4, #20
 8005e44:	f108 0514 	add.w	r5, r8, #20
 8005e48:	f100 0e14 	add.w	lr, r0, #20
 8005e4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e54:	f108 0210 	add.w	r2, r8, #16
 8005e58:	46f2      	mov	sl, lr
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e64:	fa11 f88b 	uxtah	r8, r1, fp
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	eba8 0801 	sub.w	r8, r8, r1
 8005e70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e78:	fa1f f888 	uxth.w	r8, r8
 8005e7c:	1419      	asrs	r1, r3, #16
 8005e7e:	454e      	cmp	r6, r9
 8005e80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e84:	f84a 3b04 	str.w	r3, [sl], #4
 8005e88:	d8e8      	bhi.n	8005e5c <__mdiff+0x80>
 8005e8a:	1b33      	subs	r3, r6, r4
 8005e8c:	3b15      	subs	r3, #21
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	3304      	adds	r3, #4
 8005e94:	3415      	adds	r4, #21
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	bf38      	it	cc
 8005e9a:	2304      	movcc	r3, #4
 8005e9c:	441d      	add	r5, r3
 8005e9e:	4473      	add	r3, lr
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	462e      	mov	r6, r5
 8005ea4:	4566      	cmp	r6, ip
 8005ea6:	d30e      	bcc.n	8005ec6 <__mdiff+0xea>
 8005ea8:	f10c 0203 	add.w	r2, ip, #3
 8005eac:	1b52      	subs	r2, r2, r5
 8005eae:	f022 0203 	bic.w	r2, r2, #3
 8005eb2:	3d03      	subs	r5, #3
 8005eb4:	45ac      	cmp	ip, r5
 8005eb6:	bf38      	it	cc
 8005eb8:	2200      	movcc	r2, #0
 8005eba:	4413      	add	r3, r2
 8005ebc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ec0:	b17a      	cbz	r2, 8005ee2 <__mdiff+0x106>
 8005ec2:	6107      	str	r7, [r0, #16]
 8005ec4:	e7a4      	b.n	8005e10 <__mdiff+0x34>
 8005ec6:	f856 8b04 	ldr.w	r8, [r6], #4
 8005eca:	fa11 f288 	uxtah	r2, r1, r8
 8005ece:	1414      	asrs	r4, r2, #16
 8005ed0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005eda:	f84e 2b04 	str.w	r2, [lr], #4
 8005ede:	1421      	asrs	r1, r4, #16
 8005ee0:	e7e0      	b.n	8005ea4 <__mdiff+0xc8>
 8005ee2:	3f01      	subs	r7, #1
 8005ee4:	e7ea      	b.n	8005ebc <__mdiff+0xe0>
 8005ee6:	bf00      	nop
 8005ee8:	08006e80 	.word	0x08006e80
 8005eec:	08006e91 	.word	0x08006e91

08005ef0 <__d2b>:
 8005ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	ec59 8b10 	vmov	r8, r9, d0
 8005efc:	4616      	mov	r6, r2
 8005efe:	f7ff fcd5 	bl	80058ac <_Balloc>
 8005f02:	4604      	mov	r4, r0
 8005f04:	b930      	cbnz	r0, 8005f14 <__d2b+0x24>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <__d2b+0xac>)
 8005f0a:	4825      	ldr	r0, [pc, #148]	; (8005fa0 <__d2b+0xb0>)
 8005f0c:	f240 310f 	movw	r1, #783	; 0x30f
 8005f10:	f000 fa86 	bl	8006420 <__assert_func>
 8005f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f1c:	bb2d      	cbnz	r5, 8005f6a <__d2b+0x7a>
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	f1b8 0300 	subs.w	r3, r8, #0
 8005f24:	d026      	beq.n	8005f74 <__d2b+0x84>
 8005f26:	4668      	mov	r0, sp
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	f7ff fd87 	bl	8005a3c <__lo0bits>
 8005f2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f32:	b1e8      	cbz	r0, 8005f70 <__d2b+0x80>
 8005f34:	f1c0 0320 	rsb	r3, r0, #32
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	40c2      	lsrs	r2, r0
 8005f40:	6163      	str	r3, [r4, #20]
 8005f42:	9201      	str	r2, [sp, #4]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	61a3      	str	r3, [r4, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2202      	movne	r2, #2
 8005f4e:	2201      	moveq	r2, #1
 8005f50:	6122      	str	r2, [r4, #16]
 8005f52:	b1bd      	cbz	r5, 8005f84 <__d2b+0x94>
 8005f54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f58:	4405      	add	r5, r0
 8005f5a:	603d      	str	r5, [r7, #0]
 8005f5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	b003      	add	sp, #12
 8005f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6e:	e7d6      	b.n	8005f1e <__d2b+0x2e>
 8005f70:	6161      	str	r1, [r4, #20]
 8005f72:	e7e7      	b.n	8005f44 <__d2b+0x54>
 8005f74:	a801      	add	r0, sp, #4
 8005f76:	f7ff fd61 	bl	8005a3c <__lo0bits>
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	3020      	adds	r0, #32
 8005f80:	2201      	movs	r2, #1
 8005f82:	e7e5      	b.n	8005f50 <__d2b+0x60>
 8005f84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f8c:	6038      	str	r0, [r7, #0]
 8005f8e:	6918      	ldr	r0, [r3, #16]
 8005f90:	f7ff fd34 	bl	80059fc <__hi0bits>
 8005f94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f98:	e7e2      	b.n	8005f60 <__d2b+0x70>
 8005f9a:	bf00      	nop
 8005f9c:	08006e80 	.word	0x08006e80
 8005fa0:	08006e91 	.word	0x08006e91

08005fa4 <__ssputs_r>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	688e      	ldr	r6, [r1, #8]
 8005faa:	461f      	mov	r7, r3
 8005fac:	42be      	cmp	r6, r7
 8005fae:	680b      	ldr	r3, [r1, #0]
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	d82c      	bhi.n	8006012 <__ssputs_r+0x6e>
 8005fb8:	898a      	ldrh	r2, [r1, #12]
 8005fba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fbe:	d026      	beq.n	800600e <__ssputs_r+0x6a>
 8005fc0:	6965      	ldr	r5, [r4, #20]
 8005fc2:	6909      	ldr	r1, [r1, #16]
 8005fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc8:	eba3 0901 	sub.w	r9, r3, r1
 8005fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd0:	1c7b      	adds	r3, r7, #1
 8005fd2:	444b      	add	r3, r9
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf38      	it	cc
 8005fda:	461d      	movcc	r5, r3
 8005fdc:	0553      	lsls	r3, r2, #21
 8005fde:	d527      	bpl.n	8006030 <__ssputs_r+0x8c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7ff fbd7 	bl	8005794 <_malloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b360      	cbz	r0, 8006044 <__ssputs_r+0xa0>
 8005fea:	6921      	ldr	r1, [r4, #16]
 8005fec:	464a      	mov	r2, r9
 8005fee:	f000 fa09 	bl	8006404 <memcpy>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	6126      	str	r6, [r4, #16]
 8006000:	6165      	str	r5, [r4, #20]
 8006002:	444e      	add	r6, r9
 8006004:	eba5 0509 	sub.w	r5, r5, r9
 8006008:	6026      	str	r6, [r4, #0]
 800600a:	60a5      	str	r5, [r4, #8]
 800600c:	463e      	mov	r6, r7
 800600e:	42be      	cmp	r6, r7
 8006010:	d900      	bls.n	8006014 <__ssputs_r+0x70>
 8006012:	463e      	mov	r6, r7
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	4632      	mov	r2, r6
 8006018:	4641      	mov	r1, r8
 800601a:	f000 f9c9 	bl	80063b0 <memmove>
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	60a3      	str	r3, [r4, #8]
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	4433      	add	r3, r6
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	462a      	mov	r2, r5
 8006032:	f000 fa3b 	bl	80064ac <_realloc_r>
 8006036:	4606      	mov	r6, r0
 8006038:	2800      	cmp	r0, #0
 800603a:	d1e0      	bne.n	8005ffe <__ssputs_r+0x5a>
 800603c:	6921      	ldr	r1, [r4, #16]
 800603e:	4650      	mov	r0, sl
 8006040:	f7ff fb34 	bl	80056ac <_free_r>
 8006044:	230c      	movs	r3, #12
 8006046:	f8ca 3000 	str.w	r3, [sl]
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	e7e9      	b.n	800602c <__ssputs_r+0x88>

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	; 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d50e      	bpl.n	800608a <_svfiprintf_r+0x32>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b963      	cbnz	r3, 800608a <_svfiprintf_r+0x32>
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	f7ff fb8f 	bl	8005794 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b920      	cbnz	r0, 8006086 <_svfiprintf_r+0x2e>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e0d0      	b.n	8006228 <_svfiprintf_r+0x1d0>
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	616b      	str	r3, [r5, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	2320      	movs	r3, #32
 8006090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006094:	f8cd 800c 	str.w	r8, [sp, #12]
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006240 <_svfiprintf_r+0x1e8>
 800609e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	4623      	mov	r3, r4
 80060a8:	469a      	mov	sl, r3
 80060aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ae:	b10a      	cbz	r2, 80060b4 <_svfiprintf_r+0x5c>
 80060b0:	2a25      	cmp	r2, #37	; 0x25
 80060b2:	d1f9      	bne.n	80060a8 <_svfiprintf_r+0x50>
 80060b4:	ebba 0b04 	subs.w	fp, sl, r4
 80060b8:	d00b      	beq.n	80060d2 <_svfiprintf_r+0x7a>
 80060ba:	465b      	mov	r3, fp
 80060bc:	4622      	mov	r2, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff6f 	bl	8005fa4 <__ssputs_r>
 80060c6:	3001      	adds	r0, #1
 80060c8:	f000 80a9 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	445a      	add	r2, fp
 80060d0:	9209      	str	r2, [sp, #36]	; 0x24
 80060d2:	f89a 3000 	ldrb.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a1 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060dc:	2300      	movs	r3, #0
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e6:	f10a 0a01 	add.w	sl, sl, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4654      	mov	r4, sl
 80060f6:	2205      	movs	r2, #5
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4850      	ldr	r0, [pc, #320]	; (8006240 <_svfiprintf_r+0x1e8>)
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	b9d8      	cbnz	r0, 800613e <_svfiprintf_r+0xe6>
 8006106:	06d0      	lsls	r0, r2, #27
 8006108:	bf44      	itt	mi
 800610a:	2320      	movmi	r3, #32
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	0711      	lsls	r1, r2, #28
 8006112:	bf44      	itt	mi
 8006114:	232b      	movmi	r3, #43	; 0x2b
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d015      	beq.n	800614e <_svfiprintf_r+0xf6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4654      	mov	r4, sl
 8006126:	2000      	movs	r0, #0
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4621      	mov	r1, r4
 800612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006132:	3b30      	subs	r3, #48	; 0x30
 8006134:	2b09      	cmp	r3, #9
 8006136:	d94d      	bls.n	80061d4 <_svfiprintf_r+0x17c>
 8006138:	b1b0      	cbz	r0, 8006168 <_svfiprintf_r+0x110>
 800613a:	9207      	str	r2, [sp, #28]
 800613c:	e014      	b.n	8006168 <_svfiprintf_r+0x110>
 800613e:	eba0 0308 	sub.w	r3, r0, r8
 8006142:	fa09 f303 	lsl.w	r3, r9, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	46a2      	mov	sl, r4
 800614c:	e7d2      	b.n	80060f4 <_svfiprintf_r+0x9c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9103      	str	r1, [sp, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbb      	ittet	lt
 800615a:	425b      	neglt	r3, r3
 800615c:	f042 0202 	orrlt.w	r2, r2, #2
 8006160:	9307      	strge	r3, [sp, #28]
 8006162:	9307      	strlt	r3, [sp, #28]
 8006164:	bfb8      	it	lt
 8006166:	9204      	strlt	r2, [sp, #16]
 8006168:	7823      	ldrb	r3, [r4, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d10c      	bne.n	8006188 <_svfiprintf_r+0x130>
 800616e:	7863      	ldrb	r3, [r4, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d134      	bne.n	80061de <_svfiprintf_r+0x186>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006250 <_svfiprintf_r+0x1f8>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f825 	bl	80001e0 <memchr>
 8006196:	b138      	cbz	r0, 80061a8 <_svfiprintf_r+0x150>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	4082      	lsls	r2, r0
 80061a2:	4313      	orrs	r3, r2
 80061a4:	3401      	adds	r4, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4825      	ldr	r0, [pc, #148]	; (8006244 <_svfiprintf_r+0x1ec>)
 80061ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b2:	2206      	movs	r2, #6
 80061b4:	f7fa f814 	bl	80001e0 <memchr>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d038      	beq.n	800622e <_svfiprintf_r+0x1d6>
 80061bc:	4b22      	ldr	r3, [pc, #136]	; (8006248 <_svfiprintf_r+0x1f0>)
 80061be:	bb1b      	cbnz	r3, 8006208 <_svfiprintf_r+0x1b0>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	3307      	adds	r3, #7
 80061c4:	f023 0307 	bic.w	r3, r3, #7
 80061c8:	3308      	adds	r3, #8
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	4433      	add	r3, r6
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	e768      	b.n	80060a6 <_svfiprintf_r+0x4e>
 80061d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d8:	460c      	mov	r4, r1
 80061da:	2001      	movs	r0, #1
 80061dc:	e7a6      	b.n	800612c <_svfiprintf_r+0xd4>
 80061de:	2300      	movs	r3, #0
 80061e0:	3401      	adds	r4, #1
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	4619      	mov	r1, r3
 80061e6:	f04f 0c0a 	mov.w	ip, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f0:	3a30      	subs	r2, #48	; 0x30
 80061f2:	2a09      	cmp	r2, #9
 80061f4:	d903      	bls.n	80061fe <_svfiprintf_r+0x1a6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0c6      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fa:	9105      	str	r1, [sp, #20]
 80061fc:	e7c4      	b.n	8006188 <_svfiprintf_r+0x130>
 80061fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006202:	4604      	mov	r4, r0
 8006204:	2301      	movs	r3, #1
 8006206:	e7f0      	b.n	80061ea <_svfiprintf_r+0x192>
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_svfiprintf_r+0x1f4>)
 8006210:	a904      	add	r1, sp, #16
 8006212:	4638      	mov	r0, r7
 8006214:	f7fd fe78 	bl	8003f08 <_printf_float>
 8006218:	1c42      	adds	r2, r0, #1
 800621a:	4606      	mov	r6, r0
 800621c:	d1d6      	bne.n	80061cc <_svfiprintf_r+0x174>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	065b      	lsls	r3, r3, #25
 8006222:	f53f af2d 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006228:	b01d      	add	sp, #116	; 0x74
 800622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <_svfiprintf_r+0x1f4>)
 8006236:	a904      	add	r1, sp, #16
 8006238:	4638      	mov	r0, r7
 800623a:	f7fe f909 	bl	8004450 <_printf_i>
 800623e:	e7eb      	b.n	8006218 <_svfiprintf_r+0x1c0>
 8006240:	08006fec 	.word	0x08006fec
 8006244:	08006ff6 	.word	0x08006ff6
 8006248:	08003f09 	.word	0x08003f09
 800624c:	08005fa5 	.word	0x08005fa5
 8006250:	08006ff2 	.word	0x08006ff2

08006254 <__sflush_r>:
 8006254:	898a      	ldrh	r2, [r1, #12]
 8006256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	0710      	lsls	r0, r2, #28
 800625e:	460c      	mov	r4, r1
 8006260:	d458      	bmi.n	8006314 <__sflush_r+0xc0>
 8006262:	684b      	ldr	r3, [r1, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dc05      	bgt.n	8006274 <__sflush_r+0x20>
 8006268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	dc02      	bgt.n	8006274 <__sflush_r+0x20>
 800626e:	2000      	movs	r0, #0
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006276:	2e00      	cmp	r6, #0
 8006278:	d0f9      	beq.n	800626e <__sflush_r+0x1a>
 800627a:	2300      	movs	r3, #0
 800627c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006280:	682f      	ldr	r7, [r5, #0]
 8006282:	6a21      	ldr	r1, [r4, #32]
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	d032      	beq.n	80062ee <__sflush_r+0x9a>
 8006288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	075a      	lsls	r2, r3, #29
 800628e:	d505      	bpl.n	800629c <__sflush_r+0x48>
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	1ac0      	subs	r0, r0, r3
 8006294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006296:	b10b      	cbz	r3, 800629c <__sflush_r+0x48>
 8006298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800629a:	1ac0      	subs	r0, r0, r3
 800629c:	2300      	movs	r3, #0
 800629e:	4602      	mov	r2, r0
 80062a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062a2:	6a21      	ldr	r1, [r4, #32]
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	d106      	bne.n	80062bc <__sflush_r+0x68>
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	291d      	cmp	r1, #29
 80062b2:	d82b      	bhi.n	800630c <__sflush_r+0xb8>
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <__sflush_r+0x108>)
 80062b6:	410a      	asrs	r2, r1
 80062b8:	07d6      	lsls	r6, r2, #31
 80062ba:	d427      	bmi.n	800630c <__sflush_r+0xb8>
 80062bc:	2200      	movs	r2, #0
 80062be:	6062      	str	r2, [r4, #4]
 80062c0:	04d9      	lsls	r1, r3, #19
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	d504      	bpl.n	80062d2 <__sflush_r+0x7e>
 80062c8:	1c42      	adds	r2, r0, #1
 80062ca:	d101      	bne.n	80062d0 <__sflush_r+0x7c>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b903      	cbnz	r3, 80062d2 <__sflush_r+0x7e>
 80062d0:	6560      	str	r0, [r4, #84]	; 0x54
 80062d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062d4:	602f      	str	r7, [r5, #0]
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d0c9      	beq.n	800626e <__sflush_r+0x1a>
 80062da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062de:	4299      	cmp	r1, r3
 80062e0:	d002      	beq.n	80062e8 <__sflush_r+0x94>
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7ff f9e2 	bl	80056ac <_free_r>
 80062e8:	2000      	movs	r0, #0
 80062ea:	6360      	str	r0, [r4, #52]	; 0x34
 80062ec:	e7c0      	b.n	8006270 <__sflush_r+0x1c>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b0      	blx	r6
 80062f4:	1c41      	adds	r1, r0, #1
 80062f6:	d1c8      	bne.n	800628a <__sflush_r+0x36>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c5      	beq.n	800628a <__sflush_r+0x36>
 80062fe:	2b1d      	cmp	r3, #29
 8006300:	d001      	beq.n	8006306 <__sflush_r+0xb2>
 8006302:	2b16      	cmp	r3, #22
 8006304:	d101      	bne.n	800630a <__sflush_r+0xb6>
 8006306:	602f      	str	r7, [r5, #0]
 8006308:	e7b1      	b.n	800626e <__sflush_r+0x1a>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	e7ad      	b.n	8006270 <__sflush_r+0x1c>
 8006314:	690f      	ldr	r7, [r1, #16]
 8006316:	2f00      	cmp	r7, #0
 8006318:	d0a9      	beq.n	800626e <__sflush_r+0x1a>
 800631a:	0793      	lsls	r3, r2, #30
 800631c:	680e      	ldr	r6, [r1, #0]
 800631e:	bf08      	it	eq
 8006320:	694b      	ldreq	r3, [r1, #20]
 8006322:	600f      	str	r7, [r1, #0]
 8006324:	bf18      	it	ne
 8006326:	2300      	movne	r3, #0
 8006328:	eba6 0807 	sub.w	r8, r6, r7
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	dd9c      	ble.n	800626e <__sflush_r+0x1a>
 8006334:	6a21      	ldr	r1, [r4, #32]
 8006336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006338:	4643      	mov	r3, r8
 800633a:	463a      	mov	r2, r7
 800633c:	4628      	mov	r0, r5
 800633e:	47b0      	blx	r6
 8006340:	2800      	cmp	r0, #0
 8006342:	dc06      	bgt.n	8006352 <__sflush_r+0xfe>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e78e      	b.n	8006270 <__sflush_r+0x1c>
 8006352:	4407      	add	r7, r0
 8006354:	eba8 0800 	sub.w	r8, r8, r0
 8006358:	e7e9      	b.n	800632e <__sflush_r+0xda>
 800635a:	bf00      	nop
 800635c:	dfbffffe 	.word	0xdfbffffe

08006360 <_fflush_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b913      	cbnz	r3, 8006370 <_fflush_r+0x10>
 800636a:	2500      	movs	r5, #0
 800636c:	4628      	mov	r0, r5
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	b118      	cbz	r0, 800637a <_fflush_r+0x1a>
 8006372:	6a03      	ldr	r3, [r0, #32]
 8006374:	b90b      	cbnz	r3, 800637a <_fflush_r+0x1a>
 8006376:	f7fe fa07 	bl	8004788 <__sinit>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f3      	beq.n	800636a <_fflush_r+0xa>
 8006382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006384:	07d0      	lsls	r0, r2, #31
 8006386:	d404      	bmi.n	8006392 <_fflush_r+0x32>
 8006388:	0599      	lsls	r1, r3, #22
 800638a:	d402      	bmi.n	8006392 <_fflush_r+0x32>
 800638c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800638e:	f7fe fb11 	bl	80049b4 <__retarget_lock_acquire_recursive>
 8006392:	4628      	mov	r0, r5
 8006394:	4621      	mov	r1, r4
 8006396:	f7ff ff5d 	bl	8006254 <__sflush_r>
 800639a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800639c:	07da      	lsls	r2, r3, #31
 800639e:	4605      	mov	r5, r0
 80063a0:	d4e4      	bmi.n	800636c <_fflush_r+0xc>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	059b      	lsls	r3, r3, #22
 80063a6:	d4e1      	bmi.n	800636c <_fflush_r+0xc>
 80063a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063aa:	f7fe fb04 	bl	80049b6 <__retarget_lock_release_recursive>
 80063ae:	e7dd      	b.n	800636c <_fflush_r+0xc>

080063b0 <memmove>:
 80063b0:	4288      	cmp	r0, r1
 80063b2:	b510      	push	{r4, lr}
 80063b4:	eb01 0402 	add.w	r4, r1, r2
 80063b8:	d902      	bls.n	80063c0 <memmove+0x10>
 80063ba:	4284      	cmp	r4, r0
 80063bc:	4623      	mov	r3, r4
 80063be:	d807      	bhi.n	80063d0 <memmove+0x20>
 80063c0:	1e43      	subs	r3, r0, #1
 80063c2:	42a1      	cmp	r1, r4
 80063c4:	d008      	beq.n	80063d8 <memmove+0x28>
 80063c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ce:	e7f8      	b.n	80063c2 <memmove+0x12>
 80063d0:	4402      	add	r2, r0
 80063d2:	4601      	mov	r1, r0
 80063d4:	428a      	cmp	r2, r1
 80063d6:	d100      	bne.n	80063da <memmove+0x2a>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063e2:	e7f7      	b.n	80063d4 <memmove+0x24>

080063e4 <_sbrk_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_sbrk_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fc f9be 	bl	8002770 <_sbrk>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_sbrk_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_sbrk_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20001874 	.word	0x20001874

08006404 <memcpy>:
 8006404:	440a      	add	r2, r1
 8006406:	4291      	cmp	r1, r2
 8006408:	f100 33ff 	add.w	r3, r0, #4294967295
 800640c:	d100      	bne.n	8006410 <memcpy+0xc>
 800640e:	4770      	bx	lr
 8006410:	b510      	push	{r4, lr}
 8006412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800641a:	4291      	cmp	r1, r2
 800641c:	d1f9      	bne.n	8006412 <memcpy+0xe>
 800641e:	bd10      	pop	{r4, pc}

08006420 <__assert_func>:
 8006420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006422:	4614      	mov	r4, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <__assert_func+0x2c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	68d8      	ldr	r0, [r3, #12]
 800642e:	b14c      	cbz	r4, 8006444 <__assert_func+0x24>
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <__assert_func+0x30>)
 8006432:	9100      	str	r1, [sp, #0]
 8006434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006438:	4906      	ldr	r1, [pc, #24]	; (8006454 <__assert_func+0x34>)
 800643a:	462b      	mov	r3, r5
 800643c:	f000 f872 	bl	8006524 <fiprintf>
 8006440:	f000 f882 	bl	8006548 <abort>
 8006444:	4b04      	ldr	r3, [pc, #16]	; (8006458 <__assert_func+0x38>)
 8006446:	461c      	mov	r4, r3
 8006448:	e7f3      	b.n	8006432 <__assert_func+0x12>
 800644a:	bf00      	nop
 800644c:	20000064 	.word	0x20000064
 8006450:	08007007 	.word	0x08007007
 8006454:	08007014 	.word	0x08007014
 8006458:	08007042 	.word	0x08007042

0800645c <_calloc_r>:
 800645c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800645e:	fba1 2402 	umull	r2, r4, r1, r2
 8006462:	b94c      	cbnz	r4, 8006478 <_calloc_r+0x1c>
 8006464:	4611      	mov	r1, r2
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	f7ff f994 	bl	8005794 <_malloc_r>
 800646c:	9a01      	ldr	r2, [sp, #4]
 800646e:	4605      	mov	r5, r0
 8006470:	b930      	cbnz	r0, 8006480 <_calloc_r+0x24>
 8006472:	4628      	mov	r0, r5
 8006474:	b003      	add	sp, #12
 8006476:	bd30      	pop	{r4, r5, pc}
 8006478:	220c      	movs	r2, #12
 800647a:	6002      	str	r2, [r0, #0]
 800647c:	2500      	movs	r5, #0
 800647e:	e7f8      	b.n	8006472 <_calloc_r+0x16>
 8006480:	4621      	mov	r1, r4
 8006482:	f7fe fa1a 	bl	80048ba <memset>
 8006486:	e7f4      	b.n	8006472 <_calloc_r+0x16>

08006488 <__ascii_mbtowc>:
 8006488:	b082      	sub	sp, #8
 800648a:	b901      	cbnz	r1, 800648e <__ascii_mbtowc+0x6>
 800648c:	a901      	add	r1, sp, #4
 800648e:	b142      	cbz	r2, 80064a2 <__ascii_mbtowc+0x1a>
 8006490:	b14b      	cbz	r3, 80064a6 <__ascii_mbtowc+0x1e>
 8006492:	7813      	ldrb	r3, [r2, #0]
 8006494:	600b      	str	r3, [r1, #0]
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	1e10      	subs	r0, r2, #0
 800649a:	bf18      	it	ne
 800649c:	2001      	movne	r0, #1
 800649e:	b002      	add	sp, #8
 80064a0:	4770      	bx	lr
 80064a2:	4610      	mov	r0, r2
 80064a4:	e7fb      	b.n	800649e <__ascii_mbtowc+0x16>
 80064a6:	f06f 0001 	mvn.w	r0, #1
 80064aa:	e7f8      	b.n	800649e <__ascii_mbtowc+0x16>

080064ac <_realloc_r>:
 80064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	4680      	mov	r8, r0
 80064b2:	4614      	mov	r4, r2
 80064b4:	460e      	mov	r6, r1
 80064b6:	b921      	cbnz	r1, 80064c2 <_realloc_r+0x16>
 80064b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	4611      	mov	r1, r2
 80064be:	f7ff b969 	b.w	8005794 <_malloc_r>
 80064c2:	b92a      	cbnz	r2, 80064d0 <_realloc_r+0x24>
 80064c4:	f7ff f8f2 	bl	80056ac <_free_r>
 80064c8:	4625      	mov	r5, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	f000 f841 	bl	8006556 <_malloc_usable_size_r>
 80064d4:	4284      	cmp	r4, r0
 80064d6:	4607      	mov	r7, r0
 80064d8:	d802      	bhi.n	80064e0 <_realloc_r+0x34>
 80064da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064de:	d812      	bhi.n	8006506 <_realloc_r+0x5a>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff f956 	bl	8005794 <_malloc_r>
 80064e8:	4605      	mov	r5, r0
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0ed      	beq.n	80064ca <_realloc_r+0x1e>
 80064ee:	42bc      	cmp	r4, r7
 80064f0:	4622      	mov	r2, r4
 80064f2:	4631      	mov	r1, r6
 80064f4:	bf28      	it	cs
 80064f6:	463a      	movcs	r2, r7
 80064f8:	f7ff ff84 	bl	8006404 <memcpy>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff f8d4 	bl	80056ac <_free_r>
 8006504:	e7e1      	b.n	80064ca <_realloc_r+0x1e>
 8006506:	4635      	mov	r5, r6
 8006508:	e7df      	b.n	80064ca <_realloc_r+0x1e>

0800650a <__ascii_wctomb>:
 800650a:	b149      	cbz	r1, 8006520 <__ascii_wctomb+0x16>
 800650c:	2aff      	cmp	r2, #255	; 0xff
 800650e:	bf85      	ittet	hi
 8006510:	238a      	movhi	r3, #138	; 0x8a
 8006512:	6003      	strhi	r3, [r0, #0]
 8006514:	700a      	strbls	r2, [r1, #0]
 8006516:	f04f 30ff 	movhi.w	r0, #4294967295
 800651a:	bf98      	it	ls
 800651c:	2001      	movls	r0, #1
 800651e:	4770      	bx	lr
 8006520:	4608      	mov	r0, r1
 8006522:	4770      	bx	lr

08006524 <fiprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b503      	push	{r0, r1, lr}
 8006528:	4601      	mov	r1, r0
 800652a:	ab03      	add	r3, sp, #12
 800652c:	4805      	ldr	r0, [pc, #20]	; (8006544 <fiprintf+0x20>)
 800652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006532:	6800      	ldr	r0, [r0, #0]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	f000 f83f 	bl	80065b8 <_vfiprintf_r>
 800653a:	b002      	add	sp, #8
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b003      	add	sp, #12
 8006542:	4770      	bx	lr
 8006544:	20000064 	.word	0x20000064

08006548 <abort>:
 8006548:	b508      	push	{r3, lr}
 800654a:	2006      	movs	r0, #6
 800654c:	f000 fa0c 	bl	8006968 <raise>
 8006550:	2001      	movs	r0, #1
 8006552:	f7fc f895 	bl	8002680 <_exit>

08006556 <_malloc_usable_size_r>:
 8006556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655a:	1f18      	subs	r0, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbc      	itt	lt
 8006560:	580b      	ldrlt	r3, [r1, r0]
 8006562:	18c0      	addlt	r0, r0, r3
 8006564:	4770      	bx	lr

08006566 <__sfputc_r>:
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	3b01      	subs	r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	b410      	push	{r4}
 800656e:	6093      	str	r3, [r2, #8]
 8006570:	da08      	bge.n	8006584 <__sfputc_r+0x1e>
 8006572:	6994      	ldr	r4, [r2, #24]
 8006574:	42a3      	cmp	r3, r4
 8006576:	db01      	blt.n	800657c <__sfputc_r+0x16>
 8006578:	290a      	cmp	r1, #10
 800657a:	d103      	bne.n	8006584 <__sfputc_r+0x1e>
 800657c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006580:	f000 b934 	b.w	80067ec <__swbuf_r>
 8006584:	6813      	ldr	r3, [r2, #0]
 8006586:	1c58      	adds	r0, r3, #1
 8006588:	6010      	str	r0, [r2, #0]
 800658a:	7019      	strb	r1, [r3, #0]
 800658c:	4608      	mov	r0, r1
 800658e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006592:	4770      	bx	lr

08006594 <__sfputs_r>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	4614      	mov	r4, r2
 800659c:	18d5      	adds	r5, r2, r3
 800659e:	42ac      	cmp	r4, r5
 80065a0:	d101      	bne.n	80065a6 <__sfputs_r+0x12>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e007      	b.n	80065b6 <__sfputs_r+0x22>
 80065a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065aa:	463a      	mov	r2, r7
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff ffda 	bl	8006566 <__sfputc_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d1f3      	bne.n	800659e <__sfputs_r+0xa>
 80065b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065b8 <_vfiprintf_r>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	460d      	mov	r5, r1
 80065be:	b09d      	sub	sp, #116	; 0x74
 80065c0:	4614      	mov	r4, r2
 80065c2:	4698      	mov	r8, r3
 80065c4:	4606      	mov	r6, r0
 80065c6:	b118      	cbz	r0, 80065d0 <_vfiprintf_r+0x18>
 80065c8:	6a03      	ldr	r3, [r0, #32]
 80065ca:	b90b      	cbnz	r3, 80065d0 <_vfiprintf_r+0x18>
 80065cc:	f7fe f8dc 	bl	8004788 <__sinit>
 80065d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	d405      	bmi.n	80065e2 <_vfiprintf_r+0x2a>
 80065d6:	89ab      	ldrh	r3, [r5, #12]
 80065d8:	059a      	lsls	r2, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_vfiprintf_r+0x2a>
 80065dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065de:	f7fe f9e9 	bl	80049b4 <__retarget_lock_acquire_recursive>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	071b      	lsls	r3, r3, #28
 80065e6:	d501      	bpl.n	80065ec <_vfiprintf_r+0x34>
 80065e8:	692b      	ldr	r3, [r5, #16]
 80065ea:	b99b      	cbnz	r3, 8006614 <_vfiprintf_r+0x5c>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4630      	mov	r0, r6
 80065f0:	f000 f93a 	bl	8006868 <__swsetup_r>
 80065f4:	b170      	cbz	r0, 8006614 <_vfiprintf_r+0x5c>
 80065f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f8:	07dc      	lsls	r4, r3, #31
 80065fa:	d504      	bpl.n	8006606 <_vfiprintf_r+0x4e>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	b01d      	add	sp, #116	; 0x74
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	0598      	lsls	r0, r3, #22
 800660a:	d4f7      	bmi.n	80065fc <_vfiprintf_r+0x44>
 800660c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800660e:	f7fe f9d2 	bl	80049b6 <__retarget_lock_release_recursive>
 8006612:	e7f3      	b.n	80065fc <_vfiprintf_r+0x44>
 8006614:	2300      	movs	r3, #0
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	2320      	movs	r3, #32
 800661a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800661e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80067d8 <_vfiprintf_r+0x220>
 8006628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800662c:	f04f 0901 	mov.w	r9, #1
 8006630:	4623      	mov	r3, r4
 8006632:	469a      	mov	sl, r3
 8006634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006638:	b10a      	cbz	r2, 800663e <_vfiprintf_r+0x86>
 800663a:	2a25      	cmp	r2, #37	; 0x25
 800663c:	d1f9      	bne.n	8006632 <_vfiprintf_r+0x7a>
 800663e:	ebba 0b04 	subs.w	fp, sl, r4
 8006642:	d00b      	beq.n	800665c <_vfiprintf_r+0xa4>
 8006644:	465b      	mov	r3, fp
 8006646:	4622      	mov	r2, r4
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff ffa2 	bl	8006594 <__sfputs_r>
 8006650:	3001      	adds	r0, #1
 8006652:	f000 80a9 	beq.w	80067a8 <_vfiprintf_r+0x1f0>
 8006656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006658:	445a      	add	r2, fp
 800665a:	9209      	str	r2, [sp, #36]	; 0x24
 800665c:	f89a 3000 	ldrb.w	r3, [sl]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80a1 	beq.w	80067a8 <_vfiprintf_r+0x1f0>
 8006666:	2300      	movs	r3, #0
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006670:	f10a 0a01 	add.w	sl, sl, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	9307      	str	r3, [sp, #28]
 8006678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800667c:	931a      	str	r3, [sp, #104]	; 0x68
 800667e:	4654      	mov	r4, sl
 8006680:	2205      	movs	r2, #5
 8006682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006686:	4854      	ldr	r0, [pc, #336]	; (80067d8 <_vfiprintf_r+0x220>)
 8006688:	f7f9 fdaa 	bl	80001e0 <memchr>
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	b9d8      	cbnz	r0, 80066c8 <_vfiprintf_r+0x110>
 8006690:	06d1      	lsls	r1, r2, #27
 8006692:	bf44      	itt	mi
 8006694:	2320      	movmi	r3, #32
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669a:	0713      	lsls	r3, r2, #28
 800669c:	bf44      	itt	mi
 800669e:	232b      	movmi	r3, #43	; 0x2b
 80066a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a4:	f89a 3000 	ldrb.w	r3, [sl]
 80066a8:	2b2a      	cmp	r3, #42	; 0x2a
 80066aa:	d015      	beq.n	80066d8 <_vfiprintf_r+0x120>
 80066ac:	9a07      	ldr	r2, [sp, #28]
 80066ae:	4654      	mov	r4, sl
 80066b0:	2000      	movs	r0, #0
 80066b2:	f04f 0c0a 	mov.w	ip, #10
 80066b6:	4621      	mov	r1, r4
 80066b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066bc:	3b30      	subs	r3, #48	; 0x30
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d94d      	bls.n	800675e <_vfiprintf_r+0x1a6>
 80066c2:	b1b0      	cbz	r0, 80066f2 <_vfiprintf_r+0x13a>
 80066c4:	9207      	str	r2, [sp, #28]
 80066c6:	e014      	b.n	80066f2 <_vfiprintf_r+0x13a>
 80066c8:	eba0 0308 	sub.w	r3, r0, r8
 80066cc:	fa09 f303 	lsl.w	r3, r9, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	46a2      	mov	sl, r4
 80066d6:	e7d2      	b.n	800667e <_vfiprintf_r+0xc6>
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	1d19      	adds	r1, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9103      	str	r1, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfbb      	ittet	lt
 80066e4:	425b      	neglt	r3, r3
 80066e6:	f042 0202 	orrlt.w	r2, r2, #2
 80066ea:	9307      	strge	r3, [sp, #28]
 80066ec:	9307      	strlt	r3, [sp, #28]
 80066ee:	bfb8      	it	lt
 80066f0:	9204      	strlt	r2, [sp, #16]
 80066f2:	7823      	ldrb	r3, [r4, #0]
 80066f4:	2b2e      	cmp	r3, #46	; 0x2e
 80066f6:	d10c      	bne.n	8006712 <_vfiprintf_r+0x15a>
 80066f8:	7863      	ldrb	r3, [r4, #1]
 80066fa:	2b2a      	cmp	r3, #42	; 0x2a
 80066fc:	d134      	bne.n	8006768 <_vfiprintf_r+0x1b0>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb8      	it	lt
 800670a:	f04f 33ff 	movlt.w	r3, #4294967295
 800670e:	3402      	adds	r4, #2
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80067e8 <_vfiprintf_r+0x230>
 8006716:	7821      	ldrb	r1, [r4, #0]
 8006718:	2203      	movs	r2, #3
 800671a:	4650      	mov	r0, sl
 800671c:	f7f9 fd60 	bl	80001e0 <memchr>
 8006720:	b138      	cbz	r0, 8006732 <_vfiprintf_r+0x17a>
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	eba0 000a 	sub.w	r0, r0, sl
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	4082      	lsls	r2, r0
 800672c:	4313      	orrs	r3, r2
 800672e:	3401      	adds	r4, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006736:	4829      	ldr	r0, [pc, #164]	; (80067dc <_vfiprintf_r+0x224>)
 8006738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800673c:	2206      	movs	r2, #6
 800673e:	f7f9 fd4f 	bl	80001e0 <memchr>
 8006742:	2800      	cmp	r0, #0
 8006744:	d03f      	beq.n	80067c6 <_vfiprintf_r+0x20e>
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <_vfiprintf_r+0x228>)
 8006748:	bb1b      	cbnz	r3, 8006792 <_vfiprintf_r+0x1da>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	3307      	adds	r3, #7
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	3308      	adds	r3, #8
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006758:	443b      	add	r3, r7
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	e768      	b.n	8006630 <_vfiprintf_r+0x78>
 800675e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006762:	460c      	mov	r4, r1
 8006764:	2001      	movs	r0, #1
 8006766:	e7a6      	b.n	80066b6 <_vfiprintf_r+0xfe>
 8006768:	2300      	movs	r3, #0
 800676a:	3401      	adds	r4, #1
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677a:	3a30      	subs	r2, #48	; 0x30
 800677c:	2a09      	cmp	r2, #9
 800677e:	d903      	bls.n	8006788 <_vfiprintf_r+0x1d0>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0c6      	beq.n	8006712 <_vfiprintf_r+0x15a>
 8006784:	9105      	str	r1, [sp, #20]
 8006786:	e7c4      	b.n	8006712 <_vfiprintf_r+0x15a>
 8006788:	fb0c 2101 	mla	r1, ip, r1, r2
 800678c:	4604      	mov	r4, r0
 800678e:	2301      	movs	r3, #1
 8006790:	e7f0      	b.n	8006774 <_vfiprintf_r+0x1bc>
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <_vfiprintf_r+0x22c>)
 800679a:	a904      	add	r1, sp, #16
 800679c:	4630      	mov	r0, r6
 800679e:	f7fd fbb3 	bl	8003f08 <_printf_float>
 80067a2:	4607      	mov	r7, r0
 80067a4:	1c78      	adds	r0, r7, #1
 80067a6:	d1d6      	bne.n	8006756 <_vfiprintf_r+0x19e>
 80067a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067aa:	07d9      	lsls	r1, r3, #31
 80067ac:	d405      	bmi.n	80067ba <_vfiprintf_r+0x202>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	059a      	lsls	r2, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_vfiprintf_r+0x202>
 80067b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b6:	f7fe f8fe 	bl	80049b6 <__retarget_lock_release_recursive>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	065b      	lsls	r3, r3, #25
 80067be:	f53f af1d 	bmi.w	80065fc <_vfiprintf_r+0x44>
 80067c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c4:	e71c      	b.n	8006600 <_vfiprintf_r+0x48>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <_vfiprintf_r+0x22c>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7fd fe3d 	bl	8004450 <_printf_i>
 80067d6:	e7e4      	b.n	80067a2 <_vfiprintf_r+0x1ea>
 80067d8:	08006fec 	.word	0x08006fec
 80067dc:	08006ff6 	.word	0x08006ff6
 80067e0:	08003f09 	.word	0x08003f09
 80067e4:	08006595 	.word	0x08006595
 80067e8:	08006ff2 	.word	0x08006ff2

080067ec <__swbuf_r>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	460e      	mov	r6, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	4605      	mov	r5, r0
 80067f4:	b118      	cbz	r0, 80067fe <__swbuf_r+0x12>
 80067f6:	6a03      	ldr	r3, [r0, #32]
 80067f8:	b90b      	cbnz	r3, 80067fe <__swbuf_r+0x12>
 80067fa:	f7fd ffc5 	bl	8004788 <__sinit>
 80067fe:	69a3      	ldr	r3, [r4, #24]
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	071a      	lsls	r2, r3, #28
 8006806:	d525      	bpl.n	8006854 <__swbuf_r+0x68>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	b31b      	cbz	r3, 8006854 <__swbuf_r+0x68>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	1a98      	subs	r0, r3, r2
 8006812:	6963      	ldr	r3, [r4, #20]
 8006814:	b2f6      	uxtb	r6, r6
 8006816:	4283      	cmp	r3, r0
 8006818:	4637      	mov	r7, r6
 800681a:	dc04      	bgt.n	8006826 <__swbuf_r+0x3a>
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f7ff fd9e 	bl	8006360 <_fflush_r>
 8006824:	b9e0      	cbnz	r0, 8006860 <__swbuf_r+0x74>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	701e      	strb	r6, [r3, #0]
 8006834:	6962      	ldr	r2, [r4, #20]
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	429a      	cmp	r2, r3
 800683a:	d004      	beq.n	8006846 <__swbuf_r+0x5a>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d506      	bpl.n	8006850 <__swbuf_r+0x64>
 8006842:	2e0a      	cmp	r6, #10
 8006844:	d104      	bne.n	8006850 <__swbuf_r+0x64>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff fd89 	bl	8006360 <_fflush_r>
 800684e:	b938      	cbnz	r0, 8006860 <__swbuf_r+0x74>
 8006850:	4638      	mov	r0, r7
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f806 	bl	8006868 <__swsetup_r>
 800685c:	2800      	cmp	r0, #0
 800685e:	d0d5      	beq.n	800680c <__swbuf_r+0x20>
 8006860:	f04f 37ff 	mov.w	r7, #4294967295
 8006864:	e7f4      	b.n	8006850 <__swbuf_r+0x64>
	...

08006868 <__swsetup_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <__swsetup_r+0xac>)
 800686c:	4605      	mov	r5, r0
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	460c      	mov	r4, r1
 8006872:	b118      	cbz	r0, 800687c <__swsetup_r+0x14>
 8006874:	6a03      	ldr	r3, [r0, #32]
 8006876:	b90b      	cbnz	r3, 800687c <__swsetup_r+0x14>
 8006878:	f7fd ff86 	bl	8004788 <__sinit>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006882:	0718      	lsls	r0, r3, #28
 8006884:	d422      	bmi.n	80068cc <__swsetup_r+0x64>
 8006886:	06d9      	lsls	r1, r3, #27
 8006888:	d407      	bmi.n	800689a <__swsetup_r+0x32>
 800688a:	2309      	movs	r3, #9
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e034      	b.n	8006904 <__swsetup_r+0x9c>
 800689a:	0758      	lsls	r0, r3, #29
 800689c:	d512      	bpl.n	80068c4 <__swsetup_r+0x5c>
 800689e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a0:	b141      	cbz	r1, 80068b4 <__swsetup_r+0x4c>
 80068a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d002      	beq.n	80068b0 <__swsetup_r+0x48>
 80068aa:	4628      	mov	r0, r5
 80068ac:	f7fe fefe 	bl	80056ac <_free_r>
 80068b0:	2300      	movs	r3, #0
 80068b2:	6363      	str	r3, [r4, #52]	; 0x34
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	2300      	movs	r3, #0
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f043 0308 	orr.w	r3, r3, #8
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	b94b      	cbnz	r3, 80068e4 <__swsetup_r+0x7c>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068da:	d003      	beq.n	80068e4 <__swsetup_r+0x7c>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f884 	bl	80069ec <__smakebuf_r>
 80068e4:	89a0      	ldrh	r0, [r4, #12]
 80068e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ea:	f010 0301 	ands.w	r3, r0, #1
 80068ee:	d00a      	beq.n	8006906 <__swsetup_r+0x9e>
 80068f0:	2300      	movs	r3, #0
 80068f2:	60a3      	str	r3, [r4, #8]
 80068f4:	6963      	ldr	r3, [r4, #20]
 80068f6:	425b      	negs	r3, r3
 80068f8:	61a3      	str	r3, [r4, #24]
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	b943      	cbnz	r3, 8006910 <__swsetup_r+0xa8>
 80068fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006902:	d1c4      	bne.n	800688e <__swsetup_r+0x26>
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	0781      	lsls	r1, r0, #30
 8006908:	bf58      	it	pl
 800690a:	6963      	ldrpl	r3, [r4, #20]
 800690c:	60a3      	str	r3, [r4, #8]
 800690e:	e7f4      	b.n	80068fa <__swsetup_r+0x92>
 8006910:	2000      	movs	r0, #0
 8006912:	e7f7      	b.n	8006904 <__swsetup_r+0x9c>
 8006914:	20000064 	.word	0x20000064

08006918 <_raise_r>:
 8006918:	291f      	cmp	r1, #31
 800691a:	b538      	push	{r3, r4, r5, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	460d      	mov	r5, r1
 8006920:	d904      	bls.n	800692c <_raise_r+0x14>
 8006922:	2316      	movs	r3, #22
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800692e:	b112      	cbz	r2, 8006936 <_raise_r+0x1e>
 8006930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006934:	b94b      	cbnz	r3, 800694a <_raise_r+0x32>
 8006936:	4620      	mov	r0, r4
 8006938:	f000 f830 	bl	800699c <_getpid_r>
 800693c:	462a      	mov	r2, r5
 800693e:	4601      	mov	r1, r0
 8006940:	4620      	mov	r0, r4
 8006942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006946:	f000 b817 	b.w	8006978 <_kill_r>
 800694a:	2b01      	cmp	r3, #1
 800694c:	d00a      	beq.n	8006964 <_raise_r+0x4c>
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	d103      	bne.n	800695a <_raise_r+0x42>
 8006952:	2316      	movs	r3, #22
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	2001      	movs	r0, #1
 8006958:	e7e7      	b.n	800692a <_raise_r+0x12>
 800695a:	2400      	movs	r4, #0
 800695c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006960:	4628      	mov	r0, r5
 8006962:	4798      	blx	r3
 8006964:	2000      	movs	r0, #0
 8006966:	e7e0      	b.n	800692a <_raise_r+0x12>

08006968 <raise>:
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <raise+0xc>)
 800696a:	4601      	mov	r1, r0
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f7ff bfd3 	b.w	8006918 <_raise_r>
 8006972:	bf00      	nop
 8006974:	20000064 	.word	0x20000064

08006978 <_kill_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	; (8006998 <_kill_r+0x20>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	4611      	mov	r1, r2
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	f7fb fe6b 	bl	8002660 <_kill>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d102      	bne.n	8006994 <_kill_r+0x1c>
 800698e:	682b      	ldr	r3, [r5, #0]
 8006990:	b103      	cbz	r3, 8006994 <_kill_r+0x1c>
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	bd38      	pop	{r3, r4, r5, pc}
 8006996:	bf00      	nop
 8006998:	20001874 	.word	0x20001874

0800699c <_getpid_r>:
 800699c:	f7fb be58 	b.w	8002650 <_getpid>

080069a0 <__swhatbuf_r>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	460c      	mov	r4, r1
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2900      	cmp	r1, #0
 80069aa:	b096      	sub	sp, #88	; 0x58
 80069ac:	4615      	mov	r5, r2
 80069ae:	461e      	mov	r6, r3
 80069b0:	da0d      	bge.n	80069ce <__swhatbuf_r+0x2e>
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	bf0c      	ite	eq
 80069be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069c2:	2340      	movne	r3, #64	; 0x40
 80069c4:	2000      	movs	r0, #0
 80069c6:	6031      	str	r1, [r6, #0]
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	b016      	add	sp, #88	; 0x58
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
 80069ce:	466a      	mov	r2, sp
 80069d0:	f000 f848 	bl	8006a64 <_fstat_r>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	dbec      	blt.n	80069b2 <__swhatbuf_r+0x12>
 80069d8:	9901      	ldr	r1, [sp, #4]
 80069da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069e2:	4259      	negs	r1, r3
 80069e4:	4159      	adcs	r1, r3
 80069e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ea:	e7eb      	b.n	80069c4 <__swhatbuf_r+0x24>

080069ec <__smakebuf_r>:
 80069ec:	898b      	ldrh	r3, [r1, #12]
 80069ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069f0:	079d      	lsls	r5, r3, #30
 80069f2:	4606      	mov	r6, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	d507      	bpl.n	8006a08 <__smakebuf_r+0x1c>
 80069f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	2301      	movs	r3, #1
 8006a02:	6163      	str	r3, [r4, #20]
 8006a04:	b002      	add	sp, #8
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	ab01      	add	r3, sp, #4
 8006a0a:	466a      	mov	r2, sp
 8006a0c:	f7ff ffc8 	bl	80069a0 <__swhatbuf_r>
 8006a10:	9900      	ldr	r1, [sp, #0]
 8006a12:	4605      	mov	r5, r0
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7fe febd 	bl	8005794 <_malloc_r>
 8006a1a:	b948      	cbnz	r0, 8006a30 <__smakebuf_r+0x44>
 8006a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a20:	059a      	lsls	r2, r3, #22
 8006a22:	d4ef      	bmi.n	8006a04 <__smakebuf_r+0x18>
 8006a24:	f023 0303 	bic.w	r3, r3, #3
 8006a28:	f043 0302 	orr.w	r3, r3, #2
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7e3      	b.n	80069f8 <__smakebuf_r+0xc>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	6020      	str	r0, [r4, #0]
 8006a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	9b00      	ldr	r3, [sp, #0]
 8006a3c:	6163      	str	r3, [r4, #20]
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	6120      	str	r0, [r4, #16]
 8006a42:	b15b      	cbz	r3, 8006a5c <__smakebuf_r+0x70>
 8006a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f000 f81d 	bl	8006a88 <_isatty_r>
 8006a4e:	b128      	cbz	r0, 8006a5c <__smakebuf_r+0x70>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f023 0303 	bic.w	r3, r3, #3
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	431d      	orrs	r5, r3
 8006a60:	81a5      	strh	r5, [r4, #12]
 8006a62:	e7cf      	b.n	8006a04 <__smakebuf_r+0x18>

08006a64 <_fstat_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d07      	ldr	r5, [pc, #28]	; (8006a84 <_fstat_r+0x20>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f7fb fe54 	bl	800271e <_fstat>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d102      	bne.n	8006a80 <_fstat_r+0x1c>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b103      	cbz	r3, 8006a80 <_fstat_r+0x1c>
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
 8006a82:	bf00      	nop
 8006a84:	20001874 	.word	0x20001874

08006a88 <_isatty_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d06      	ldr	r5, [pc, #24]	; (8006aa4 <_isatty_r+0x1c>)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fb fe53 	bl	800273e <_isatty>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_isatty_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_isatty_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20001874 	.word	0x20001874

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
